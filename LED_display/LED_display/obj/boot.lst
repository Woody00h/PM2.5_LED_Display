

HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:50 2015


     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0011                    PORT_2_GLOBAL_SELECT:	equ 11h	;Port 2 global select register (PRT2GS)
   102  0001                    PORT_2_DRIVE_0:			equ 1h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00FE                    PORT_2_DRIVE_1:			equ feh	;Port 2 drive mode 1 register (PRT2DM1)
   104  00EE                    PORT_2_DRIVE_2:			equ eeh	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114                          PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
      + 0000                    PORT_3_INTCTRL_1	equ	0
      + 3C9E                    ; end of file GlobalParams.inc

     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C9E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C9E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C9E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C9E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C9E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C9E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C9E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C9E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C9E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C9E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C9E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C9E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C9E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C9E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C9E                    
      + 3C9E                    ; end of file m8c.inc

     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C22045 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C22045 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  3C9E                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov A, reg[0xD0]  ; CUR_PP
   130                          	push A
   131                          	mov reg[0xD0], 0
   132                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   133                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   134                              M8C_SetBank1
   135                              mov   A, [@IMO_Trim]
   136                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   137                              mov   A, [@Volt_Trim]
   138                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   139                              M8C_SetBank0
   140                          	pop A
   141                          	mov reg[0xD0], A
   142  3C9E                        endm
   143                          
   144                          
   145                          ;-----------------------------------------------------------------------------
   146                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   147                          ;
   148                          ;  DESCRIPTION:
   149                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   150                          ;     registers with values from from the specified flash System Parameter
   151                          ;     table entries. Each trim value comes from a different table.
   152                          ;     Also, see M8SSC_SetTableTrims above.
   153                          ;-----------------------------------------------------------------------------
   154                          ;
   155                          ;  ARGUMENTS:
   156                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   157                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   158                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   159                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   160                          ;
   161                          ;  RETURNS:
   162                          ;     Nothing
   163                          ;
   164                          ;  SIDE EFFECTS:
   165                          ;     The values of the A and X registers are modified
   166                          ;
   167                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   168                              mov A, reg[0xD0]  ; CUR_PP
   169                          	push A
   170                          	mov reg[0xD0], 0
   171                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   172                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   173                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   174                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   175                              mov   reg[IMO_TR], A
   176                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   177                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   178                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   179                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   180                              M8C_SetBank0
   181                          	pop A
   182                          	mov reg[0xD0], A
   183  3C9E                        endm
   184                          
   185                          
   186                          ;-----------------------------------------------------------------------------
   187                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Loads Bandgap Voltage Trim register with values from from the
   191                          ;     specified flash System Parameter table entry.
   192                          ;-----------------------------------------------------------------------------
   193                          ;
   194                          ;  ARGUMENTS:
   195                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   196                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   197                          ;
   198                          ;  RETURNS:
   199                          ;     Nothing
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;     The values of the A and X registers are modified
   203                          ;
   204                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   205                              mov A, reg[0xD0]  ; CUR_PP
   206                          	push A
   207                          	mov reg[0xD0], 0
   208                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   209                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   210                              M8C_SetBank1
   211                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   212                              mov   reg[BDG_TR], A                   ; Update the register value
   213                              M8C_SetBank0
   214                          	pop A
   215                          	mov reg[0xD0], A
   216  3C9E                        endm
   217                          
   218                          
   219                          ;-----------------------------------------------------------------------------
   220                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   224                          ;     from the specified flash System Parameter table entry.
   225                          ;-----------------------------------------------------------------------------
   226                          ;
   227                          ;  ARGUMENTS:
   228                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   229                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   230                          ;
   231                          ;  RETURNS:
   232                          ;     Nothing
   233                          ;
   234                          ;  SIDE EFFECTS:
   235                          ;     The values of the A and X registers are modified
   236                          ;
   237                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                              mov A, reg[0xD0]  ; CUR_PP
   239                          	push A
   240                          	mov reg[0xD0], 0
   241                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   242                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   243                              M8C_SetBank1
   244                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   245                              mov   reg[IMO_TR], A               ; Update the register value
   246                              M8C_SetBank0
   247                          	pop A
   248                          	mov reg[0xD0], A
   249                              endm
      + 3C9E                    
      + 3C9E                    ; end of file m8ssc.inc

     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C9E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C9E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C9E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C9E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C9E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C9E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C9E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C9E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C9E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C9E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C9E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C9E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C9E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C9E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C9E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C9E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C9E                       endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;@Id: boot.tpl#904 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    1.50
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C22x45 microcontroller devices.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          ; The following equate is required for proper operation. Reseting its value
    79                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    80                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    81                          ; and PLL_Lock must take place within user code. See the family data sheet for
    82                          ; the requirements of starting the ECO and PLL lock mode.
    83                          ;
    84                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    85                          ;                invoking main
    86                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    87                          ;               the time code in main starts executing.
    88                          ;
    89  0001                    WAIT_FOR_32K:                    equ 1
    90                          
    91                          ;-----------------------------------------------------------------------------
    92                          ; Interrupt Vector Table
    93                          ;-----------------------------------------------------------------------------
    94                          ;
    95                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    96                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    97                          ; very short ISRs could be encoded within the table itself. Normally,
    98                          ; vector jump targets are modified automatically according to the user
    99                          ; modules selected. This occurs when the 'Generate Application' opera-
   100                          ; tion is run causing PSoC Designer to create boot.asm and the other
   101                          ; configuration files. If you need to hard code a vector, update the
   102                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   103                          ; of this file.
   104                          ;-----------------------------------------------------------------------------
   105                          
   106                              AREA TOP (ROM, ABS, CON)
   107                          
   108  0000                        org   0                        ;Reset Interrupt Vector
   109                          IF	(TOOLCHAIN & HITECH)
   110                          ;   jmp   __Start                  ;C compiler fills in this vector
   111                          ELSE
   112                              jmp   __Start                  ;First instruction executed following a Reset
   113                          ENDIF
   114                              ;@PSoC_BOOT_ISR_UserCode_START@
   115                              ;---------------------------------------------------
   116                              ; Insert your custom code below this banner
   117                              ;---------------------------------------------------
   118                          
   119  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   120  0004  30                    halt                           ;Stop execution if power falls too low
   121                          
   122  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   123                              // call	void_handler
   124  0008  7E                    reti
   125                          
   126  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   127                              // call	void_handler
   128  000C  7E                    reti
   129                          
   130  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   131                              // call	void_handler
   132  0010  7E                    reti
   133                          
   134  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   135                              // call	void_handler
   136  0014  7E                    reti
   137                              
   138  0018                        org   18h                      ;VC3 Interrupt Vector
   139                              // call	void_handler
   140  0018  7E                    reti
   141                          
   142  001C                        org   1Ch                      ;GPIO Interrupt Vector
   143                              // call	void_handler
   144  001C  7E                    reti
   145                          
   146  0020                        org   20h                      ;PSoC Block DBC00 Interrupt Vector
   147                              // call	void_handler
   148  0020  7E                    reti
   149                          
   150  0024                        org   24h                      ;PSoC Block DBC01 Interrupt Vector
   151  0024  7C 3C05               lcall _Timer16ISR
   152  0027  7E                    reti
   153                          
   154  0028                        org   28h                      ;PSoC Block DCC02 Interrupt Vector
   155  0028  7D 3104               ljmp	_UART_Sensor_TX_ISR
   156  002B  7E                    reti
   157                          
   158  002C                        org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
   159  002C  7C 3C23               lcall _SensorUART
   160  002F  7E                    reti
   161                              
   162  0030                        org   30h                      ;PSoC Block DBC10 Interrupt Vector
   163  0030  7C 3B5C               lcall _Timer8ISR
   164  0033  7E                    reti
   165                          
   166  0034                        org   34h                      ;PSoC Block DBC11 Interrupt Vector
   167                              // call	void_handler
   168  0034  7E                    reti
   169                          
   170  0038                        org   38h                      ;PSoC Block DCC12 Interrupt Vector
   171  0038  7D 2FB4               ljmp	_UART_Board_TX_ISR
   172  003B  7E                    reti
   173                          
   174  003C                        org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
   175  003C  7C 3B57               lcall _BoardUART
   176  003F  7E                    reti
   177                          
   178  0050                        org   50h                      ;SARADC Interrupt Vector
   179  0050  7D 2DB8               ljmp	_SAR10_ISR
   180  0053  7E                    reti
   181                          
   182  0054                        org   54h                      ;CSD0 Interrupt Vector
   183                              // call	void_handler
   184  0054  7E                    reti
   185                          
   186  0058                        org   58h                      ;CSD1 Interrupt Vector
   187                              // call	void_handler
   188  0058  7E                    reti
   189                          
   190  005C                        org   5Ch                      ;RTC Interrupt Vector
   191                              // call	void_handler
   192  005C  7E                    reti
   193                              
   194  0050                        org 50h                        ;SAR10 Interrupt Vector
   195  0050  7D 2DB8               ljmp	_SAR10_ISR
   196  0053  7E                    reti
   197                          
   198  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   199                              // call	void_handler
   200  0060  7E                    reti
   201                          
   202  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   203                              // call	void_handler
   204  0064  7E                    reti
   205                              ;---------------------------------------------------
   206                              ; Insert your custom code above this banner
   207                              ;---------------------------------------------------
   208                              ;@PSoC_BOOT_ISR_UserCode_END@
   209                          
   210                          ;-----------------------------------------------------------------------------
   211                          ;  Start of Execution.
   212                          ;-----------------------------------------------------------------------------
   213                          ;  The Supervisory ROM SWBootReset function has already completed the
   214                          ;  calibrate1 process, loading trim values for 5 volt operation.
   215                          ;
   216                          
   217                          IF	(TOOLCHAIN & HITECH)
   218                           	AREA PD_startup(CODE, REL, CON)
   219                          ELSE
   220                              org 68h
   221                          ENDIF
   222  3F46                    __Start:
   223                          
   224                              ; initialize SMP values for voltage stabilization, if required,
   225                              ; leaving power-on reset (POR) level at the default (low) level, at
   226                              ; least for now. 
   227                              ;
   228  3F46  71 10                 M8C_SetBank1
   229  3F48  62 E3 87              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   230  3F4B  70 EF                 M8C_SetBank0
   231                          
   232  3F4D  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   233                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   234  3F50  41 FF EF              M8C_EnableWatchDog
   235                          ENDIF
   236                          
   237  3F53  43 FE 04              or reg[CPU_SCR1], CPU_SCR1_ECO_ALLOWED ; Allow ECO being enabled
   238                          
   239                              ;---------------------------
   240                              ; Set up the Temporary stack
   241                              ;---------------------------
   242                              ; A temporary stack is set up for the SSC instructions.
   243                              ; The real stack start will be assigned later.
   244                              ;
   245  0080                    _stack_start:          equ 80h
   246  3F56  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   247  3F58  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   248                          
   249                              ;------------------------
   250                              ; Set Power-related Trim 
   251                              ;------------------------
   252  3F59  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   253                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   254                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   255                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   256                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   257                           ENDIF
   258                          ENDIF ; 5.0 V Operation
   259                          
   260                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   261                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   262                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   263                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   264                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   265                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   266                           ENDIF
   267                          ENDIF ; 3.3 Volt Operation
   268                          
   269                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   270                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   271                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
   272                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   273                          
   274                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   277                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   278                          
   279  3F5C  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   280  3F5F  55 F9 00              mov  [bSSC_KEYSP], 0
   281                          
   282                              ;---------------------------------------
   283                              ; Initialize Crystal Oscillator and PLL
   284                              ;---------------------------------------
   285                          IF ( SELECT_32K & WAIT_FOR_32K )
   286                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   287                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   288                              ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
   289                              ; the ECO to stabilize.
   290                              ;
   291                              M8C_SetBank1
   292                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   293                              M8C_SetBank0
   294                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   295                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   296                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   297                          .WaitFor1s:
   298                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   299                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   300                                                                    ;  since interrupts are not globally enabled
   301                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   302                              ; Either no ECO, or waiting for stable clock is to be done in main
   303  3F62  71 10                 M8C_SetBank1
   304  3F64  62 E0 12              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   305  3F67  70 EF                 M8C_SetBank0
   306  3F69  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   307                          
   308                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   309                          
   310                          IF ( PLL_MODE )
   311                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   312                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   313                              ;
   314                              M8C_SetBank1
   315                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   316                              M8C_SetBank0
   317                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   318                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   319                          
   320                          .WaitFor16ms:
   321                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   322                              jz   .WaitFor16ms
   323                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   324                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   325                              M8C_SetBank0
   326                          
   327                          IF      ( WAIT_FOR_32K )
   328                          ELSE ; !( WAIT_FOR_32K )
   329                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   330                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   331                          ENDIF ;(WAIT_FOR_32K)
   332                          ENDIF ;(PLL_MODE)
   333                          
   334                          	;-------------------------------------------------------
   335                              ; Initialize Proper Drive Mode for External Clock Pin
   336                              ;-------------------------------------------------------
   337                          
   338                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   339                          
   340                          IF (SYSCLK_SOURCE)
   341                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   342                          ENDIF
   343                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   344                          
   345                          IF	(TOOLCHAIN & HITECH)
   346                              ;---------------------------------------------
   347                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   348                              ;---------------------------------------------
   349                          	global		__Lstackps
   350  3F6C  50 00             	mov     a,low __Lstackps
   351  3F6E  4E                	swap    a,sp
   352                          
   353                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   354  3F6F  62 D1 03              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   355  3F72  62 D3 03              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   356  3F75  62 D0 00              RAM_SETPAGE_CUR 0
   357  3F78  62 D5 00              RAM_SETPAGE_MVW 0
   358  3F7B  62 D4 00              RAM_SETPAGE_MVR 0
   359                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   360                                or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   361                              ELSE
   362  3F7E  71 80                   or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   363                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   364                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   365                          ELSE
   366                              ;---------------------------------------------
   367                              ; ImageCraft Enter the Large Memory Model, if applicable
   368                              ;---------------------------------------------
   369                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   370                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   371                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   372                              swap  A, SP
   373                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374                              RAM_SETPAGE_CUR 0
   375                              RAM_SETPAGE_MVW 0
   376                              RAM_SETPAGE_MVR 0
   377                          
   378                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   379                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   380                            ELSE
   381                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   382                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   383                          ELSE
   384                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   385                              swap  SP, A
   386                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   387                          ENDIF ;	TOOLCHAIN
   388                          
   389                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   390                              ;---------------------------------------------------
   391                              ; Insert your custom code below this banner
   392                              ;---------------------------------------------------
   393                          
   394                              ;---------------------------------------------------
   395                              ; Insert your custom code above this banner
   396                              ;---------------------------------------------------
   397                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   398                          
   399                              ;-------------------------
   400                              ; Load Base Configuration
   401                              ;-------------------------
   402                              ; Load global parameter settings and load the user modules in the
   403                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   404                              ; to minimize start up time; (2) We may still need to play with the
   405                              ; Sleep Timer.
   406                              ;
   407  3F80  7C 2B64               lcall LoadConfigInit
   408                          
   409                              ;-----------------------------------
   410                              ; Initialize C Run-Time Environment
   411                              ;-----------------------------------
   412                          IF ( C_LANGUAGE_SUPPORT )
   413                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   414                              mov  A,0                           ; clear the 'bss' segment to zero
   415                              mov  [__r0],<__bss_start
   416                          BssLoop:
   417                              cmp  [__r0],<__bss_end
   418                              jz   BssDone
   419                              mvi  [__r0],A
   420                              jmp  BssLoop
   421                          BssDone:
   422                              mov  A,>__idata_start              ; copy idata to data segment
   423                              mov  X,<__idata_start
   424                              mov  [__r0],<__data_start
   425                          IDataLoop:
   426                              cmp  [__r0],<__data_end
   427                              jz   C_RTE_Done
   428                              push A
   429                              romx
   430                              mvi  [__r0],A
   431                              pop  A
   432                              inc  X
   433                              adc  A,0
   434                              jmp  IDataLoop
   435                          
   436                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   437                          
   438                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   439                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   440                                                                 ; to use the Virtual Register page.
   441                          
   442                              ; Dereference the constant (flash) pointer pXIData to access the start
   443                              ; of the extended idata area, "xidata." Xidata follows the end of the
   444                              ; text segment and may have been relocated by the Code Compressor.
   445                              ;
   446                              mov   A, >__pXIData                ; Get the address of the flash
   447                              mov   X, <__pXIData                ;   pointer to the xidata area.
   448                              push  A
   449                              romx                               ; get the MSB of xidata's address
   450                              mov   [__r0], A
   451                              pop   A
   452                              inc   X
   453                              adc   A, 0
   454                              romx                               ; get the LSB of xidata's address
   455                              swap  A, X
   456                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   457                                                                 ;   XIData structure list in flash
   458                              jmp   .AccessStruct
   459                          
   460                              ; Unpack one element in the xidata "structure list" that specifies the
   461                              ; values of C variables. Each structure contains 3 member elements.
   462                              ; The first is a pointer to a contiguous block of RAM to be initial-
   463                              ; ized. Blocks are always 255 bytes or less in length and never cross
   464                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   465                              ; contains 0xFF. There are two formats for the struct depending on the
   466                              ; value in the second member element, an unsigned byte:
   467                              ; (1) If the value of the second element is non-zero, it represents
   468                              ; the 'size' of the block of RAM to be initialized. In this case, the
   469                              ; third member of the struct is an array of bytes of length 'size' and
   470                              ; the bytes are copied to the block of RAM.
   471                              ; (2) If the value of the second element is zero, the block of RAM is
   472                              ; to be cleared to zero. In this case, the third member of the struct
   473                              ; is an unsigned byte containing the number of bytes to clear.
   474                          
   475                          .AccessNextStructLoop:
   476                              inc   X                            ; pXIData++
   477                              adc   A, 0
   478                          .AccessStruct:                         ; Entry point for first block
   479                              ;
   480                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   481                              ;
   482                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   483                              push  A
   484                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   485                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   486                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   487                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   488                              pop   A                            ; restore pXIData to [A,X]
   489                              inc   X                            ; pXIData++
   490                              adc   A, 0
   491                              push  A
   492                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   494                              pop   A                            ; restore pXIData to [A,X]
   495                              inc   X                            ; pXIData++ (point to size)
   496                              adc   A, 0
   497                              push  A
   498                              romx                               ; Get the size (CPU.A <- *pXIData)
   499                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   500                              mov   [__r1], A                    ;             else downcount in __r1
   501                              pop   A                            ; restore pXIData to [A,X]
   502                          
   503                          .CopyNextByteLoop:
   504                              ; For each byte in the structure's array member, copy from flash to RAM.
   505                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   506                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   507                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   508                              ;
   509                              inc   X                            ; pXIData++ (point to next data byte)
   510                              adc   A, 0
   511                              push  A
   512                              romx                               ; Get the data value (CPU.A <- *pXIData)
   513                              mvi   [__r0], A                    ; Transfer the data to RAM
   514                              tst   [__r0], 0xff                 ; Check for page crossing
   515                              jnz   .CopyLoopTail                ;   No crossing, keep going
   516                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   517                              inc   A
   518                              mov   reg[ MVW_PP], A
   519                          .CopyLoopTail:
   520                              pop   A                            ; restore pXIData to [A,X]
   521                              dec   [__r1]                       ; End of this array in flash?
   522                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   523                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   524                          
   525                          .ClearRAMBlockToZero:
   526                              pop   A                            ; restore pXIData to [A,X]
   527                              inc   X                            ; pXIData++ (point to next data byte)
   528                              adc   A, 0
   529                              push  A
   530                              romx                               ; Get the run length (CPU.A <- *pXIData)
   531                              mov   [__r1], A                    ; Initialize downcounter
   532                              mov   A, 0                         ; Initialize source data
   533                          
   534                          .ClearRAMBlockLoop:
   535                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   536                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   537                              ;
   538                              mvi   [__r0], A                    ; Clear a byte
   539                              tst   [__r0], 0xff                 ; Check for page crossing
   540                              jnz   .ClearLoopTail               ;   No crossing, keep going
   541                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   542                              inc   A
   543                              mov   reg[ MVW_PP], A
   544                              mov   A, 0                         ; Restore the zero used for clearing
   545                          .ClearLoopTail:
   546                              dec   [__r1]                       ; Was this the last byte?
   547                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   548                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   549                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   550                          
   551                          .C_RTE_WrapUp:
   552                              pop   A                            ; balance stack
   553                          
   554                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   555                          
   556                          C_RTE_Done:
   557                          
   558                          ENDIF ; C_LANGUAGE_SUPPORT
   559                          
   560                              ;-------------------------------
   561                              ; Voltage Stabilization for SMP
   562                              ;-------------------------------
   563                          
   564                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   565                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   566                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   567                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   568                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   569                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   570                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   571                              M8C_SetBank1
   572                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   573                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   574                              M8C_SetBank0
   575                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   576                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   577                          .WaitFor2ms:
   578                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   579                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   580                          ENDIF ; SMP is operational
   581                          ENDIF ; 5.0V Operation
   582                          
   583                              ;-------------------------------
   584                              ; Set Power-On Reset (POR) Level
   585                              ;-------------------------------
   586                          
   587                              ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper 
                                selection 
   588                              ; is made (in the global resources section of the device editor), a compilation error is created
                                , disallowing
   589                              ; this selection. If the selection is valid, the POR level is then set.
   590                              ; Invalid cases checked: 
   591                              ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
   592                              ;   -At 2.7 volt operation, the cpu rate must be at or below 3 MHz
   593                          
   594                          
   595                          IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
   596                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
   597                           ELSE
   598                             IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
   599                             ELSE						; Otherwise, 24 MHz is selected... raise error
   600                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
   601                             ENDIF
   602                           ENDIF
   603                          ELSE
   604                          IF (POWER_SETTING & POWER_SET_2V7_12MHZ)	; 2.7V Operation with 12 MHz SLIMO?
   605                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 12 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is 
                                actually IMO/1)
   606                             ELSE						; Otherwise, 12 MHz is selected... raise error
   607                                ERROR_PSoC SEE COMMENTS			; Error - cannot use 12 MHz w/ 2.7V operation (Clock <= 3 MHz)
   608                             ENDIF;
   609                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_12MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_12MHz" setting is a
                                ctually IMO/2)
   610                             ELSE						; Otherwise, 6 MHz is selected... raise error
   611                                ERROR_PSoC SEE COMMENTS			; Error - Cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   612                             ENDIF;CPU_12MHz
   613                          ELSE
   614                          IF (POWER_SETTING & POWER_SET_2V7_6MHZ)		; 2.7V Operation with 6 MHz SLIMO?
   615                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is a
                                ctually IMO/1)
   616                             ELSE						; Otherwise, 6 MHz is selected... raise error
   617                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   618                             ENDIF
   619                          ENDIF ; 2.7v w/ 6 MHz
   620                          ENDIF ; 2.7v w/ 12 MHz
   621                          ENDIF ; 3.3V w/ 24 MHz
   622                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
   623                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
   624                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   625                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   626                              ;  Technical Reference Manual #001-48461 for more information.
   627                          
   628  3F83  71 10                 M8C_SetBank1
   629                          
   630                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   631                                                                         ;  Yes, lowest trip already set
   632                          ELSE                                           ;   No, must adjust POR...
   633                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   634                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   635                          ELSE
   636                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   637                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   638                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   639                           ELSE                                          ;    No, fast mode
   640                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   641                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   642                            ELSE ; 24HMz                                 ;
   643  3F85  43 E3 20              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   644                            ENDIF ; 24MHz
   645                           ENDIF ; Slow Mode
   646                          ENDIF ; 5.0V Operation
   647                          ENDIF ; 3.3V Operation
   648                          ENDIF ; 2.7V Operation
   649                          
   650  3F88  70 EF                 M8C_SetBank0
   651                          
   652                              ;----------------------------
   653                              ; Wrap up and invoke "main"
   654                              ;----------------------------
   655                          
   656                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   657                              ; no interrupts should be enabled now, so may as well clear the register.
   658                              ;
   659  3F8A  62 E0 00              mov  reg[INT_MSK0],0
   660                          
   661                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   662                              ;
   663  3F8D  71 10                 M8C_SetBank1
   664  3F8F  62 E0 13              mov reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   665  3F92  43 E2 00              or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
   666  3F95  70 EF                 M8C_SetBank0
   667                          
   668                              ; Global Interrupt are NOT enabled, this should be done in main().
   669                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   670                              ; Global Interrupts should be enabled as soon as possible in main().
   671                              ;
   672  3F97  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   673                                                             ; have been set during the boot process.
   674                          IF	(TOOLCHAIN & HITECH)
   675  3F9A  7D 3FA0           	ljmp  startup                  ; Jump to C compiler startup code
   676                          ELSE
   677                          IF ENABLE_LJMP_TO_MAIN
   678                              ljmp  _main                    ; goto main (no return)
   679                          ELSE
   680                              lcall _main                    ; call main
   681                          .Exit:
   682                              jmp  .Exit                     ; Wait here after return till power-off or reset
   683                          ENDIF
   684                          ENDIF ; TOOLCHAIN
   685                          
   686                              ;---------------------------------
   687                              ; Library Access to Global Parms
   688                              ;---------------------------------
   689                              ;
   690  3F9D                     bGetPowerSetting:
   691  3F9D                    _bGetPowerSetting:
   692                              ; Returns value of POWER_SETTING in the A register.
   693                              ; No inputs. No Side Effects.
   694                              ;
   695                          IF (POWER_SETTING & POWER_SET_2V7)
   696                              mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   697                          ELSE
   698  3F9D  50 10                 mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   699                          ENDIF
   700  3F9F  7F                    ret


HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:50 2015

           SELECT_32K_JUST 0000                  _Timer8ISR 3B5C                  __Lstackps 0300          C_LANGUAGE_SUPPORT 0000  
               _Timer16ISR 3C05               POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0010  
             POWER_SET_5V0 0010                 _SensorUART 3C23            SLEEP_TIMER_JUST 0010                    CPU_SCR0 00FF  
                  CPU_SCR1 00FE            bGetPowerSetting 3F9D                    INT_MSK0 00E0          POWER_SET_2V7_6MHZ 0002  
                  PLL_MODE 0000                      HITECH 0002             FLAG_PGMODE_10b 0080                      IDX_PP 00D3  
                    CUR_PP 00D0                      INT_VC 00E2              CPU_CLOCK_JUST 0003                      MVR_PP 00D4  
                    MVW_PP 00D5           _bGetPowerSetting 3F9D                WAIT_FOR_32K 0001                      STK_PP 00D1  
             LVD_TBEN_JUST 0000                      VLT_CR 00E3             VLT_CR_POR_HIGH 0020       SWITCH_MODE_PUMP_JUST 0080  
         SLEEP_TIMER_JUST2 0000                _stack_start 0080                  _SAR10_ISR 2DB8   SYSTEM_LARGE_MEMORY_MODEL 0001  
       POWER_SET_2V7_12MHZ 0004      SYSTEM_MULTIPAGE_STACK 0000          POWER_SET_SLOW_IMO 0001               PLL_MODE_JUST 0000  
                 TOOLCHAIN 0002            SWITCH_MODE_PUMP 0001               SYSCLK_SOURCE 0000                     OSC_CR0 00E0  
                   OSC_CR2 00E2                     RES_WDT 00E3          CPU_SCR0_PORS_MASK 0010             WATCHDOG_ENABLE 0001  
        _UART_Board_TX_ISR 2FB4                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004              LoadConfigInit 2B64  
       _UART_Sensor_TX_ISR 3104                     __Start 3F46                  _BoardUART 3B57                   bSSC_KEY1 00F8  
         OSC_CR0_CPU_12MHz 0002           OSC_CR0_CPU_24MHz 0003                     startup 3FA0           SYSTEM_STACK_PAGE 0003  
             FLAG_XIO_MASK 0010                  SELECT_32K 0000           TRIP_VOLTAGE_JUST 0007  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
