 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: SAR10.asm
 0000           ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
 0000           ;;  Generated by PSoC Designer 5.4.2946
 0000           ;;
 0000           ;;  DESCRIPTION: SAR10 User Module software implementation file
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API functions
 0000           ;;        returns. For Large Memory Model devices it is also the caller's 
 0000           ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
 0000           ;;        MVW_PP registers. Even though some of these registers may not be modified
 0000           ;;        now, there is no guarantee that will remain the case in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBC00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBC00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBC00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBC01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBC01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBC01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCC02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCC03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBC10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBC10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBC10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBC11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBC11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBC11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCC12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCC13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUX_CFG_INTCAP:       equ 30h    ;
 000E           AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUX_CFG_EN:		  	  equ 01h	 ;
 0000           
 0000           ; old declarations DO NOT USE
 0061           AMUXCFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUXCFG_INTCAP:       equ 30h    ;
 000E           AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUXCFG_EN:		  	  equ 01h	 ;
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
 0040           INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
 0020           INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
 0010           INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
 0008           INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
 0004           INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
 0002           INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
 0001           INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
 0000           
 00DF           INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
 0010           INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
 0020           INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
 0040           INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
 0080           INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
 00ED           ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
 00EE           ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
 00EF           ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Capsense Digital Control Registers
 0000           ;------------------------------------------------------
 0050           CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
 0054           CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
 0058           CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
 005C           CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
 0051           CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
 0055           CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
 0059           CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
 005D           CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
 0052           CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
 0056           CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
 005A           CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
 005E           CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
 0053           CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
 005B           CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
 0057           CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
 005F           CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Analog Registers
 0000           ;------------------------------------------------------
 0065           ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
 006A           ADC_DH:					equ 6Ah		; ADC data high						(RW)
 006B           ADC_DL:					equ 6Bh		; ADC data low						(RW)
 00C8           PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
 00C9           PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
 00CB           PWMSRC:					equ CBh		; PWM Source						(RW)
 00CA           IDACMODE:				equ CAh		; IDAC Mode							(RW)
 00FC           IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
 00FD           IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Digital Registers
 0000           ;------------------------------------------------------
 00B7           RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
 00BF           RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Test Registers
 0000           ;------------------------------------------------------
 00CC           TSCR0:					equ CCh		; Tsource 0							(RW)
 00CD           TSCMPH:					equ CDh		; TSCMP high						(RW)
 00CE           TSCMPL:					equ CEh		; TSCMP low							(RW)
 00CF           TSCR1:					equ CFh		; Tsource 1							(RW)
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBC00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBC00OU:      equ 22h          ;   Output Register                        (RW)
 0023           DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBC01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBC01OU:      equ 26h          ;   Output Register                        (RW)
 0027           DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCC02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
 002B           DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
 0029           DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBC10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBC10OU:      equ 32h          ;   Output Register                        (RW)
 0033           DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBC11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBC11OU:      equ 36h          ;   Output Register                        (RW)
 0037           DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCC12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
 003B           DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
 003F           DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0003           CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 00A0           GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00A1           GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00A2           GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00A3           GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Analog Mux Bus Port Enable Bits
 0000           ;------------------------------------------------
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
 00EC           MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 00FD           DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
 00DC           DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
 0008           DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
 0006           DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Control Registers
 0000           ;------------------------------------------------
 0000           
 00AD           I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Analog Registers
 0000           ;------------------------------------------------------
 0053           VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
 0057           VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
 00A8           ADC_CR0:		equ A8h			; ADC control 0					(RW)
 00A9           ADC_CR1:		equ A9h			; ADC control 1					(RW)
 00AA           ADC_CR2:		equ AAh			; ADC control 2					(RW)
 00AB           ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
 00AC           ADC_CR4:		equ ACh			; ADC control 4					(RW)
 00E7           VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Current Sense CMP Registers
 0000           ;------------------------------------------------------
 0050           CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
 0051           CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
 0054           CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
 0055           CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
 0058           CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
 0059           CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
 005A           CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
 005B           CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
 005C           CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
 005D           CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
 005E           CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
 005F           CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Real Time Clock Registers
 0000           ;------------------------------------------------------
 00A4           RTCH:			equ A4h			; Real time current hour		(RW)
 00A5           RTCM:			equ A5h			; Real time current minute		(RW)
 00A6           RTCS:			equ A6h			; Real time current second		(RW)
 00A7           RTCCR:			equ A7h			; Real time clock control		(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Analog MUX Config Registers
 0000           ;------------------------------------------------------
 0000           
 006A           AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
 0020           AMUX_CFG1_GOINVR:	equ 20h  ;
 0010           AMUX_CFG1_GOINVL:  	equ 10h	 ;
 000C           AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
 0003           AMUX_CFG1_AMUXMODL:	equ 03h	 ;
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C22045.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ; ******* Page Pointer Manipulation Macros *******
                ;
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBC00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBC00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBC00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBC01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBC01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBC01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCC02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCC03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBC10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBC10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBC10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBC11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBC11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBC11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCC12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCC13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUX_CFG_INTCAP:       equ 30h    ;
 000E           AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUX_CFG_EN:		  	  equ 01h	 ;
 0000           
 0000           ; old declarations DO NOT USE
 0061           AMUXCFG:      equ 61h          ; Analog MUX Configuration
 0030           AMUXCFG_INTCAP:       equ 30h    ;
 000E           AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
 0001           AMUXCFG_EN:		  	  equ 01h	 ;
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
 0040           INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
 0020           INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
 0010           INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
 0008           INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
 0004           INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
 0002           INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
 0001           INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
 0000           
 00DF           INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
 0010           INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
 0020           INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
 0040           INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
 0080           INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
 00ED           ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
 00EE           ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
 00EF           ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Capsense Digital Control Registers
 0000           ;------------------------------------------------------
 0050           CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
 0054           CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
 0058           CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
 005C           CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
 0051           CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
 0055           CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
 0059           CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
 005D           CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
 0052           CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
 0056           CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
 005A           CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
 005E           CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
 0053           CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
 005B           CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
 0057           CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
 005F           CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Analog Registers
 0000           ;------------------------------------------------------
 0065           ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
 006A           ADC_DH:					equ 6Ah		; ADC data high						(RW)
 006B           ADC_DL:					equ 6Bh		; ADC data low						(RW)
 00C8           PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
 00C9           PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
 00CB           PWMSRC:					equ CBh		; PWM Source						(RW)
 00CA           IDACMODE:				equ CAh		; IDAC Mode							(RW)
 00FC           IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
 00FD           IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Digital Registers
 0000           ;------------------------------------------------------
 00B7           RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
 00BF           RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Test Registers
 0000           ;------------------------------------------------------
 00CC           TSCR0:					equ CCh		; Tsource 0							(RW)
 00CD           TSCMPH:					equ CDh		; TSCMP high						(RW)
 00CE           TSCMPL:					equ CEh		; TSCMP low							(RW)
 00CF           TSCR1:					equ CFh		; Tsource 1							(RW)
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type C
 0020           DBC00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBC00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBC00OU:      equ 22h          ;   Output Register                        (RW)
 0023           DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type C
 0024           DBC01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBC01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBC01OU:      equ 26h          ;   Output Register                        (RW)
 0027           DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type C
 0028           DCC02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCC02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
 002B           DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type C
 002C           DCC03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
 0029           DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type C
 0030           DBC10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBC10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBC10OU:      equ 32h          ;   Output Register                        (RW)
 0033           DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type C
 0034           DBC11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBC11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBC11OU:      equ 36h          ;   Output Register                        (RW)
 0037           DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type C
 0038           DCC12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCC12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
 003B           DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type C
 003C           DCC13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
 003F           DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0003           CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 00A0           GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00A1           GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00A2           GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00A3           GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Analog Mux Bus Port Enable Bits
 0000           ;------------------------------------------------
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
 00EC           MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 00FD           DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
 00DC           DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
 0008           DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
 0006           DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Control Registers
 0000           ;------------------------------------------------
 0000           
 00AD           I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Analog Registers
 0000           ;------------------------------------------------------
 0053           VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
 0057           VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
 00A8           ADC_CR0:		equ A8h			; ADC control 0					(RW)
 00A9           ADC_CR1:		equ A9h			; ADC control 1					(RW)
 00AA           ADC_CR2:		equ AAh			; ADC control 2					(RW)
 00AB           ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
 00AC           ADC_CR4:		equ ACh			; ADC control 4					(RW)
 00E7           VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Current Sense CMP Registers
 0000           ;------------------------------------------------------
 0050           CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
 0051           CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
 0054           CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
 0055           CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
 0058           CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
 0059           CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
 005A           CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
 005B           CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
 005C           CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
 005D           CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
 005E           CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
 005F           CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Neon Real Time Clock Registers
 0000           ;------------------------------------------------------
 00A4           RTCH:			equ A4h			; Real time current hour		(RW)
 00A5           RTCM:			equ A5h			; Real time current minute		(RW)
 00A6           RTCS:			equ A6h			; Real time current second		(RW)
 00A7           RTCCR:			equ A7h			; Real time clock control		(RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Analog MUX Config Registers
 0000           ;------------------------------------------------------
 0000           
 006A           AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
 0020           AMUX_CFG1_GOINVR:	equ 20h  ;
 0010           AMUX_CFG1_GOINVL:  	equ 10h	 ;
 000C           AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
 0003           AMUX_CFG1_AMUXMODL:	equ 03h	 ;
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0001           SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
 0078           SAR10_CHN_SEL_MASK:                                        equ 0x78
 0030           SAR10_TRG_SEL_MASK:                                        equ 0x30
 0001           SAR10_ALIGN_EN_MASK:                                       equ 0x01
 000E           SAR10_CLK_SEL_MASK:                                        equ 0x0E
 0008           SAR10_FREE_RUN_MASK:                                       equ 0x08
 0004           SAR10_READY_MASK:                                          equ 0x04
 0002           SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
 0000           
 00DF           SAR10_INT_REG:                                             equ 0x0df
 0010           SAR10_INT_SAR_MASK:                                        equ 0x10
 0000           ;--------------------------------------------------
 0000           ; SAR10 channel selection definitions
 0000           ;--------------------------------------------------
 0000           SAR10_CHS_P00:                                             equ   (00h)
 0008           SAR10_CHS_P01:                                             equ   (08h)
 0010           SAR10_CHS_P02:                                             equ   (10h)
 0018           SAR10_CHS_P03:                                             equ   (18h)
 0020           SAR10_CHS_P04:                                             equ   (20h)
 0028           SAR10_CHS_P05:                                             equ   (28h)
 0030           SAR10_CHS_P06:                                             equ   (30h)
 0038           SAR10_CHS_P07:                                             equ   (38h)
 0060           SAR10_CHS_AMUX0:                                           equ   (60h)
 0068           SAR10_CHS_AMUX1:                                           equ   (68h)
 0000           ;for compatibly with olds projects
 0060           SAR10_CHS_AMUXL:                                           equ   (60h)
 0068           SAR10_CHS_AMUXR:                                           equ   (68h)
 0000           
 0000           ;--------------------------------------------------
 0000           ; SAR10 trigger source definitions
 0000           ;--------------------------------------------------
 0000           SAR10_SRC_TGRL:                                            equ   (00h)
 0010           SAR10_SRC_TGRH:                                            equ   (10h)
 0020           SAR10_SRC_TGR16:                                           equ   (20h)
 0030           SAR10_SRC_TGRINCMP:                                        equ   (30h)
 0000           
 0000           ;--------------------------------------------------
 0000           ; SAR10 auto trigger definitions
 0000           ;--------------------------------------------------
 0001           SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
 0000           SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
 0000           
 0000           ;--------------------------------------------------
 0000           ; SAR10 clock selection definitions
 0000           ;--------------------------------------------------
 0000           SAR10_SYSCLK_2:                                            equ   (00h)
 0002           SAR10_SYSCLK_4:                                            equ   (02h)
 0004           SAR10_SYSCLK_6:                                            equ   (04h)
 0006           SAR10_SYSCLK_8:                                            equ   (06h)
 0008           SAR10_SYSCLK_12:                                           equ   (08h)
 000A           SAR10_SYSCLK_16:                                           equ   (0Ah)
 000C           SAR10_SYSCLK_32:                                           equ   (0Ch)
 000E           SAR10_SYSCLK_64:                                           equ   (0Eh)
 0000           
 0000           ;--------------------------------------------------
 0000           ; SAR10 run mode selection definitions
 0000           ;--------------------------------------------------
 0000           SAR10_ONESHOT:                                             equ   (00h)
 0008           SAR10_FREERUN:                                             equ   (08h)
 0000           
 0000           ;--------------------------------------------------
 0000           ; SAR10 definitions
 0000           ;--------------------------------------------------
 0000           SAR10_Justify:                                             equ 0h
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Address Constants for SAR10
 0000           ;--------------------------------------------------
 0000           
 00A8           SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
 00A9           SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
 00AA           SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
 006A           SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
 006B           SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
 0000           
 0000           ;--------------------------------------------------
 0000           ; SAR10 Macro 'Functions'
 0000           ;--------------------------------------------------
 0000           
 0000              macro SAR10_Start_M
 0000              or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
 0000              macro SAR10_Stop_M
 0000              and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
 0000              macro SAR10_EnableInt_M
 0000              M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
 0000              macro SAR10_DisableInt_M
 0000              M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
                export  SAR10_EnableInt
                export _SAR10_EnableInt
                export  SAR10_DisableInt
                export _SAR10_DisableInt
                export  SAR10_Start
                export _SAR10_Start
                export  SAR10_Stop
                export _SAR10_Stop
                export  SAR10_Trigger
                export _SAR10_Trigger
                export  SAR10_fIsDataAvailable
                export _SAR10_fIsDataAvailable
                export  SAR10_iGetData
                export _SAR10_iGetData
                export  SAR10_bGetData
                export _SAR10_bGetData
                export  SAR10_SetADCChannel
                export _SAR10_SetADCChannel
                export  SAR10_SetTriggerSrc
                export _SAR10_SetTriggerSrc
                export  SAR10_EnableAutoTrigger
                export _SAR10_EnableAutoTrigger
                export  SAR10_SetClk
                export _SAR10_SetClk
                export  SAR10_SetRunMode
                export _SAR10_SetRunMode
                
                AREA led_display_RAM (RAM,REL)
                
                ;-----------------------------------------------
                ;  Constant Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                
                
                AREA UserModules (ROM, REL)
                
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: SAR10_EnableInt
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
 0000           ;     associated with this User Module. This function has no effect until and
 0000           ;     unless the global interrupts are enabled (for example by using the
 0000           ;     macro M8C_EnableGInt).
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS:    None.
 0000           ;  RETURNS:      Nothing.
 0000           ;  SIDE EFFECTS: 
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;
 0000            SAR10_EnableInt:
 0000           _SAR10_EnableInt:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0000 43DF10        or    reg[SAR10_INT_REG], SAR10_INT_SAR_MASK               ; enable specified interrupt enable bit
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0003 7F           ret
 0004           
 0004           .ENDSECTION
 0004           
 0004           
 0004           .SECTION
 0004           ;-----------------------------------------------------------------------------
 0004           ;  FUNCTION NAME: SAR10_DisableInt
 0004           ;
 0004           ;  DESCRIPTION:
 0004           ;     Disables the interrupt mode operation by clearing the interrupt enable
 0004           ;     mask bit associated with this User Module.
 0004           ;-----------------------------------------------------------------------------
 0004           ;
 0004           ;  ARGUMENTS:    None
 0004           ;  RETURNS:      Nothing
 0004           ;  SIDE EFFECTS: 
 0004           ;    The A and X registers may be modified by this or future implementations
 0004           ;    of this function.  The same is true for all RAM page pointer registers in
 0004           ;    the Large Memory Model.  When necessary, it is the calling function's
 0004           ;    responsibility to perserve their values across calls to fastcall16 
 0004           ;    functions.
 0004           ;
 0004            SAR10_DisableInt:
 0004           _SAR10_DisableInt:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0004 41DFEF        and   reg[SAR10_INT_REG], ~SAR10_INT_SAR_MASK              ; disable specified interrupt enable bit
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0007 7F           ret
 0008           
 0008           .ENDSECTION
 0008           
 0008           
 0008           .SECTION
 0008           ;-----------------------------------------------------------------------------
 0008           ;  FUNCTION NAME: SAR10_Start
 0008           ;
 0008           ;  DESCRIPTION:
 0008           ;     Enables SAR operation. 
 0008           ;     Set the ADC_EN bit in SAR_CR0 register
 0008           ;-----------------------------------------------------------------------------
 0008           ;
 0008           ;  ARGUMENTS:    None
 0008           ;  RETURNS:      Nothing
 0008           ;  SIDE EFFECTS: 
 0008           ;    The A and X registers may be modified by this or future implementations
 0008           ;    of this function.  The same is true for all RAM page pointer registers in
 0008           ;    the Large Memory Model.  When necessary, it is the calling function's
 0008           ;    responsibility to perserve their values across calls to fastcall16 
 0008           ;    functions.
 0008           ;
 0008            SAR10_Start:
 0008           _SAR10_Start:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0008 7110          or    F, FLAG_XIO_MASK
 000A 43A801       or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
 000D 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 000F 7F           ret
 0010           
 0010           .ENDSECTION
 0010           
 0010           
 0010           .SECTION
 0010           ;-----------------------------------------------------------------------------
 0010           ;  FUNCTION NAME: SAR10_Stop
 0010           ;
 0010           ;  DESCRIPTION:
 0010           ;     Disables SAR operation 
 0010           ;     Clear ADC_EN bit in SAR_CR0 register
 0010           ;-----------------------------------------------------------------------------
 0010           ;
 0010           ;  ARGUMENTS:    None
 0010           ;  RETURNS:      Nothing
 0010           ;  SIDE EFFECTS: 
 0010           ;    The A and X registers may be modified by this or future implementations
 0010           ;    of this function.  The same is true for all RAM page pointer registers in
 0010           ;    the Large Memory Model.  When necessary, it is the calling function's
 0010           ;    responsibility to perserve their values across calls to fastcall16 
 0010           ;    functions.
 0010           ;
 0010            SAR10_Stop:
 0010           _SAR10_Stop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0010 7110          or    F, FLAG_XIO_MASK
 0012 41A8FE       and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
 0015 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0017 7F           ret
 0018           
 0018           .ENDSECTION
 0018           
 0018           .SECTION
 0018           ;-----------------------------------------------------------------------------
 0018           ;  FUNCTION NAME: SAR10_Trigger
 0018           ;
 0018           ;  DESCRIPTION:
 0018           ;     Trigger the SAR to sample for one time
 0018           ;     Set START/ONGOING bit in SAR_CR0 register
 0018           ;
 0018           ;-----------------------------------------------------------------------------
 0018           ;
 0018           ;  ARGUMENTS:   Nothing
 0018           ;  RETURNS:         Nothing
 0018           ;  SIDE EFFECTS: 
 0018           ;    The A and X registers may be modified by this or future implementations
 0018           ;    of this function.  The same is true for all RAM page pointer registers in
 0018           ;    the Large Memory Model.  When necessary, it is the calling function's
 0018           ;    responsibility to perserve their values across calls to fastcall16 
 0018           ;    functions.
 0018           ;
 0018            SAR10_Trigger:
 0018           _SAR10_Trigger:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0018 7110          or    F, FLAG_XIO_MASK
 001A 43A802       or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
 001D 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 001F 7F           ret
 0020           
 0020           .ENDSECTION
 0020           
 0020           .SECTION
 0020           ;-----------------------------------------------------------------------------
 0020           ;  FUNCTION NAME: SAR10_fIsDataAvailable
 0020           ;
 0020           ;  DESCRIPTION:
 0020           ;     Checks the availability of sampled data.
 0020           ;     Get READY bit from SAR_CR0 register
 0020           ;
 0020           ;-----------------------------------------------------------------------------
 0020           ;
 0020           ;  ARGUMENTS:   None
 0020           ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
 0020           ;  SIDE EFFECTS: 
 0020           ;    The A and X registers may be modified by this or future implementations
 0020           ;    of this function.  The same is true for all RAM page pointer registers in
 0020           ;    the Large Memory Model.  When necessary, it is the calling function's
 0020           ;    responsibility to perserve their values across calls to fastcall16 
 0020           ;    functions.
 0020           ;
 0020            SAR10_fIsDataAvailable:
 0020           _SAR10_fIsDataAvailable:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0020 7110          or    F, FLAG_XIO_MASK
 0022 5DA8         mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
 0024 70EF          and   F, ~FLAG_XIO_MASK
 0026 2104         and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0028 7F           ret
 0029           
 0029           .ENDSECTION
 0029           
 0029           .SECTION
 0029           ;-----------------------------------------------------------------------------
 0029           ;  FUNCTION NAME: SAR10_iGetData
 0029           ;
 0029           ;  DESCRIPTION:
 0029           ;     Returns last converted data.
 0029           ;     SAR_DL will be read first, then the SAR_DH
 0029           ;     The MSB is returned in X and the LSB in A
 0029           ;     Note: this function returns correct result only in right-justify mode 
 0029           ;     for CY8C28x45 device.
 0029           ;
 0029           ;-----------------------------------------------------------------------------
 0029           ;
 0029           ;  ARGUMENTS:   None
 0029           ;  RETURNS:     fastcall16 INT iGetData(void)
 0029           ;  SIDE EFFECTS: 
 0029           ;    The A and X registers may be modified by this or future implementations
 0029           ;    of this function.  The same is true for all RAM page pointer registers in
 0029           ;    the Large Memory Model.  When necessary, it is the calling function's
 0029           ;    responsibility to perserve their values across calls to fastcall16 
 0029           ;    functions.
 0029           ;
 FFFFFFFE              Temp_offs:         equ  -2
 FFFFFFFF              DL_REG_offs:       equ  -1
 0029                   
 0029            SAR10_iGetData:
 0029           _SAR10_iGetData:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                IF(SAR10_Justify)  ; for CY8C28x45 Device
                   mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
                   push  A                                    ; Store 8 lowest bits in stack
                   mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
                   mov   X, A                                 ; Get MSB of result
                   pop   A                                    ; Get LSB of result
                ELSE ;for CY8C22x45 device
 0029 5000         mov   A, 0x00                              ; Init local var
 002B 08           push  A                                    ; Reserve one byte in stack
 002C 5D6B         mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
 002E 08           push  A                                    ; Store 2 lowest bits in stack
 002F 4F           mov   X, SP                                ; Set SP in X
 0030 5D6A         mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
 0032 64           asl   A                                    ; Determine two highest bits and store it in stack
 0033 6CFE         rlc   [X+Temp_offs]
 0035 64           asl   A
 0036 6CFE         rlc   [X+Temp_offs]
 0038 2BFF         or    A, [X+DL_REG_offs]                    ; Form LSB of result
 003A 20           pop   X                                     
 003B 20           pop   X                                     ; Get MSB of result
                ENDIF
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 003C 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 003E 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0040 7F           ret
 0041           
 0041           .ENDSECTION
 0041           
 0041           .SECTION
 0041           ;-----------------------------------------------------------------------------
 0041           ;  FUNCTION NAME: SAR10_GetDataMSB8
 0041           ;
 0041           ;  DESCRIPTION:
 0041           ;    Returns last converted data.
 0041           ;    Note: this function returns correct result only in left-justify mode
 0041           ;    for CY8C28x45 device.  
 0041           ;
 0041           ;-----------------------------------------------------------------------------
 0041           ;
 0041           ;  ARGUMENTS:    Nothing
 0041           ;  RETURNS:          fastcall16 char GetDataMSB8(void)
 0041           ;  SIDE EFFECTS: 
 0041           ;    The A and X registers may be modified by this or future implementations
 0041           ;    of this function.  The same is true for all RAM page pointer registers in
 0041           ;    the Large Memory Model.  When necessary, it is the calling function's
 0041           ;    responsibility to perserve their values across calls to fastcall16 
 0041           ;    functions.
 0041           ;
 0041            SAR10_bGetData:
 0041           _SAR10_bGetData:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0041 5D6A         mov   A,reg[SAR10_SAR_DH_REG]
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0043 7F           ret
 0044           
 0044           .ENDSECTION
 0044           
 0044           .SECTION
 0044           ;-----------------------------------------------------------------------------
 0044           ;  FUNCTION NAME: SAR10_SelectADCChannel
 0044           ;
 0044           ;  DESCRIPTION:
 0044           ;    Select the SAR input from 14 optional input channels.
 0044           ;   Set ADC_CHS bits in SAR_CR0 register
 0044           ;-----------------------------------------------------------------------------
 0044           ;
 0044           ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
 0044           ;  RETURNS:    None
 0044           ;  SIDE EFFECTS: 
 0044           ;    The A and X registers may be modified by this or future implementations
 0044           ;    of this function.  The same is true for all RAM page pointer registers in
 0044           ;    the Large Memory Model.  When necessary, it is the calling function's
 0044           ;    responsibility to perserve their values across calls to fastcall16 
 0044           ;    functions.
 0044           ;
 0044            SAR10_SetADCChannel:
 0044           _SAR10_SetADCChannel:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0044 2178         and   A, SAR10_CHN_SEL_MASK
 0046 4F           mov   X, SP
 0047 08           push  A                                     ; store value in stack
 0048 7110          or    F, FLAG_XIO_MASK
 004A 5DA8         mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
 004C 2187         and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
 004E 2B00         or    A, [X]                                ; set ADC_CHS bits
 0050 60A8         mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
 0052 70EF          and   F, ~FLAG_XIO_MASK
 0054 18           pop   A
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0055 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0057 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0059 7F           ret
 005A           
 005A           .ENDSECTION
 005A           
 005A           .SECTION
 005A           ;-----------------------------------------------------------------------------
 005A           ;  FUNCTION NAME: SAR10_SelectTriggerSrc
 005A           ;
 005A           ;  DESCRIPTION:
 005A           ;    Select the SAR10 auto-trigger source 
 005A           ;    by setting TIGSEL in SAR_CR1
 005A           ;
 005A           ;-----------------------------------------------------------------------------
 005A           ;
 005A           ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
 005A           ;  RETURNS:    None
 005A           ;  SIDE EFFECTS: 
 005A           ;    The A and X registers may be modified by this or future implementations
 005A           ;    of this function.  The same is true for all RAM page pointer registers in
 005A           ;    the Large Memory Model.  When necessary, it is the calling function's
 005A           ;    responsibility to perserve their values across calls to fastcall16 
 005A           ;    functions.
 005A           ;
 005A            SAR10_SetTriggerSrc:
 005A           _SAR10_SetTriggerSrc:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 005A 2130         and   A, SAR10_TRG_SEL_MASK 
 005C 4F           mov   X, SP
 005D 08           push  A                                    ; store value in stack
 005E 7110          or    F, FLAG_XIO_MASK
 0060 5DA9         mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
 0062 21CF         and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
 0064 2B00         or    A, [X]                                ; set TIGSEL bits
 0066 60A9         mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
 0068 70EF          and   F, ~FLAG_XIO_MASK
 006A 18           pop   A
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 006B 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 006D 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 006F 7F           ret
 0070           
 0070           .ENDSECTION
 0070           
 0070           .SECTION
 0070           ;-----------------------------------------------------------------------------
 0070           ;  FUNCTION NAME: SAR10_EnableAutoTrigger
 0070           ;
 0070           ;  DESCRIPTION:
 0070           ;    Global enable CR of the SAR10 auto-trigger function by setting 
 0070           ;    by setting ALIGN_EN in SAR_CR1
 0070           ;
 0070           ;-----------------------------------------------------------------------------
 0070           ;
 0070           ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
 0070           ;  RETURNS:    None
 0070           ;  SIDE EFFECTS: 
 0070           ;    The A and X registers may be modified by this or future implementations
 0070           ;    of this function.  The same is true for all RAM page pointer registers in
 0070           ;    the Large Memory Model.  When necessary, it is the calling function's
 0070           ;    responsibility to perserve their values across calls to fastcall16 
 0070           ;    functions.
 0070           ;
 0070            SAR10_EnableAutoTrigger:
 0070           _SAR10_EnableAutoTrigger:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0070 2101         and   A, SAR10_ALIGN_EN_MASK
 0072 4F           mov   X, SP
 0073 08           push  A                                    ; store value in stack
 0074 7110          or    F, FLAG_XIO_MASK
 0076 5DA9         mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
 0078 21FE         and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
 007A 2B00         or    A, [X]                                ; set ALIGN_EN bits
 007C 60A9         mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
 007E 70EF          and   F, ~FLAG_XIO_MASK
 0080 18           pop   A
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0081 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0083 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0085 7F           ret
 0086           
 0086           .ENDSECTION
 0086           
 0086           .SECTION
 0086           ;-----------------------------------------------------------------------------
 0086           ;  FUNCTION NAME: SAR10_SetClk
 0086           ;
 0086           ;  DESCRIPTION:
 0086           ;    Set SAR Sample Rate and Clock Selection 
 0086           ;    by setting CLKSEL bits in SAR_CR1
 0086           ;
 0086           ;-----------------------------------------------------------------------------
 0086           ;
 0086           ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
 0086           ;  RETURNS:    None
 0086           ;  SIDE EFFECTS: 
 0086           ;    The A and X registers may be modified by this or future implementations
 0086           ;    of this function.  The same is true for all RAM page pointer registers in
 0086           ;    the Large Memory Model.  When necessary, it is the calling function's
 0086           ;    responsibility to perserve their values across calls to fastcall16 
 0086           ;    functions.
 0086           ;
 0086            SAR10_SetClk:
 0086           _SAR10_SetClk:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0086 210E         and   A, SAR10_CLK_SEL_MASK
 0088 4F           mov   X, SP
 0089 08           push  A                                    ; store value in stack
 008A 7110          or    F, FLAG_XIO_MASK
 008C 5DA9         mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
 008E 21F1         and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
 0090 2B00         or    A, [X]                                ; set CLKSEL bits
 0092 60A9         mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
 0094 70EF          and   F, ~FLAG_XIO_MASK
 0096 18           pop   A
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0097 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0099 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 009B 7F           ret
 009C           
 009C           .ENDSECTION
 009C           
 009C           .SECTION
 009C           ;-----------------------------------------------------------------------------
 009C           ;  FUNCTION NAME: SAR10_SetRunMode
 009C           ;
 009C           ;  DESCRIPTION:
 009C           ;    Set free-running mode for SAR
 009C           ;    by setting FREERUN bits in SAR_CR2
 009C           ;
 009C           ;-----------------------------------------------------------------------------
 009C           ;
 009C           ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
 009C           ;  RETURNS:    None
 009C           ;  SIDE EFFECTS: 
 009C           ;    The A and X registers may be modified by this or future implementations
 009C           ;    of this function.  The same is true for all RAM page pointer registers in
 009C           ;    the Large Memory Model.  When necessary, it is the calling function's
 009C           ;    responsibility to perserve their values across calls to fastcall16 
 009C           ;    functions.
 009C           ;
 009C            SAR10_SetRunMode:
 009C           _SAR10_SetRunMode:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 009C 2108         and   A, SAR10_FREE_RUN_MASK
 009E 4F           mov   X, SP
 009F 08           push  A                                    ; store value in stack
 00A0 7110          or    F, FLAG_XIO_MASK
 00A2 5DAA         mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
 00A4 21F7         and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
 00A6 2B00         or    A, [X]                                ; set FREERUN bits
 00A8 60AA         mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
 00AA 70EF          and   F, ~FLAG_XIO_MASK
 00AC 18           pop   A
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00AD 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 00AF 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00B1 7F           ret
 00B2           
 00B2           .ENDSECTION
 00B2           ; End of File SAR10.asm
