

HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:54:53 2015


     1                          	opt	pw 132
     2                          	psect	text,global,class=CODE,delta=1
     3                          	psect	maintext,global,class=CODE,delta=1
     4                          	psect	ramdata0,global,class=RAM,space=1,delta=1
     5                          	psect	romdata0,global,class=BANKROM,delta=1
     6                          	psect	cdata,global,reloc=256,class=ROM,delta=1
     7                          	psect	bss0,global,class=RAM,space=1,delta=1
     8                          	psect	nvram0,global,class=RAM,space=1,delta=1
     9                          	psect	strings,global,reloc=256,class=ROM,delta=1
    10                          
    11                          	psect	text
    12  006C                    TMP_DR0	equ	108
    13  006D                    TMP_DR1	equ	109
    14  006E                    TMP_DR2	equ	110
    15  006F                    TMP_DR3	equ	111
    16  00D0                    CUR_PP	equ	208
    17  00D1                    STK_PP	equ	209
    18  00D3                    IDX_PP	equ	211
    19  00D4                    MVR_PP	equ	212
    20  00D5                    MVW_PP	equ	213
    21  00E8                    MUL0_X	equ	232
    22  00E9                    MUL0_Y	equ	233
    23  00EA                    MUL0_DH	equ	234
    24  00EB                    MUL0_DL	equ	235
    25  00A8                    MUL1_X	equ	168
    26  00A9                    MUL1_Y	equ	169
    27  00AA                    MUL1_DH	equ	170
    28  00AB                    MUL1_DL	equ	171
    29                          ;stack_size is 29 bss 84
    30                          ; Stacksize: 29; Bank 0 TOTAL: 121 (0x79); Other banks TOTAL: 0 (0x0)
    31  005C                    main@ret	equ	??_main
    32  005E                    UartPutHexWord@data	equ	??_UartPutHexWord
    33  0060                    UartPutHexWord@value	equ	??_UartPutHexWord+2
    34  0062                    UartPutHexWord@temp	equ	??_UartPutHexWord+4
    35  0063                    UartPutHexWord@ch	equ	??_UartPutHexWord+5
    36  005E                    FrameCheck@checksum	equ	??_FrameCheck
    37  0060                    FrameCheck@i	equ	??_FrameCheck+2
    38  005E                    Si7020Init@my_data	equ	??_Si7020Init
    39  005E                    Si7020Read_Temp_after_RHM@buffer	equ	??_Si7020Read_Temp_after_RHM
    40  005F                    Si7020Read_Temp_after_RHM@ret	equ	??_Si7020Read_Temp_after_RHM+1
    41  005E                    Si7020CalcTemp@data	equ	??_Si7020CalcTemp
    42  0060                    Si7020CalcTemp@temp	equ	??_Si7020CalcTemp+2
    43  0064                    Si7020CalcTemp@result	equ	??_Si7020CalcTemp+6
    44  005E                    UartPutHexByte@data	equ	??_UartPutHexByte
    45  005F                    UartPutHexByte@temp	equ	??_UartPutHexByte+1
    46  0060                    UartPutHexByte@ch	equ	??_UartPutHexByte+2
    47  005E                    Si7020Read_RH_NHM@buffer	equ	??_Si7020Read_RH_NHM
    48  005F                    Si7020Read_RH_NHM@ret	equ	??_Si7020Read_RH_NHM+1
    49  005E                    Si7020CalcRH@data	equ	??_Si7020CalcRH
    50  0060                    Si7020CalcRH@temp	equ	??_Si7020CalcRH+2
    51  0064                    Si7020CalcRH@result	equ	??_Si7020CalcRH+6
    52  0061                    IRcvBytes@s	equ	??_IRcvBytes
    53  0062                    IRcvBytes@sla	equ	??_IRcvBytes+1
    54  0063                    IRcvBytes@i	equ	??_IRcvBytes+2
    55  0060                    IRcvBytes@no	equ	?_IRcvBytes
    56  0066                    Num2Char@num	equ	??_Num2Char
    57  005E                    LeftRotate@k	equ	??_LeftRotate
    58  005F                    _LeftRotate$3378	equ	??_LeftRotate+1
    59  0071                    ___lmul@product	equ	??___lmul
    60  0069                    ___lmul@multiplier	equ	?___lmul
    61  006D                    ___lmul@multiplicand	equ	?___lmul+4
    62  005E                    ShowPMxx@pm	equ	??_ShowPMxx
    63  0060                    ShowPMxx@temp	equ	??_ShowPMxx+2
    64  0062                    ShowPMxx@index	equ	??_ShowPMxx+4
    65  0064                    ShowPMxx@k	equ	??_ShowPMxx+6
    66  006B                    ___wmul@multiplier	equ	??___wmul
    67  006D                    ___wmul@product	equ	??___wmul+2
    68  0069                    ___wmul@multiplicand	equ	?___wmul
    69  005E                    UartPutConstStr@str	equ	??_UartPutConstStr
    70  0060                    UartPutConstStr@k	equ	??_UartPutConstStr+2
    71  005E                    ShowHumiTemp@value	equ	??_ShowHumiTemp
    72  005F                    ShowHumiTemp@temp	equ	??_ShowHumiTemp+1
    73  0060                    ShowHumiTemp@index	equ	??_ShowHumiTemp+2
    74  0060                    Si7020SendCommand@cmd	equ	??_Si7020SendCommand
    75  0066                    ___awmod@dividend	equ	??___awmod
    76  0068                    ___awmod@sign	equ	??___awmod+2
    77  0069                    ___awmod@counter	equ	??___awmod+3
    78  0064                    ___awmod@divisor	equ	?___awmod
    79  0066                    ___awdiv@dividend	equ	??___awdiv
    80  0068                    ___awdiv@quotient	equ	??___awdiv+2
    81  006A                    ___awdiv@sign	equ	??___awdiv+4
    82  006B                    ___awdiv@counter	equ	??___awdiv+5
    83  0064                    ___awdiv@divisor	equ	?___awdiv
    84  0061                    ISendByte@c	equ	??_ISendByte
    85  0062                    ISendByte@sla	equ	??_ISendByte+1
    86  0066                    RcvByte@retc	equ	??_RcvByte
    87  0067                    RcvByte@BitCnt	equ	??_RcvByte+1
    88  0066                    Ack_I2c@a	equ	??_Ack_I2c
    89  0068                    ___lwdiv@dividend	equ	??___lwdiv
    90  006A                    ___lwdiv@quotient	equ	??___lwdiv+2
    91  006C                    ___lwdiv@counter	equ	??___lwdiv+4
    92  0066                    ___lwdiv@divisor	equ	?___lwdiv
    93  0064                    abs@a	equ	??_abs
    94  0068                    ___lwmod@dividend	equ	??___lwmod
    95  006A                    ___lwmod@counter	equ	??___lwmod+2
    96  0066                    ___lwmod@divisor	equ	?___lwmod
    97  0066                    SendByte@c	equ	??_SendByte
    98  0067                    SendByte@BitCnt	equ	??_SendByte+1
    99  0069                    delay_us@us	equ	??_delay_us
   100  0076                    ShiftRegOutput@temp_data	equ	??_ShiftRegOutput
   101  0077                    ShiftRegOutput@k	equ	??_ShiftRegOutput+1
   102  0078                    ShiftRegOutput@i	equ	??_ShiftRegOutput+2
   103  0075                    SensorUART@rxdata	equ	??_SensorUART
   104                          ; =============== function _main ends ============
   105  30D4                    ___start_of_c_program_code:
   106                          ; *************** function _UartPutHexWord *****************
   107                          ; Defined at:
   108                          ;		line 60 in file "./boardcommunication.c"
   109                          ; Parameters:
   110                          ;		data        	reg:   xa	type: unsigned int 
   111                          ; Auto variables:
   112                          ;		data        	       	type: unsigned int 
   113                          ;		value       	       	type: unsigned int 
   114                          ;		ch          	       	type: unsigned char 
   115                          ;		temp        	       	type: unsigned char 
   116                          ; Return value:
   117                          ;		type: void 
   118                          ;		size: 0
   119                          ; Registers used:
   120                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   121                          ; Tracked objects:
   122                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   123                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   124                          ;		Unchanged: 
   125                          ; Data sizes:
   126                          ;		Autos:    6
   127                          ;		Params:   0
   128                          ;		Temp:     2
   129                          ;		Total:    8
   130                          ; This function calls:
   131                          ;		_Num2Char
   132                          ;		_UART_Board_bReadTxStatus
   133                          ;		_UART_Board_SendData
   134                          ; This function is called by:
   135                          ;		_main
   136                          ; This function uses a non-reentrant model
   137                          ; 
   138  00AA                    __size_of_UartPutHexWord	equ	__end_of_UartPutHexWord-_UartPutHexWord
   139                          ;boardcommunication.c: 59: void UartPutHexWord(unsigned int data)
   140                          ;boardcommunication.c: 60: {
   141                          ;			CUR_PP=0 XIO=0 PG=2 
   142  30D4                    _UartPutHexWord:
   143                          ;boardcommunication.c: 61: unsigned char ch;
   144                          ;boardcommunication.c: 62: unsigned char temp;
   145                          ;boardcommunication.c: 63: unsigned int value = data;
   146  30D4  53 61             	mov	[((??_UartPutHexWord+2)^0+1)], a
   147  30D6  5A 60             	mov	[(??_UartPutHexWord+2)^0], x
   148                          ;boardcommunication.c: 65: temp = (value >> 12) & 0x000f;
   149  30D8  50 0C             	mov	a, 12
   150  30DA  5F 64  60         	mov	[(??_UartPutHexWord^0+6)], [(??_UartPutHexWord+2)^0]
   151  30DD  5F 65  61         	mov	[(??_UartPutHexWord^0+7)], [(??_UartPutHexWord+3)^0]
   152  30E0  70 FB             	and	f, 0xFB
   153  30E2                    u194:
   154  30E2  6E 64             	rrc	[(??_UartPutHexWord^0+6)]
   155  30E4  6E 65             	rrc	[(??_UartPutHexWord^0+7)]
   156  30E6  78                	dec	a
   157  30E7  BFFA              	jnz	u194
   158  30E9  51 65             	mov	a, [(??_UartPutHexWord^0+7)]
   159  30EB  21 0F             	and	a, 0xF
   160  30ED  53 62             	mov	[(??_UartPutHexWord+4)^0], a
   161                          ;boardcommunication.c: 66: ch = Num2Char(temp);
   162  30EF  51 62             	mov	a, [(??_UartPutHexWord+4)^0]
   163  30F1  7C 34CF           	call	_Num2Char
   164  30F4  53 63             	mov	[(??_UartPutHexWord+5)^0], a
   165                          ;boardcommunication.c: 67: while (!(UART_Board_bReadTxStatus() & 0x10));
   166                          ;			XIO=0 PG=2 
   167  30F6                    l32:
   168  30F6  7C 2E65           	call	_UART_Board_bReadTxStatus
   169  30F9  21 10             	and	a, 0x10
   170  30FB  AFFA              	jz	l32
   171                          ;			XIO=0 PG=2 
   172                          ;boardcommunication.c: 68: UART_Board_SendData(ch);
   173  30FD  62 D0 00          	mov	reg[208], 0
   174  3100  51 63             	mov	a, [(??_UartPutHexWord+5)^0]
   175  3102  7C 2E62           	call	_UART_Board_SendData
   176                          ;boardcommunication.c: 70: temp = ((value >> 8) & 0x000f);
   177  3105  62 D0 00          	mov	reg[208], 0
   178  3108  51 60             	mov	a, [(??_UartPutHexWord+2)^0]
   179  310A  21 0F             	and	a, 0xF
   180  310C  53 62             	mov	[(??_UartPutHexWord+4)^0], a
   181                          ;boardcommunication.c: 71: ch = Num2Char(temp);
   182  310E  51 62             	mov	a, [(??_UartPutHexWord+4)^0]
   183  3110  7C 34CF           	call	_Num2Char
   184  3113  53 63             	mov	[(??_UartPutHexWord+5)^0], a
   185                          ;boardcommunication.c: 72: while (!(UART_Board_bReadTxStatus() & 0x10));
   186                          ;			XIO=0 PG=2 
   187  3115                    l35:
   188  3115  7C 2E65           	call	_UART_Board_bReadTxStatus
   189  3118  21 10             	and	a, 0x10
   190  311A  AFFA              	jz	l35
   191                          ;			XIO=0 PG=2 
   192                          ;boardcommunication.c: 73: UART_Board_SendData(ch);
   193  311C  62 D0 00          	mov	reg[208], 0
   194  311F  51 63             	mov	a, [(??_UartPutHexWord+5)^0]
   195  3121  7C 2E62           	call	_UART_Board_SendData
   196                          ;boardcommunication.c: 75: temp = ((value >> 4) & 0x000f);
   197  3124  62 D0 00          	mov	reg[208], 0
   198  3127  51 61             	mov	a, [(??_UartPutHexWord+3)^0]
   199  3129  6D                	rrc	a
   200  312A  6D                	rrc	a
   201  312B  6D                	rrc	a
   202  312C  6D                	rrc	a
   203  312D  21 0F             	and	a, 0xF
   204  312F  53 62             	mov	[(??_UartPutHexWord+4)^0], a
   205                          ;boardcommunication.c: 76: ch = Num2Char(temp);
   206  3131  51 62             	mov	a, [(??_UartPutHexWord+4)^0]
   207  3133  7C 34CF           	call	_Num2Char
   208  3136  53 63             	mov	[(??_UartPutHexWord+5)^0], a
   209                          ;boardcommunication.c: 77: while (!(UART_Board_bReadTxStatus() & 0x10));
   210                          ;			XIO=0 PG=2 
   211  3138                    l38:
   212  3138  7C 2E65           	call	_UART_Board_bReadTxStatus
   213  313B  21 10             	and	a, 0x10
   214  313D  AFFA              	jz	l38
   215                          ;			XIO=0 PG=2 
   216                          ;boardcommunication.c: 78: UART_Board_SendData(ch);
   217  313F  62 D0 00          	mov	reg[208], 0
   218  3142  51 63             	mov	a, [(??_UartPutHexWord+5)^0]
   219  3144  7C 2E62           	call	_UART_Board_SendData
   220                          ;boardcommunication.c: 80: temp = (value & 0x000f);
   221  3147  62 D0 00          	mov	reg[208], 0
   222  314A  51 61             	mov	a, [(??_UartPutHexWord+3)^0]
   223  314C  21 0F             	and	a, 0xF
   224  314E  53 62             	mov	[(??_UartPutHexWord+4)^0], a
   225                          ;boardcommunication.c: 81: ch = Num2Char(temp);
   226  3150  51 62             	mov	a, [(??_UartPutHexWord+4)^0]
   227  3152  7C 34CF           	call	_Num2Char
   228  3155  53 63             	mov	[(??_UartPutHexWord+5)^0], a
   229                          ;boardcommunication.c: 82: while (!(UART_Board_bReadTxStatus() & 0x10));
   230                          ;			XIO=0 PG=2 
   231  3157                    l41:
   232  3157  7C 2E65           	call	_UART_Board_bReadTxStatus
   233  315A  21 10             	and	a, 0x10
   234  315C  AFFA              	jz	l41
   235                          ;			XIO=0 PG=2 
   236                          ;boardcommunication.c: 83: UART_Board_SendData(ch);
   237  315E  62 D0 00          	mov	reg[208], 0
   238  3161  51 63             	mov	a, [(??_UartPutHexWord+5)^0]
   239  3163  7C 2E62           	call	_UART_Board_SendData
   240                          ;boardcommunication.c: 85: while (!(UART_Board_bReadTxStatus() & 0x10));
   241                          ;			XIO=0 PG=2 
   242  3166                    l44:
   243  3166  7C 2E65           	call	_UART_Board_bReadTxStatus
   244  3169  21 10             	and	a, 0x10
   245  316B  AFFA              	jz	l44
   246                          ;			XIO=0 PG=2 
   247                          ;boardcommunication.c: 86: UART_Board_SendData('\r');
   248  316D  50 0D             	mov	a, 13
   249  316F  7C 2E62           	call	_UART_Board_SendData
   250                          ;boardcommunication.c: 88: while (!(UART_Board_bReadTxStatus() & 0x10));
   251                          ;			XIO=0 PG=2 
   252  3172                    l47:
   253  3172  7C 2E65           	call	_UART_Board_bReadTxStatus
   254  3175  21 10             	and	a, 0x10
   255  3177  AFFA              	jz	l47
   256                          ;			XIO=0 PG=2 
   257                          ;boardcommunication.c: 89: UART_Board_SendData('\n');
   258  3179  50 0A             	mov	a, 10
   259  317B  7D 2E62           	jmp	_UART_Board_SendData
   260                          ;boardcommunication.c: 90: }
   261                          ;			XIO=0 PG=2 
   262  317E                    __end_of_UartPutHexWord:
   263                          ; =============== function _UartPutHexWord ends ============
   264                          ; *************** function _FrameCheck *****************
   265                          ; Defined at:
   266                          ;		line 80 in file "./particlesensor.c"
   267                          ; Parameters:
   268                          ;		None
   269                          ; Auto variables:
   270                          ;		checksum    	       	type: unsigned int 
   271                          ;		i           	       	type: unsigned char 
   272                          ; Return value:
   273                          ;		type: unsigned char 
   274                          ;		size: 1
   275                          ; Registers used:
   276                          ;		a, x, CUR_PP
   277                          ; Tracked objects:
   278                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   279                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   280                          ;		Unchanged: MVR_PP MVW_PP 
   281                          ; Data sizes:
   282                          ;		Autos:    3
   283                          ;		Params:   0
   284                          ;		Temp:     3
   285                          ;		Total:    6
   286                          ; This function calls:
   287                          ;		Nothing
   288                          ; This function is called by:
   289                          ;		_main
   290                          ; This function uses a non-reentrant model
   291                          ; 
   292  004D                    __size_of_FrameCheck	equ	__end_of_FrameCheck-_FrameCheck
   293                          ;particlesensor.c: 79: unsigned char FrameCheck(void)
   294                          ;particlesensor.c: 80: {
   295                          ;			CUR_PP=0 XIO=0 PG=2 
   296  317E                    _FrameCheck:
   297                          ;particlesensor.c: 81: unsigned int checksum = 0;
   298  317E  55 5E  00         	mov	[??_FrameCheck^0], 0
   299  3181  55 5F  00         	mov	[(??_FrameCheck^0+1)], 0
   300                          ;particlesensor.c: 82: unsigned char i = 0;
   301                          ;particlesensor.c: 84: for (i = 0; i < (MyPMSUnion.MyPMFrame.Length+2); i++)
   302  3184  57 00             	mov	x, 0
   303  3186  7D 3194           	jmp	l131
   304                          ;			CUR_PP=0 XIO=0 
   305  3189                    l128:
   306                          ;particlesensor.c: 85: {
   307                          ;particlesensor.c: 86: checksum += MyPMSUnion.PMRxBuf[i];
   308  3189  62 D3 00          	mov	reg[211], 0
   309  318C  52 00             	mov	a, [x+_MyPMSUnion]
   310  318E  04 5F             	add	[(??_FrameCheck^0+1)], a
   311  3190  0E 5E  00         	adc	[??_FrameCheck^0], 0
   312  3193  75                	inc	x
   313                          ;			CUR_PP=0 XIO=0 
   314  3194                    l131:
   315  3194  5F 61  02         	mov	[(??_FrameCheck^0+3)], [(_MyPMSUnion+2)^0]
   316  3197  5F 62  03         	mov	[(??_FrameCheck^0+4)], [(_MyPMSUnion+3)^0]
   317  319A  06 62  02         	add	[(??_FrameCheck^0+4)], 2
   318  319D  0E 61  00         	adc	[(??_FrameCheck^0+3)], 0
   319  31A0  5B                	mov	a, x
   320  31A1  53 63             	mov	[(??_FrameCheck^0+5)], a
   321  31A3  51 63             	mov	a, [(??_FrameCheck^0+5)]
   322  31A5  3A 62             	cmp	a, [(??_FrameCheck^0+4)]
   323  31A7  50 00             	mov	a, 0
   324  31A9  1A 61             	sbb	a, [(??_FrameCheck^0+3)]
   325  31AB  CFDD              	jc	l128
   326                          ;			CUR_PP=0 XIO=0 
   327                          ;particlesensor.c: 87: }
   328                          ;particlesensor.c: 89: MyPMSUnion.MyPMFrame.Length = 0;
   329  31AD  55 02  00         	mov	[(_MyPMSUnion+2)^0], 0
   330  31B0  55 03  00         	mov	[((_MyPMSUnion+2)^0+1)], 0
   331                          ;particlesensor.c: 90: MyPMSUnion.MyPMFrame.Head = 0;
   332  31B3  55 00  00         	mov	[_MyPMSUnion^0], 0
   333  31B6  55 01  00         	mov	[(_MyPMSUnion^0+1)], 0
   334                          ;particlesensor.c: 92: if (checksum == MyPMSUnion.MyPMFrame.checksum)
   335  31B9  51 16             	mov	a, [(_MyPMSUnion+22)^0]
   336  31BB  3A 5E             	cmp	a, [??_FrameCheck^0]
   337  31BD  B00A              	jnz	l132
   338  31BF  51 17             	mov	a, [((_MyPMSUnion+22)^0+1)]
   339  31C1  3A 5F             	cmp	a, [(??_FrameCheck^0+1)]
   340  31C3  B004              	jnz	l132
   341                          ;particlesensor.c: 93: {
   342                          ;particlesensor.c: 94: return 1;
   343  31C5  50 01             	mov	a, 1
   344  31C7  7F                	ret
   345                          ;			CUR_PP=0 XIO=0 
   346  31C8                    l132:
   347                          ;particlesensor.c: 96: else
   348                          ;particlesensor.c: 97: {
   349                          ;particlesensor.c: 98: return 0;
   350  31C8  50 00             	mov	a, 0
   351                          ;particlesensor.c: 99: }
   352                          ;particlesensor.c: 100: }
   353                          ;			CUR_PP=0 XIO=0 
   354  31CA  7F                	ret
   355  31CB                    __end_of_FrameCheck:
   356                          ; =============== function _FrameCheck ends ============
   357                          ; *************** function _Si7020Init *****************
   358                          ; Defined at:
   359                          ;		line 113 in file "./si7020.c"
   360                          ; Parameters:
   361                          ;		None
   362                          ; Auto variables:
   363                          ;		my_data     	       	type: unsigned char [2]
   364                          ; Return value:
   365                          ;		type: void 
   366                          ;		size: 0
   367                          ; Registers used:
   368                          ;		CUR_PP
   369                          ; Tracked objects:
   370                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   371                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   372                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   373                          ; Data sizes:
   374                          ;		Autos:    2
   375                          ;		Params:   0
   376                          ;		Temp:     0
   377                          ;		Total:    2
   378                          ; This function calls:
   379                          ;		Nothing
   380                          ; This function is called by:
   381                          ;		_main
   382                          ; This function uses a non-reentrant model
   383                          ; 
   384  000A                    __size_of_Si7020Init	equ	__end_of_Si7020Init-_Si7020Init
   385                          ;si7020.c: 112: void Si7020Init()
   386                          ;si7020.c: 113: {
   387                          ;			CUR_PP=0 XIO=0 PG=2 
   388  31CB                    _Si7020Init:
   389                          ;si7020.c: 114: unsigned char my_data[2];
   390                          ;si7020.c: 115: my_data[0] = 0xE6;
   391  31CB  55 5E  E6         	mov	[??_Si7020Init^0], 230
   392                          ;si7020.c: 117: ISendStr[0x80,my_data,2];
   393  31CE  55 5F  00         	mov	[(??_Si7020Init+1)^0], 0
   394                          ;si7020.c: 118: data_length = 24;
   395  31D1  55 5B  18         	mov	[_data_length^0], 24
   396                          ;si7020.c: 119: }
   397                          ;			CUR_PP=0 XIO=0 PG=2 
   398  31D4  7F                	ret
   399  31D5                    __end_of_Si7020Init:
   400                          ; =============== function _Si7020Init ends ============
   401                          ; *************** function _Si7020Read_Temp_after_RHM *****************
   402                          ; Defined at:
   403                          ;		line 33 in file "./si7020.c"
   404                          ; Parameters:
   405                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   406                          ;		 -> RecBuf(5), 
   407                          ; Auto variables:
   408                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   409                          ;		 -> RecBuf(5), 
   410                          ;		ret         	       	type: unsigned char 
   411                          ; Return value:
   412                          ;		type: unsigned char 
   413                          ;		size: 1
   414                          ; Registers used:
   415                          ;		a, x, CUR_PP
   416                          ; Tracked objects:
   417                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   418                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   419                          ;		Unchanged: MVR_PP MVW_PP 
   420                          ; Data sizes:
   421                          ;		Autos:    2
   422                          ;		Params:   0
   423                          ;		Temp:     0
   424                          ;		Total:    2
   425                          ; This function calls:
   426                          ;		_Si7020SendCommand
   427                          ;		_IRcvBytes
   428                          ; This function is called by:
   429                          ;		_main
   430                          ; This function uses a non-reentrant model
   431                          ; 
   432  0021                    __size_of_Si7020Read_Temp_after_RHM	equ	__end_of_Si7020Read_Temp_after_RHM-_Si7020Read_Temp_after_RH
      +                         M
   433                          ;si7020.c: 32: unsigned char Si7020Read_Temp_after_RHM(unsigned char * buffer)
   434                          ;si7020.c: 33: {
   435                          ;			CUR_PP=0 XIO=0 PG=2 
   436  31D5                    _Si7020Read_Temp_after_RHM:
   437                          ;Si7020Read_Temp_after_RHM@buffer stored from a
   438  31D5  62 D0 00          	mov	reg[208], 0
   439  31D8  53 5E             	mov	[??_Si7020Read_Temp_after_RHM^0], a
   440                          ;si7020.c: 34: char ret;
   441                          ;si7020.c: 35: ret = Si7020SendCommand(0xE0);
   442  31DA  50 E0             	mov	a, 224
   443  31DC  7C 3803           	call	_Si7020SendCommand
   444  31DF  53 5F             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   445                          ;si7020.c: 37: if (!ret)
   446  31E1  51 5F             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   447                          ;si7020.c: 38: {
   448                          ;si7020.c: 39: return 0;
   449                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   450  31E3  A011              	jz	l140
   451                          ;			CUR_PP=0 XIO=0 
   452                          ;si7020.c: 40: }
   453                          ;si7020.c: 42: ret = IRcvBytes(0x80,buffer,2);
   454  31E5  55 60  02         	mov	[?_IRcvBytes^0], 2
   455  31E8  50 80             	mov	a, 128
   456  31EA  58 5E             	mov	x, [??_Si7020Read_Temp_after_RHM^0]
   457  31EC  71 80             	or	f, 0x80	;select multiple RAM page mode
   458  31EE  7C 345F           	call	_IRcvBytes
   459  31F1  53 5F             	mov	[(??_Si7020Read_Temp_after_RHM+1)^0], a
   460                          ;si7020.c: 44: if (!ret)
   461  31F3  51 5F             	mov	a, [(??_Si7020Read_Temp_after_RHM+1)^0]
   462                          ;si7020.c: 45: {
   463                          ;si7020.c: 46: return 0;
   464                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   465                          ;			CUR_PP=0 XIO=0 
   466                          ;si7020.c: 47: }
   467                          ;si7020.c: 49: return 1;
   468                          ;	Return value of _Si7020Read_Temp_after_RHM is never used
   469                          ;si7020.c: 50: }
   470  31F5                    l140:
   471                          ;			CUR_PP=0 XIO=0 
   472  31F5  7F                	ret
   473  31F6                    __end_of_Si7020Read_Temp_after_RHM:
   474                          ; =============== function _Si7020Read_Temp_after_RHM ends ============
   475                          ; *************** function _Si7020CalcTemp *****************
   476                          ; Defined at:
   477                          ;		line 57 in file "./si7020.c"
   478                          ; Parameters:
   479                          ;		data        	reg:   xa	type: unsigned int 
   480                          ; Auto variables:
   481                          ;		data        	       	type: unsigned int 
   482                          ;		temp        	       	type: long 
   483                          ;		result      	       	type: char 
   484                          ; Return value:
   485                          ;		type: char 
   486                          ;		size: 1
   487                          ; Registers used:
   488                          ;		a, x, CUR_PP, mret
   489                          ; Tracked objects:
   490                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   491                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   492                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   493                          ; Data sizes:
   494                          ;		Autos:    7
   495                          ;		Params:   0
   496                          ;		Temp:     4
   497                          ;		Total:   11
   498                          ; This function calls:
   499                          ;		___lmul
   500                          ;		___wmul
   501                          ; This function is called by:
   502                          ;		_main
   503                          ; This function uses a non-reentrant model
   504                          ; 
   505  00A4                    __size_of_Si7020CalcTemp	equ	__end_of_Si7020CalcTemp-_Si7020CalcTemp
   506                          ;si7020.c: 56: signed char Si7020CalcTemp(unsigned int data)
   507                          ;si7020.c: 57: {
   508                          ;			CUR_PP=0 XIO=0 PG=2 
   509  31F6                    _Si7020CalcTemp:
   510                          ;Si7020CalcTemp@data stored from xa
   511  31F6  53 5F             	mov	[(??_Si7020CalcTemp^0+1)], a
   512  31F8  5A 5E             	mov	[??_Si7020CalcTemp^0], x
   513                          ;si7020.c: 58: signed long temp;
   514                          ;si7020.c: 59: signed char result;
   515                          ;si7020.c: 60: temp = data;
   516  31FA  5F 63  5F         	mov	[(??_Si7020CalcTemp+5)^0], [(??_Si7020CalcTemp+1)^0]
   517  31FD  5F 62  5E         	mov	[(??_Si7020CalcTemp+4)^0], [??_Si7020CalcTemp^0]
   518  3200  55 61  00         	mov	[(??_Si7020CalcTemp+3)^0], 0
   519  3203  55 60  00         	mov	[(??_Si7020CalcTemp+2)^0], 0
   520                          ;si7020.c: 61: temp = temp*175;
   521  3206  5F 69  60         	mov	[?___lmul^0], [(??_Si7020CalcTemp+2)^0]
   522  3209  5F 6A  61         	mov	[(?___lmul+1)^0], [(??_Si7020CalcTemp+3)^0]
   523  320C  5F 6B  62         	mov	[(?___lmul+2)^0], [(??_Si7020CalcTemp+4)^0]
   524  320F  5F 6C  63         	mov	[(?___lmul+3)^0], [(??_Si7020CalcTemp+5)^0]
   525  3212  55 6D  00         	mov	[(?___lmul+4)^0], 0
   526  3215  55 6E  00         	mov	[((?___lmul+4)^0+1)], 0
   527  3218  55 6F  00         	mov	[((?___lmul+4)^0+2)], 0
   528  321B  55 70  AF         	mov	[((?___lmul+4)^0+3)], 175
   529  321E  7C 350C           	call	___lmul
   530  3221  5F 60  69         	mov	[(??_Si7020CalcTemp+2)^0], [?___lmul^0]
   531  3224  5F 61  6A         	mov	[(??_Si7020CalcTemp+3)^0], [(?___lmul+1)^0]
   532  3227  5F 62  6B         	mov	[(??_Si7020CalcTemp+4)^0], [(?___lmul+2)^0]
   533  322A  5F 63  6C         	mov	[(??_Si7020CalcTemp+5)^0], [(?___lmul+3)^0]
   534                          ;si7020.c: 62: temp += (data>>2)*3;
   535  322D  55 69  00         	mov	[?___wmul^0], 0
   536  3230  55 6A  03         	mov	[(?___wmul^0+1)], 3
   537  3233  50 02             	mov	a, 2
   538  3235  5F 65  5E         	mov	[(??_Si7020CalcTemp^0+7)], [??_Si7020CalcTemp^0]
   539  3238  5F 66  5F         	mov	[(??_Si7020CalcTemp^0+8)], [(??_Si7020CalcTemp+1)^0]
   540  323B  70 FB             	and	f, 0xFB
   541  323D                    u284:
   542  323D  6E 65             	rrc	[(??_Si7020CalcTemp^0+7)]
   543  323F  6E 66             	rrc	[(??_Si7020CalcTemp^0+8)]
   544  3241  78                	dec	a
   545  3242  BFFA              	jnz	u284
   546  3244  51 66             	mov	a, [(??_Si7020CalcTemp^0+8)]
   547  3246  58 65             	mov	x, [(??_Si7020CalcTemp^0+7)]
   548  3248  71 80             	or	f, 0x80	;select multiple RAM page mode
   549  324A  7C 36B7           	call	___wmul
   550  324D  5A 67             	mov	[(??_Si7020CalcTemp^0+9)], x
   551  324F  53 68             	mov	[(??_Si7020CalcTemp^0+10)], a
   552  3251  51 68             	mov	a, [(??_Si7020CalcTemp^0+10)]
   553  3253  04 63             	add	[((??_Si7020CalcTemp+2)^0+3)], a
   554  3255  51 67             	mov	a, [(??_Si7020CalcTemp^0+9)]
   555  3257  0C 62             	adc	[((??_Si7020CalcTemp+2)^0+2)], a
   556  3259  50 00             	mov	a, 0
   557  325B  0C 61             	adc	[((??_Si7020CalcTemp+2)^0+1)], a
   558  325D  0C 60             	adc	[(??_Si7020CalcTemp+2)^0], a
   559                          ;si7020.c: 63: temp >>= 16;
   560  325F  50 10             	mov	a, 16
   561  3261                    u294:
   562  3261  68 60             	asr	[(??_Si7020CalcTemp+2)^0]
   563  3263  6E 61             	rrc	[((??_Si7020CalcTemp+2)^0+1)]
   564  3265  6E 62             	rrc	[((??_Si7020CalcTemp+2)^0+2)]
   565  3267  6E 63             	rrc	[((??_Si7020CalcTemp+2)^0+3)]
   566  3269  78                	dec	a
   567  326A  BFF6              	jnz	u294
   568                          ;si7020.c: 64: temp -= 47;
   569  326C  06 63  D1         	add	[((??_Si7020CalcTemp+2)^0+3)], 209
   570  326F  0E 62  FF         	adc	[((??_Si7020CalcTemp+2)^0+2)], 255
   571  3272  0E 61  FF         	adc	[((??_Si7020CalcTemp+2)^0+1)], 255
   572  3275  0E 60  FF         	adc	[(??_Si7020CalcTemp+2)^0], 255
   573                          ;si7020.c: 65: if (temp < -9)
   574  3278  3C 63  F7         	cmp	[((??_Si7020CalcTemp+2)^0+3)], 247
   575  327B  51 62             	mov	a, [((??_Si7020CalcTemp+2)^0+2)]
   576  327D  19 FF             	sbb	a, 255
   577  327F  51 61             	mov	a, [((??_Si7020CalcTemp+2)^0+1)]
   578  3281  19 FF             	sbb	a, 255
   579  3283  51 60             	mov	a, [(??_Si7020CalcTemp+2)^0]
   580  3285  31 80             	xor	a, 0x80
   581  3287  19 7F             	sbb	a, 127
   582  3289  D00D              	jnc	l144
   583                          ;si7020.c: 66: temp = -9;
   584  328B  55 60  FF         	mov	[(??_Si7020CalcTemp+2)^0], 255
   585  328E  55 61  FF         	mov	[((??_Si7020CalcTemp+2)^0+1)], 255
   586  3291  55 62  FF         	mov	[((??_Si7020CalcTemp+2)^0+2)], 255
   587  3294  55 63  F7         	mov	[((??_Si7020CalcTemp+2)^0+3)], 247
   588                          ;			CUR_PP=0 XIO=0 
   589  3297                    l144:
   590                          ;si7020.c: 68: result = temp;
   591  3297  51 63             	mov	a, [(??_Si7020CalcTemp+5)^0]
   592                          ;si7020.c: 69: return result;
   593                          ;si7020.c: 70: }
   594                          ;			CUR_PP=0 XIO=0 
   595  3299  7F                	ret
   596  329A                    __end_of_Si7020CalcTemp:
   597                          ; =============== function _Si7020CalcTemp ends ============
   598                          ; *************** function _LED_Display *****************
   599                          ; Defined at:
   600                          ;		line 132 in file "./led.c"
   601                          ; Parameters:
   602                          ;		None
   603                          ; Auto variables:
   604                          ;		None
   605                          ; Return value:
   606                          ;		type: void 
   607                          ;		size: 0
   608                          ; Registers used:
   609                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   610                          ; Tracked objects:
   611                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   612                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   613                          ;		Unchanged: 
   614                          ; Data sizes:
   615                          ;		Autos:    0
   616                          ;		Params:   0
   617                          ;		Temp:     0
   618                          ;		Total:    0
   619                          ; This function calls:
   620                          ;		_ShowPMxx
   621                          ;		_UartPutConstStr
   622                          ;		_ShowHumiTemp
   623                          ; This function is called by:
   624                          ;		_main
   625                          ; This function uses a non-reentrant model
   626                          ; 
   627  0063                    __size_of_LED_Display	equ	__end_of_LED_Display-_LED_Display
   628                          ;led.c: 131: void LED_Display(void)
   629                          ;led.c: 132: {
   630                          ;			CUR_PP=0 XIO=0 PG=2 
   631  329A                    _LED_Display:
   632                          ;led.c: 134: if (!DisplayExchangeTimer)
   633  329A  51 59             	mov	a, [_DisplayExchangeTimer^0]
   634  329C  B05F              	jnz	l79
   635                          ;led.c: 135: {
   636                          ;led.c: 136: DisplayExchangeTimer = 40;
   637  329E  55 59  28         	mov	[_DisplayExchangeTimer^0], 40
   638                          ;led.c: 137: if (DisplayItem == 0)
   639  32A1  51 42             	mov	a, [_DisplayItem^0]
   640  32A3  B014              	jnz	l80
   641                          ;led.c: 138: {
   642                          ;led.c: 139: ShowPMxx(data_pm2_5);
   643  32A5  51 3E             	mov	a, [(_data_pm2_5^0+1)]
   644  32A7  58 3D             	mov	x, [_data_pm2_5^0]
   645  32A9  7C 3554           	call	_ShowPMxx
   646                          ;led.c: 140: DisplayItem = 1;
   647  32AC  55 42  01         	mov	[_DisplayItem^0], 1
   648                          ;led.c: 141: UartPutConstStr("Show PM");
   649  32AF  57 24             	mov	x, <STR_1
   650  32B1  50 3F             	mov	a, >STR_1
   651  32B3  71 80             	or	f, 0x80	;select multiple RAM page mode
   652  32B5  7D 36E3           	jmp	_UartPutConstStr
   653                          ;led.c: 142: }
   654                          ;			CUR_PP=0 XIO=0 PG=2 
   655  32B8                    l80:
   656                          ;led.c: 143: else
   657                          ;led.c: 144: {
   658                          ;led.c: 145: if (DisplayItem == 1)
   659  32B8  3C 42  01         	cmp	[_DisplayItem^0], 1
   660  32BB  B01E              	jnz	l82
   661                          ;led.c: 146: {
   662                          ;led.c: 147: DisplayContent[0] = ~(0X8000 + 0X0004 + 0X0008 + 0X2000);
   663  32BD  55 28  5F         	mov	[_DisplayContent^0], 95
   664  32C0  55 29  F3         	mov	[(_DisplayContent^0+1)], 243
   665                          ;led.c: 148: DisplayContent[4] = ~(0X8000 + 0X0004 + 0X0008 + 0X2000);
   666  32C3  55 30  5F         	mov	[(_DisplayContent+8)^0], 95
   667  32C6  55 31  F3         	mov	[((_DisplayContent+8)^0+1)], 243
   668                          ;led.c: 150: ShowHumiTemp(Temperature);
   669  32C9  51 4A             	mov	a, [_Temperature^0]
   670  32CB  7C 372D           	call	_ShowHumiTemp
   671                          ;led.c: 151: DisplayItem = 2;
   672  32CE  55 42  02         	mov	[_DisplayItem^0], 2
   673                          ;led.c: 152: UartPutConstStr("Show T");
   674  32D1  57 34             	mov	x, <STR_2
   675  32D3  50 3F             	mov	a, >STR_2
   676  32D5  71 80             	or	f, 0x80	;select multiple RAM page mode
   677  32D7  7D 36E3           	jmp	_UartPutConstStr
   678                          ;led.c: 153: }
   679                          ;			CUR_PP=0 XIO=0 PG=2 
   680  32DA                    l82:
   681                          ;led.c: 154: else
   682                          ;led.c: 155: {
   683                          ;led.c: 156: if (DisplayItem == 2)
   684  32DA  3C 42  02         	cmp	[_DisplayItem^0], 2
   685  32DD  B01E              	jnz	l79
   686                          ;led.c: 157: {
   687                          ;led.c: 158: DisplayContent[0] = ~(0X0001 + 0X0002 + 0X0008 + 0X2000 + 0X1000);
   688  32DF  55 28  CF         	mov	[_DisplayContent^0], 207
   689  32E2  55 29  F4         	mov	[(_DisplayContent^0+1)], 244
   690                          ;led.c: 159: DisplayContent[4] = ~(0X0001 + 0X0002 + 0X0008 + 0X2000 + 0X1000);
   691  32E5  55 30  CF         	mov	[(_DisplayContent+8)^0], 207
   692  32E8  55 31  F4         	mov	[((_DisplayContent+8)^0+1)], 244
   693                          ;led.c: 161: ShowHumiTemp(Humidity);
   694  32EB  51 44             	mov	a, [_Humidity^0]
   695  32ED  7C 372D           	call	_ShowHumiTemp
   696                          ;led.c: 162: DisplayItem = 0;
   697  32F0  55 42  00         	mov	[_DisplayItem^0], 0
   698                          ;led.c: 163: UartPutConstStr("Show RH");
   699  32F3  57 2C             	mov	x, <STR_3
   700  32F5  50 3F             	mov	a, >STR_3
   701  32F7  71 80             	or	f, 0x80	;select multiple RAM page mode
   702  32F9  7D 36E3           	jmp	_UartPutConstStr
   703                          ;			XIO=0 PG=2 
   704                          ;			XIO=0 PG=2 
   705                          ;			XIO=0 PG=2 
   706                          ;			XIO=0 PG=2 
   707  32FC                    l79:
   708                          ;led.c: 164: }
   709                          ;led.c: 165: }
   710                          ;led.c: 166: }
   711                          ;led.c: 167: }
   712                          ;led.c: 168: }
   713                          ;			XIO=0 PG=2 
   714  32FC  7F                	ret
   715  32FD                    __end_of_LED_Display:
   716                          ; =============== function _LED_Display ends ============
   717                          ; *************** function _UartPutHexByte *****************
   718                          ; Defined at:
   719                          ;		line 38 in file "./boardcommunication.c"
   720                          ; Parameters:
   721                          ;		data        	reg:    a	type: unsigned char 
   722                          ; Auto variables:
   723                          ;		data        	       	type: unsigned char 
   724                          ;		temp        	       	type: unsigned char 
   725                          ;		ch          	       	type: unsigned char 
   726                          ; Return value:
   727                          ;		type: void 
   728                          ;		size: 0
   729                          ; Registers used:
   730                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
   731                          ; Tracked objects:
   732                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   733                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   734                          ;		Unchanged: 
   735                          ; Data sizes:
   736                          ;		Autos:    3
   737                          ;		Params:   0
   738                          ;		Temp:     0
   739                          ;		Total:    3
   740                          ; This function calls:
   741                          ;		_Num2Char
   742                          ;		_UART_Board_bReadTxStatus
   743                          ;		_UART_Board_SendData
   744                          ; This function is called by:
   745                          ;		_main
   746                          ; This function uses a non-reentrant model
   747                          ; 
   748  0059                    __size_of_UartPutHexByte	equ	__end_of_UartPutHexByte-_UartPutHexByte
   749                          ;boardcommunication.c: 37: void UartPutHexByte(unsigned char data)
   750                          ;boardcommunication.c: 38: {
   751                          ;			CUR_PP=0 XIO=0 PG=2 
   752  32FD                    _UartPutHexByte:
   753                          ;UartPutHexByte@data stored from a
   754  32FD  53 5E             	mov	[??_UartPutHexByte^0], a
   755                          ;boardcommunication.c: 39: unsigned char temp;
   756                          ;boardcommunication.c: 40: unsigned char ch;
   757                          ;boardcommunication.c: 42: temp = (data>>4);
   758  32FF  51 5E             	mov	a, [??_UartPutHexByte^0]
   759  3301  6D                	rrc	a
   760  3302  6D                	rrc	a
   761  3303  6D                	rrc	a
   762  3304  6D                	rrc	a
   763  3305  21 0F             	and	a, 0xF
   764  3307  53 5F             	mov	[(??_UartPutHexByte+1)^0], a
   765                          ;boardcommunication.c: 43: ch = Num2Char(temp);
   766  3309  51 5F             	mov	a, [(??_UartPutHexByte+1)^0]
   767  330B  7C 34CF           	call	_Num2Char
   768  330E  53 60             	mov	[(??_UartPutHexByte+2)^0], a
   769                          ;boardcommunication.c: 44: while (!(UART_Board_bReadTxStatus() & 0x10));
   770                          ;			XIO=0 PG=2 
   771  3310                    l19:
   772  3310  7C 2E65           	call	_UART_Board_bReadTxStatus
   773  3313  21 10             	and	a, 0x10
   774  3315  AFFA              	jz	l19
   775                          ;			XIO=0 PG=2 
   776                          ;boardcommunication.c: 45: UART_Board_SendData(ch);
   777  3317  62 D0 00          	mov	reg[208], 0
   778  331A  51 60             	mov	a, [(??_UartPutHexByte+2)^0]
   779  331C  7C 2E62           	call	_UART_Board_SendData
   780                          ;boardcommunication.c: 47: temp = (data&0x0f);
   781  331F  62 D0 00          	mov	reg[208], 0
   782  3322  51 5E             	mov	a, [??_UartPutHexByte^0]
   783  3324  21 0F             	and	a, 0xF
   784                          ;UartPutHexByte@temp stored from a
   785  3326  53 5F             	mov	[(??_UartPutHexByte+1)^0], a
   786                          ;boardcommunication.c: 48: ch = Num2Char(temp);
   787  3328  51 5F             	mov	a, [(??_UartPutHexByte+1)^0]
   788  332A  7C 34CF           	call	_Num2Char
   789  332D  53 60             	mov	[(??_UartPutHexByte+2)^0], a
   790                          ;boardcommunication.c: 49: while (!(UART_Board_bReadTxStatus() & 0x10));
   791                          ;			XIO=0 PG=2 
   792  332F                    l22:
   793  332F  7C 2E65           	call	_UART_Board_bReadTxStatus
   794  3332  21 10             	and	a, 0x10
   795  3334  AFFA              	jz	l22
   796                          ;			XIO=0 PG=2 
   797                          ;boardcommunication.c: 50: UART_Board_SendData(ch);
   798  3336  62 D0 00          	mov	reg[208], 0
   799  3339  51 60             	mov	a, [(??_UartPutHexByte+2)^0]
   800  333B  7C 2E62           	call	_UART_Board_SendData
   801                          ;boardcommunication.c: 52: while (!(UART_Board_bReadTxStatus() & 0x10));
   802                          ;			XIO=0 PG=2 
   803  333E                    l25:
   804  333E  7C 2E65           	call	_UART_Board_bReadTxStatus
   805  3341  21 10             	and	a, 0x10
   806  3343  AFFA              	jz	l25
   807                          ;			XIO=0 PG=2 
   808                          ;boardcommunication.c: 53: UART_Board_SendData('\r');
   809  3345  50 0D             	mov	a, 13
   810  3347  7C 2E62           	call	_UART_Board_SendData
   811                          ;boardcommunication.c: 55: while (!(UART_Board_bReadTxStatus() & 0x10));
   812                          ;			XIO=0 PG=2 
   813  334A                    l28:
   814  334A  7C 2E65           	call	_UART_Board_bReadTxStatus
   815  334D  21 10             	and	a, 0x10
   816  334F  AFFA              	jz	l28
   817                          ;			XIO=0 PG=2 
   818                          ;boardcommunication.c: 56: UART_Board_SendData('\n');
   819  3351  50 0A             	mov	a, 10
   820  3353  7D 2E62           	jmp	_UART_Board_SendData
   821                          ;boardcommunication.c: 57: }
   822                          ;			XIO=0 PG=2 
   823  3356                    __end_of_UartPutHexByte:
   824                          ; =============== function _UartPutHexByte ends ============
   825                          ; *************** function _Si7020Read_RH_NHM *****************
   826                          ; Defined at:
   827                          ;		line 18 in file "./si7020.c"
   828                          ; Parameters:
   829                          ;		buffer      	reg:    a	type: PTR unsigned char ; Largest target is 5
   830                          ;		 -> RecBuf(5), 
   831                          ; Auto variables:
   832                          ;		buffer      	       	type: PTR unsigned char ; Largest target is 5
   833                          ;		 -> RecBuf(5), 
   834                          ;		ret         	       	type: unsigned char 
   835                          ; Return value:
   836                          ;		type: void 
   837                          ;		size: 0
   838                          ; Registers used:
   839                          ;		a, x, CUR_PP
   840                          ; Tracked objects:
   841                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   842                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   843                          ;		Unchanged: MVR_PP MVW_PP 
   844                          ; Data sizes:
   845                          ;		Autos:    2
   846                          ;		Params:   0
   847                          ;		Temp:     0
   848                          ;		Total:    2
   849                          ; This function calls:
   850                          ;		_IRcvBytes
   851                          ; This function is called by:
   852                          ;		_main
   853                          ; This function uses a non-reentrant model
   854                          ; 
   855  001C                    __size_of_Si7020Read_RH_NHM	equ	__end_of_Si7020Read_RH_NHM-_Si7020Read_RH_NHM
   856                          ;si7020.c: 17: void Si7020Read_RH_NHM(unsigned char * buffer)
   857                          ;si7020.c: 18: {
   858                          ;			CUR_PP=0 XIO=0 PG=2 
   859  3356                    _Si7020Read_RH_NHM:
   860                          ;Si7020Read_RH_NHM@buffer stored from a
   861  3356  53 5E             	mov	[??_Si7020Read_RH_NHM^0], a
   862                          ;si7020.c: 19: char ret;
   863                          ;si7020.c: 20: IICTimeOutTimer = 2;
   864  3358  55 45  02         	mov	[_IICTimeOutTimer^0], 2
   865                          ;si7020.c: 21: while (1)
   866                          ;			CUR_PP=0 XIO=0 
   867  335B                    l137:
   868                          ;si7020.c: 22: {
   869                          ;si7020.c: 23: ret = IRcvBytes(0x80,buffer,3);
   870  335B  55 60  03         	mov	[?_IRcvBytes^0], 3
   871  335E  50 80             	mov	a, 128
   872  3360  58 5E             	mov	x, [??_Si7020Read_RH_NHM^0]
   873  3362  71 80             	or	f, 0x80	;select multiple RAM page mode
   874  3364  7C 345F           	call	_IRcvBytes
   875  3367  53 5F             	mov	[(??_Si7020Read_RH_NHM+1)^0], a
   876                          ;si7020.c: 24: if (ret || !IICTimeOutTimer)
   877  3369  51 5F             	mov	a, [(??_Si7020Read_RH_NHM+1)^0]
   878  336B  B005              	jnz	l138
   879  336D  51 45             	mov	a, [_IICTimeOutTimer^0]
   880  336F  BFEB              	jnz	l137
   881                          ;			CUR_PP=0 XIO=0 
   882                          ;si7020.c: 25: break;
   883                          ;			CUR_PP=0 XIO=0 
   884                          ;			CUR_PP=0 XIO=0 
   885  3371                    l138:
   886                          ;si7020.c: 26: }
   887                          ;si7020.c: 27: }
   888                          ;			CUR_PP=0 XIO=0 
   889  3371  7F                	ret
   890  3372                    __end_of_Si7020Read_RH_NHM:
   891                          ; =============== function _Si7020Read_RH_NHM ends ============
   892                          ; *************** function _CRC8Check *****************
   893                          ; Defined at:
   894                          ;		line 136 in file "./si7020.c"
   895                          ; Parameters:
   896                          ;		None
   897                          ; Auto variables:
   898                          ;		None
   899                          ; Return value:
   900                          ;		type: unsigned char 
   901                          ;		size: 1
   902                          ; Registers used:
   903                          ;		a, x, CUR_PP
   904                          ; Tracked objects:
   905                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   906                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
   907                          ;		Unchanged: MVR_PP MVW_PP 
   908                          ; Data sizes:
   909                          ;		Autos:    0
   910                          ;		Params:   0
   911                          ;		Temp:     0
   912                          ;		Total:    0
   913                          ; This function calls:
   914                          ;		_LeftRotate
   915                          ; This function is called by:
   916                          ;		_main
   917                          ; This function uses a non-reentrant model
   918                          ; 
   919  002A                    __size_of_CRC8Check	equ	__end_of_CRC8Check-_CRC8Check
   920                          ;si7020.c: 135: unsigned char CRC8Check()
   921                          ;si7020.c: 136: {
   922                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   923  3372                    _CRC8Check:
   924                          ;si7020.c: 137: while(1)
   925                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
   926  3372                    l162:
   927                          ;si7020.c: 138: {
   928                          ;si7020.c: 139: if(RecBuf[0]&0x80)
   929  3372  3C 4C  80         	cmp	[_RecBuf^0], 128
   930  3375  C00F              	jc	l164
   931                          ;si7020.c: 140: {
   932                          ;si7020.c: 141: RecBuf[0] ^= poly_h;
   933  3377  36 4C  98         	xor	[_RecBuf^0], 0x98
   934                          ;si7020.c: 142: RecBuf[1] ^= poly_l;
   935  337A  36 4D  80         	xor	[(_RecBuf+1)^0], 0x80
   936                          ;si7020.c: 143: LeftRotate();
   937  337D  71 80             	or	f, 0x80	;select multiple RAM page mode
   938  337F  7C 34E0           	call	_LeftRotate
   939                          ;si7020.c: 144: }
   940  3382  7D 338A           	jmp	l165
   941                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   942  3385                    l164:
   943                          ;si7020.c: 145: else
   944                          ;si7020.c: 146: {
   945                          ;si7020.c: 147: LeftRotate();
   946  3385  71 80             	or	f, 0x80	;select multiple RAM page mode
   947  3387  7C 34E0           	call	_LeftRotate
   948                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   949  338A                    l165:
   950                          ;si7020.c: 148: }
   951                          ;si7020.c: 150: if(data_length <= 8)
   952  338A  3C 5B  09         	cmp	[_data_length^0], 9
   953  338D  DFE4              	jnc	l162
   954                          ;si7020.c: 151: break;
   955                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   956                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   957                          ;si7020.c: 152: }
   958                          ;si7020.c: 154: data_length = 24;
   959  338F  55 5B  18         	mov	[_data_length^0], 24
   960                          ;si7020.c: 156: if(!RecBuf[0])
   961  3392  51 4C             	mov	a, [_RecBuf^0]
   962  3394  B004              	jnz	l167
   963                          ;si7020.c: 157: {
   964                          ;si7020.c: 158: return 1;
   965  3396  50 01             	mov	a, 1
   966  3398  7F                	ret
   967                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   968  3399                    l167:
   969                          ;si7020.c: 160: else
   970                          ;si7020.c: 161: {
   971                          ;si7020.c: 162: return 0;
   972  3399  50 00             	mov	a, 0
   973                          ;si7020.c: 163: }
   974                          ;si7020.c: 164: }
   975                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
   976  339B  7F                	ret
   977  339C                    __end_of_CRC8Check:
   978                          ; =============== function _CRC8Check ends ============
   979                          ; *************** function _Si7020CalcRH *****************
   980                          ; Defined at:
   981                          ;		line 77 in file "./si7020.c"
   982                          ; Parameters:
   983                          ;		data        	reg:   xa	type: unsigned int 
   984                          ; Auto variables:
   985                          ;		data        	       	type: unsigned int 
   986                          ;		temp        	       	type: unsigned long 
   987                          ;		result      	       	type: unsigned char 
   988                          ; Return value:
   989                          ;		type: unsigned char 
   990                          ;		size: 1
   991                          ; Registers used:
   992                          ;		a, x, CUR_PP, mret
   993                          ; Tracked objects:
   994                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
   995                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
   996                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
   997                          ; Data sizes:
   998                          ;		Autos:    7
   999                          ;		Params:   0
  1000                          ;		Temp:     0
  1001                          ;		Total:    7
  1002                          ; This function calls:
  1003                          ;		___lmul
  1004                          ; This function is called by:
  1005                          ;		_main
  1006                          ; This function uses a non-reentrant model
  1007                          ; 
  1008  0093                    __size_of_Si7020CalcRH	equ	__end_of_Si7020CalcRH-_Si7020CalcRH
  1009                          ;si7020.c: 76: unsigned char Si7020CalcRH(unsigned int data)
  1010                          ;si7020.c: 77: {
  1011                          ;			CUR_PP=0 XIO=0 PG=2 
  1012  339C                    _Si7020CalcRH:
  1013                          ;Si7020CalcRH@data stored from xa
  1014  339C  53 5F             	mov	[(??_Si7020CalcRH^0+1)], a
  1015  339E  5A 5E             	mov	[??_Si7020CalcRH^0], x
  1016                          ;si7020.c: 78: unsigned long temp;
  1017                          ;si7020.c: 79: unsigned char result;
  1018                          ;si7020.c: 80: temp = data;
  1019  33A0  5F 63  5F         	mov	[(??_Si7020CalcRH+5)^0], [(??_Si7020CalcRH+1)^0]
  1020  33A3  5F 62  5E         	mov	[(??_Si7020CalcRH+4)^0], [??_Si7020CalcRH^0]
  1021  33A6  55 61  00         	mov	[(??_Si7020CalcRH+3)^0], 0
  1022  33A9  55 60  00         	mov	[(??_Si7020CalcRH+2)^0], 0
  1023                          ;si7020.c: 81: temp = 125*temp;
  1024  33AC  5F 69  60         	mov	[?___lmul^0], [(??_Si7020CalcRH+2)^0]
  1025  33AF  5F 6A  61         	mov	[(?___lmul+1)^0], [(??_Si7020CalcRH+3)^0]
  1026  33B2  5F 6B  62         	mov	[(?___lmul+2)^0], [(??_Si7020CalcRH+4)^0]
  1027  33B5  5F 6C  63         	mov	[(?___lmul+3)^0], [(??_Si7020CalcRH+5)^0]
  1028  33B8  55 6D  00         	mov	[(?___lmul+4)^0], 0
  1029  33BB  55 6E  00         	mov	[((?___lmul+4)^0+1)], 0
  1030  33BE  55 6F  00         	mov	[((?___lmul+4)^0+2)], 0
  1031  33C1  55 70  7D         	mov	[((?___lmul+4)^0+3)], 125
  1032  33C4  7C 350C           	call	___lmul
  1033  33C7  5F 60  69         	mov	[(??_Si7020CalcRH+2)^0], [?___lmul^0]
  1034  33CA  5F 61  6A         	mov	[(??_Si7020CalcRH+3)^0], [(?___lmul+1)^0]
  1035  33CD  5F 62  6B         	mov	[(??_Si7020CalcRH+4)^0], [(?___lmul+2)^0]
  1036  33D0  5F 63  6C         	mov	[(??_Si7020CalcRH+5)^0], [(?___lmul+3)^0]
  1037                          ;si7020.c: 82: temp >>= 16;
  1038  33D3  50 10             	mov	a, 16
  1039  33D5  70 FB             	and	f, 0xFB
  1040  33D7                    u304:
  1041  33D7  6E 60             	rrc	[(??_Si7020CalcRH+2)^0]
  1042  33D9  6E 61             	rrc	[((??_Si7020CalcRH+2)^0+1)]
  1043  33DB  6E 62             	rrc	[((??_Si7020CalcRH+2)^0+2)]
  1044  33DD  6E 63             	rrc	[((??_Si7020CalcRH+2)^0+3)]
  1045  33DF  78                	dec	a
  1046  33E0  BFF6              	jnz	u304
  1047                          ;si7020.c: 83: if (temp >= 6)
  1048  33E2  3C 63  06         	cmp	[((??_Si7020CalcRH+2)^0+3)], 6
  1049  33E5  51 62             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
  1050  33E7  19 00             	sbb	a, 0
  1051  33E9  51 61             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
  1052  33EB  19 00             	sbb	a, 0
  1053  33ED  51 60             	mov	a, [(??_Si7020CalcRH+2)^0]
  1054  33EF  19 00             	sbb	a, 0
  1055  33F1  C030              	jc	l146
  1056                          ;si7020.c: 84: {
  1057                          ;si7020.c: 85: if (temp >= 106)
  1058  33F3  3C 63  6A         	cmp	[((??_Si7020CalcRH+2)^0+3)], 106
  1059  33F6  51 62             	mov	a, [((??_Si7020CalcRH+2)^0+2)]
  1060  33F8  19 00             	sbb	a, 0
  1061  33FA  51 61             	mov	a, [((??_Si7020CalcRH+2)^0+1)]
  1062  33FC  19 00             	sbb	a, 0
  1063  33FE  51 60             	mov	a, [(??_Si7020CalcRH+2)^0]
  1064  3400  19 00             	sbb	a, 0
  1065  3402  C010              	jc	l147
  1066                          ;si7020.c: 86: {
  1067                          ;si7020.c: 87: temp = 100;
  1068  3404  55 60  00         	mov	[(??_Si7020CalcRH+2)^0], 0
  1069  3407  55 61  00         	mov	[((??_Si7020CalcRH+2)^0+1)], 0
  1070  340A  55 62  00         	mov	[((??_Si7020CalcRH+2)^0+2)], 0
  1071  340D  55 63  64         	mov	[((??_Si7020CalcRH+2)^0+3)], 100
  1072                          ;si7020.c: 88: }
  1073  3410  7D 342C           	jmp	l149
  1074                          ;			CUR_PP=0 XIO=0 
  1075  3413                    l147:
  1076                          ;si7020.c: 89: else
  1077                          ;si7020.c: 90: {
  1078                          ;si7020.c: 91: temp -= 6;
  1079  3413  16 63  06         	sub	[((??_Si7020CalcRH+2)^0+3)], 6
  1080  3416  1E 62  00         	sbb	[((??_Si7020CalcRH+2)^0+2)], 0
  1081  3419  1E 61  00         	sbb	[((??_Si7020CalcRH+2)^0+1)], 0
  1082  341C  1E 60  00         	sbb	[(??_Si7020CalcRH+2)^0], 0
  1083                          ;			CUR_PP=0 XIO=0 
  1084                          ;si7020.c: 92: }
  1085                          ;si7020.c: 93: }
  1086  341F  7D 342C           	jmp	l149
  1087                          ;			CUR_PP=0 XIO=0 
  1088  3422                    l146:
  1089                          ;si7020.c: 94: else
  1090                          ;si7020.c: 95: {
  1091                          ;si7020.c: 96: temp = 0;
  1092  3422  50 00             	mov	a, 0
  1093  3424  53 60             	mov	[(??_Si7020CalcRH+2)^0], a
  1094  3426  53 61             	mov	[((??_Si7020CalcRH+2)^0+1)], a
  1095  3428  53 62             	mov	[((??_Si7020CalcRH+2)^0+2)], a
  1096  342A  53 63             	mov	[((??_Si7020CalcRH+2)^0+3)], a
  1097                          ;			CUR_PP=0 XIO=0 
  1098  342C                    l149:
  1099                          ;si7020.c: 97: }
  1100                          ;si7020.c: 99: result = temp;
  1101  342C  51 63             	mov	a, [(??_Si7020CalcRH+5)^0]
  1102                          ;si7020.c: 100: return result;
  1103                          ;si7020.c: 101: }
  1104                          ;			CUR_PP=0 XIO=0 
  1105  342E  7F                	ret
  1106  342F                    __end_of_Si7020CalcRH:
  1107                          ; =============== function _Si7020CalcRH ends ============
  1108                          ; *************** function _LED_Init *****************
  1109                          ; Defined at:
  1110                          ;		line 171 in file "./led.c"
  1111                          ; Parameters:
  1112                          ;		None
  1113                          ; Auto variables:
  1114                          ;		None
  1115                          ; Return value:
  1116                          ;		type: void 
  1117                          ;		size: 0
  1118                          ; Registers used:
  1119                          ;		CUR_PP
  1120                          ; Tracked objects:
  1121                          ;		On entry : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1122                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1123                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1124                          ; Data sizes:
  1125                          ;		Autos:    0
  1126                          ;		Params:   0
  1127                          ;		Temp:     0
  1128                          ;		Total:    0
  1129                          ; This function calls:
  1130                          ;		Nothing
  1131                          ; This function is called by:
  1132                          ;		_main
  1133                          ; This function uses a non-reentrant model
  1134                          ; 
  1135  001F                    __size_of_LED_Init	equ	__end_of_LED_Init-_LED_Init
  1136                          ;led.c: 170: void LED_Init()
  1137                          ;led.c: 171: {
  1138                          ;			XIO=0 PG=2 
  1139  342F                    _LED_Init:
  1140                          ;led.c: 173: DisplayContent[0] = ~(0X0004 + 0X0008 + 0X2000);
  1141  342F  62 D0 00          	mov	reg[208], 0
  1142  3432  55 28  DF         	mov	[_DisplayContent^0], 223
  1143  3435  55 29  F3         	mov	[(_DisplayContent^0+1)], 243
  1144                          ;led.c: 174: DisplayContent[1] = ~(0X0002 + 0X0004 + 0X0008 + 0X1000);
  1145  3438  55 2A  EF         	mov	[(_DisplayContent+2)^0], 239
  1146  343B  55 2B  F1         	mov	[((_DisplayContent+2)^0+1)], 241
  1147                          ;led.c: 175: DisplayContent[2] = ~(0X8000 + 0X0001 + 0X1000 + 0X0002 + 0X0004 + 0X0008);
  1148  343E  55 2C  6F         	mov	[(_DisplayContent+4)^0], 111
  1149  3441  55 2D  F0         	mov	[((_DisplayContent+4)^0+1)], 240
  1150                          ;led.c: 176: DisplayContent[3] = ~(0X0001 + 0X1000 + 0X0002 + 0X0004 + 0X0008);
  1151  3444  55 2E  EF         	mov	[(_DisplayContent+6)^0], 239
  1152  3447  55 2F  F0         	mov	[((_DisplayContent+6)^0+1)], 240
  1153                          ;led.c: 177: DisplayExchangeTimer = 40;
  1154  344A  55 59  28         	mov	[_DisplayExchangeTimer^0], 40
  1155                          ;led.c: 178: }
  1156                          ;			CUR_PP=0 XIO=0 PG=2 
  1157  344D  7F                	ret
  1158  344E                    __end_of_LED_Init:
  1159                          ; =============== function _LED_Init ends ============
  1160                          ; *************** function _Init_IIC *****************
  1161                          ; Defined at:
  1162                          ;		line 22 in file "./software_iic.c"
  1163                          ; Parameters:
  1164                          ;		None
  1165                          ; Auto variables:
  1166                          ;		None
  1167                          ; Return value:
  1168                          ;		type: void 
  1169                          ;		size: 0
  1170                          ; Registers used:
  1171                          ;		None
  1172                          ; Tracked objects:
  1173                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1174                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1175                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1176                          ; Data sizes:
  1177                          ;		Autos:    0
  1178                          ;		Params:   0
  1179                          ;		Temp:     0
  1180                          ;		Total:    0
  1181                          ; This function calls:
  1182                          ;		Nothing
  1183                          ; This function is called by:
  1184                          ;		_main
  1185                          ; This function uses a non-reentrant model
  1186                          ; 
  1187  0011                    __size_of_Init_IIC	equ	__end_of_Init_IIC-_Init_IIC
  1188                          ;software_iic.c: 21: void Init_IIC(void)
  1189                          ;software_iic.c: 22: {
  1190                          ;			CUR_PP=0 XIO=0 PG=2 
  1191  344E                    _Init_IIC:
  1192                          ;software_iic.c: 24: PRT1DM2 |= (0x20 + 0x80);
  1193  344E  43 07 A0          	or	reg[7], 0xA0
  1194                          ;software_iic.c: 25: PRT1DM1 |= (0x20 + 0x80);
  1195  3451  71 10             	or	f, 0x10	; select config register space
  1196  3453  43 05 A0          	or	reg[5], 0xA0
  1197                          ;software_iic.c: 26: PRT1DM0 |= (0x20 + 0x80);
  1198  3456  43 04 A0          	or	reg[4], 0xA0
  1199                          ;software_iic.c: 27: PRT1DR |= (0x20 + 0x80);
  1200  3459  70 CF             	and	f, 0xCF	;select user reg space
  1201  345B  43 04 A0          	or	reg[4], 0xA0
  1202                          ;software_iic.c: 28: }
  1203                          ;			CUR_PP=0 XIO=0 PG=2 
  1204  345E  7F                	ret
  1205  345F                    __end_of_Init_IIC:
  1206                          ; =============== function _Init_IIC ends ============
  1207                          ; *************** function _IRcvBytes *****************
  1208                          ; Defined at:
  1209                          ;		line 306 in file "./software_iic.c"
  1210                          ; Parameters:
  1211                          ;		sla         	reg:    a	type: unsigned char 
  1212                          ;		s           	reg:    x	type: PTR unsigned char ; Largest target is 5
  1213                          ;		 -> RecBuf(5), 
  1214                          ;		no          	offs:   0	type: unsigned char 
  1215                          ; Auto variables:
  1216                          ;		s           	       	type: PTR unsigned char ; Largest target is 5
  1217                          ;		 -> RecBuf(5), 
  1218                          ;		sla         	       	type: unsigned char 
  1219                          ;		i           	       	type: unsigned char 
  1220                          ; Return value:
  1221                          ;		type: unsigned char 
  1222                          ;		size: 1
  1223                          ; Registers used:
  1224                          ;		a, x, CUR_PP
  1225                          ; Tracked objects:
  1226                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1227                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1228                          ;		Unchanged: MVR_PP MVW_PP 
  1229                          ; Data sizes:
  1230                          ;		Autos:    3
  1231                          ;		Params:   1
  1232                          ;		Temp:     2
  1233                          ;		Total:    6
  1234                          ; This function calls:
  1235                          ;		_Start_I2c
  1236                          ;		_SendByte
  1237                          ;		_Stop_I2c
  1238                          ;		_RcvByte
  1239                          ;		_Ack_I2c
  1240                          ; This function is called by:
  1241                          ;		_Si7020Read_RH_NHM
  1242                          ;		_Si7020Read_Temp_after_RHM
  1243                          ; This function uses a non-reentrant model
  1244                          ; 
  1245  0070                    __size_of_IRcvBytes	equ	__end_of_IRcvBytes-_IRcvBytes
  1246                          ;software_iic.c: 305: unsigned char IRcvBytes(unsigned char sla,unsigned char *s,unsigned char no)
  1247                          ;software_iic.c: 306: {
  1248                          ;			CUR_PP=0 XIO=0 PG=2 
  1249  345F                    _IRcvBytes:
  1250                          ;IRcvBytes@sla stored from a
  1251  345F  53 62             	mov	[(??_IRcvBytes+1)^0], a
  1252                          ;IRcvBytes@s stored from x
  1253  3461  5A 61             	mov	[??_IRcvBytes^0], x
  1254                          ;software_iic.c: 307: unsigned char i;
  1255                          ;software_iic.c: 309: Start_I2c();
  1256  3463  7C 3ABF           	call	_Start_I2c
  1257                          ;software_iic.c: 310: SendByte(sla+1);
  1258  3466  50 01             	mov	a, 1
  1259  3468  02 62             	add	a, [(??_IRcvBytes+1)^0]
  1260  346A  71 80             	or	f, 0x80	;select multiple RAM page mode
  1261  346C  7C 3A45           	call	_SendByte
  1262                          ;software_iic.c: 311: if(ack==0)
  1263  346F  51 4B             	mov	a, [_ack^0]
  1264  3471  B009              	jnz	l215
  1265                          ;software_iic.c: 312: {
  1266                          ;software_iic.c: 313: Stop_I2c();
  1267  3473  71 80             	or	f, 0x80	;select multiple RAM page mode
  1268  3475  7C 3AE4           	call	_Stop_I2c
  1269                          ;software_iic.c: 314: return(0);
  1270  3478  50 00             	mov	a, 0
  1271  347A  7F                	ret
  1272                          ;			CUR_PP=0 XIO=0 
  1273  347B                    l215:
  1274                          ;software_iic.c: 315: }
  1275                          ;software_iic.c: 316: for(i=0;i<no-1;i++)
  1276  347B  55 63  00         	mov	[(??_IRcvBytes+2)^0], 0
  1277  347E  7D 3498           	jmp	l219
  1278                          ;			CUR_PP=0 XIO=0 
  1279  3481                    l216:
  1280                          ;software_iic.c: 317: {
  1281                          ;software_iic.c: 318: *s=RcvByte();
  1282  3481  71 80             	or	f, 0x80	;select multiple RAM page mode
  1283  3483  7C 3932           	call	_RcvByte
  1284  3486  58 61             	mov	x, [??_IRcvBytes^0]
  1285  3488  62 D3 00          	mov	reg[211], 0
  1286  348B  54 00             	mov	[x+0], a
  1287                          ;software_iic.c: 319: Ack_I2c(0);
  1288  348D  50 00             	mov	a, 0
  1289  348F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1290  3491  7C 397A           	call	_Ack_I2c
  1291                          ;software_iic.c: 320: s++;
  1292  3494  76 61             	inc	[??_IRcvBytes^0]
  1293  3496  76 63             	inc	[(??_IRcvBytes+2)^0]
  1294                          ;			CUR_PP=0 XIO=0 
  1295  3498                    l219:
  1296  3498  5F 65  60         	mov	[(??_IRcvBytes^0+4)], [?_IRcvBytes^0]
  1297  349B  55 64  00         	mov	[(??_IRcvBytes^0+3)], 0
  1298  349E  06 65  FF         	add	[(??_IRcvBytes^0+4)], 255
  1299  34A1  0E 64  FF         	adc	[(??_IRcvBytes^0+3)], 255
  1300  34A4  51 64             	mov	a, [(??_IRcvBytes^0+3)]
  1301  34A6  31 80             	xor	a, 0x80
  1302  34A8  39 80             	cmp	a, 128
  1303  34AA  72 04             	xor	f, 4
  1304  34AC  B005              	jnz	u323
  1305  34AE  51 63             	mov	a, [(??_IRcvBytes+2)^0]
  1306  34B0  3A 65             	cmp	a, [(??_IRcvBytes^0+4)]
  1307  34B2                    u323:
  1308  34B2  CFCE              	jc	l216
  1309                          ;			CUR_PP=0 XIO=0 
  1310                          ;software_iic.c: 321: }
  1311                          ;software_iic.c: 322: *s=RcvByte();
  1312  34B4  71 80             	or	f, 0x80	;select multiple RAM page mode
  1313  34B6  7C 3932           	call	_RcvByte
  1314  34B9  58 61             	mov	x, [??_IRcvBytes^0]
  1315  34BB  62 D3 00          	mov	reg[211], 0
  1316  34BE  54 00             	mov	[x+0], a
  1317                          ;software_iic.c: 323: Ack_I2c(1);
  1318  34C0  50 01             	mov	a, 1
  1319  34C2  71 80             	or	f, 0x80	;select multiple RAM page mode
  1320  34C4  7C 397A           	call	_Ack_I2c
  1321                          ;software_iic.c: 324: Stop_I2c();
  1322  34C7  71 80             	or	f, 0x80	;select multiple RAM page mode
  1323  34C9  7C 3AE4           	call	_Stop_I2c
  1324                          ;software_iic.c: 325: return(1);
  1325  34CC  50 01             	mov	a, 1
  1326                          ;software_iic.c: 326: }
  1327                          ;			CUR_PP=0 XIO=0 
  1328  34CE  7F                	ret
  1329  34CF                    __end_of_IRcvBytes:
  1330                          ; =============== function _IRcvBytes ends ============
  1331                          ; *************** function _Num2Char *****************
  1332                          ; Defined at:
  1333                          ;		line 5 in file "./boardcommunication.c"
  1334                          ; Parameters:
  1335                          ;		num         	reg:    a	type: unsigned char 
  1336                          ; Auto variables:
  1337                          ;		num         	       	type: unsigned char 
  1338                          ; Return value:
  1339                          ;		type: unsigned char 
  1340                          ;		size: 1
  1341                          ; Registers used:
  1342                          ;		a, CUR_PP
  1343                          ; Tracked objects:
  1344                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1345                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1346                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1347                          ; Data sizes:
  1348                          ;		Autos:    1
  1349                          ;		Params:   0
  1350                          ;		Temp:     0
  1351                          ;		Total:    1
  1352                          ; This function calls:
  1353                          ;		Nothing
  1354                          ; This function is called by:
  1355                          ;		_UartPutHexByte
  1356                          ;		_UartPutHexWord
  1357                          ; This function uses a non-reentrant model
  1358                          ; 
  1359  0011                    __size_of_Num2Char	equ	__end_of_Num2Char-_Num2Char
  1360                          ;boardcommunication.c: 4: unsigned char Num2Char(unsigned char num)
  1361                          ;boardcommunication.c: 5: {
  1362                          ;			CUR_PP=0 XIO=0 PG=2 
  1363  34CF                    _Num2Char:
  1364                          ;Num2Char@num stored from a
  1365  34CF  53 66             	mov	[??_Num2Char^0], a
  1366                          ;boardcommunication.c: 6: if (num > 9)
  1367  34D1  3C 66  0A         	cmp	[??_Num2Char^0], 10
  1368  34D4  C006              	jc	l2
  1369                          ;boardcommunication.c: 7: return (num-10+'A');
  1370  34D6  50 37             	mov	a, 55
  1371  34D8  02 66             	add	a, [??_Num2Char^0]
  1372  34DA  7F                	ret
  1373                          ;			CUR_PP=0 XIO=0 PG=2 
  1374  34DB                    l2:
  1375                          ;boardcommunication.c: 8: else
  1376                          ;boardcommunication.c: 9: return (num + '0');
  1377  34DB  50 30             	mov	a, 48
  1378  34DD  02 66             	add	a, [??_Num2Char^0]
  1379                          ;boardcommunication.c: 10: }
  1380                          ;			CUR_PP=0 XIO=0 PG=2 
  1381  34DF  7F                	ret
  1382  34E0                    __end_of_Num2Char:
  1383                          ; =============== function _Num2Char ends ============
  1384                          ; *************** function _LeftRotate *****************
  1385                          ; Defined at:
  1386                          ;		line 122 in file "./si7020.c"
  1387                          ; Parameters:
  1388                          ;		None
  1389                          ; Auto variables:
  1390                          ;		k           	       	type: unsigned char 
  1391                          ; Return value:
  1392                          ;		type: void 
  1393                          ;		size: 0
  1394                          ; Registers used:
  1395                          ;		a, x, CUR_PP
  1396                          ; Tracked objects:
  1397                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  1398                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  1399                          ;		Unchanged: MVR_PP MVW_PP 
  1400                          ; Data sizes:
  1401                          ;		Autos:    2
  1402                          ;		Params:   0
  1403                          ;		Temp:     0
  1404                          ;		Total:    2
  1405                          ; This function calls:
  1406                          ;		Nothing
  1407                          ; This function is called by:
  1408                          ;		_CRC8Check
  1409                          ; This function uses a non-reentrant model
  1410                          ; 
  1411  002C                    __size_of_LeftRotate	equ	__end_of_LeftRotate-_LeftRotate
  1412                          ;si7020.c: 121: void LeftRotate()
  1413                          ;si7020.c: 122: {
  1414                          ;			CUR_PP=0 PG=2 
  1415  34E0                    _LeftRotate:
  1416                          ;si7020.c: 123: unsigned char k;
  1417                          ;si7020.c: 124: for(k=0;k<3;k++)
  1418  34E0  57 00             	mov	x, 0
  1419                          ;			
  1420  34E2                    l156:
  1421                          ;si7020.c: 125: {
  1422                          ;si7020.c: 126: RecBuf[k] <<= 1;
  1423  34E2  70 CF             	and	f, 0xCF	;select user reg space
  1424  34E4  62 D3 00          	mov	reg[211], 0
  1425  34E7  66 4C             	asl	[x+_RecBuf]
  1426                          ;si7020.c: 127: if(k < 2)
  1427  34E9  5B                	mov	a, x
  1428  34EA  39 02             	cmp	a, 2
  1429  34EC  D013              	jnc	l159
  1430                          ;si7020.c: 128: {
  1431                          ;si7020.c: 129: RecBuf[k] |= (RecBuf[k+1]&0x80)?1:0;
  1432  34EE  62 D0 00          	mov	reg[208], 0
  1433  34F1  55 5F  00         	mov	[(??_LeftRotate+1)^0], 0
  1434  34F4  3D 4D  80         	cmp	[x+_RecBuf+1], 128
  1435  34F7  C004              	jc	l500002302
  1436  34F9  55 5F  01         	mov	[(??_LeftRotate+1)^0], 1
  1437                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1438  34FC                    l500002302:
  1439  34FC  51 5F             	mov	a, [(??_LeftRotate+1)^0]
  1440  34FE  2D 4C             	or	[x+_RecBuf], a
  1441                          ;			IDX_PP=0 XIO=0 
  1442  3500                    l159:
  1443  3500  75                	inc	x
  1444  3501  5B                	mov	a, x
  1445  3502  39 03             	cmp	a, 3
  1446  3504  CFDD              	jc	l156
  1447                          ;			IDX_PP=0 XIO=0 
  1448                          ;si7020.c: 130: }
  1449                          ;si7020.c: 131: }
  1450                          ;si7020.c: 132: data_length --;
  1451  3506  62 D0 00          	mov	reg[208], 0
  1452  3509  7A 5B             	dec	[_data_length^0]
  1453                          ;si7020.c: 133: }
  1454                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1455  350B  7F                	ret
  1456  350C                    __end_of_LeftRotate:
  1457                          ; =============== function _LeftRotate ends ============
  1458                          ; *************** function ___lmul *****************
  1459                          ; Defined at:
  1460                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lmul.c"
  1461                          ; Parameters:
  1462                          ;		multiplier  	offs:   0	type: unsigned long 
  1463                          ;		multiplicand	offs:   4	type: unsigned long 
  1464                          ; Auto variables:
  1465                          ;		product     	       	type: unsigned long 
  1466                          ; Return value:
  1467                          ;		type: unsigned long 
  1468                          ;		size: 4
  1469                          ; Registers used:
  1470                          ;		a, CUR_PP
  1471                          ; Tracked objects:
  1472                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1473                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1474                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1475                          ; Data sizes:
  1476                          ;		Autos:    4
  1477                          ;		Params:   8
  1478                          ;		Temp:     0
  1479                          ;		Total:   12
  1480                          ; This function calls:
  1481                          ;		Nothing
  1482                          ; This function is called by:
  1483                          ;		_Si7020CalcTemp
  1484                          ;		_Si7020CalcRH
  1485                          ; This function uses a non-reentrant model
  1486                          ; 
  1487  0048                    __size_of___lmul	equ	__end_of___lmul-___lmul
  1488                          ;lmul.c: 1: unsigned long
  1489                          ;lmul.c: 2: __lmul(unsigned long multiplier, unsigned long multiplicand)
  1490                          ;lmul.c: 3: {
  1491                          ;			CUR_PP=0 XIO=0 PG=2 
  1492  350C                    ___lmul:
  1493                          ;lmul.c: 4: unsigned long product = 0;
  1494  350C  50 00             	mov	a, 0
  1495  350E  53 71             	mov	[??___lmul^0], a
  1496  3510  53 72             	mov	[(??___lmul^0+1)], a
  1497  3512  53 73             	mov	[(??___lmul^0+2)], a
  1498  3514  53 74             	mov	[(??___lmul^0+3)], a
  1499                          ;lmul.c: 6: do {
  1500                          ;			CUR_PP=0 XIO=0 
  1501  3516                    l322:
  1502                          ;lmul.c: 7: if(multiplier & 1)
  1503  3516  47 6C  01         	tst	[(?___lmul+3)^0], 1
  1504  3519  A011              	jz	l323
  1505                          ;lmul.c: 8: product += multiplicand;
  1506  351B  51 70             	mov	a, [((?___lmul+4)^0+3)]
  1507  351D  04 74             	add	[(??___lmul^0+3)], a
  1508  351F  51 6F             	mov	a, [((?___lmul+4)^0+2)]
  1509  3521  0C 73             	adc	[(??___lmul^0+2)], a
  1510  3523  51 6E             	mov	a, [((?___lmul+4)^0+1)]
  1511  3525  0C 72             	adc	[(??___lmul^0+1)], a
  1512  3527  51 6D             	mov	a, [(?___lmul+4)^0]
  1513  3529  0C 71             	adc	[??___lmul^0], a
  1514                          ;			CUR_PP=0 XIO=0 
  1515  352B                    l323:
  1516                          ;lmul.c: 9: multiplicand <<= 1;
  1517  352B  65 70             	asl	[((?___lmul+4)^0+3)]
  1518  352D  6B 6F             	rlc	[((?___lmul+4)^0+2)]
  1519  352F  6B 6E             	rlc	[((?___lmul+4)^0+1)]
  1520  3531  6B 6D             	rlc	[(?___lmul+4)^0]
  1521                          ;lmul.c: 10: multiplier >>= 1;
  1522  3533  70 FB             	and	f, 0xFB
  1523  3535  6E 69             	rrc	[?___lmul^0]
  1524  3537  6E 6A             	rrc	[(?___lmul^0+1)]
  1525  3539  6E 6B             	rrc	[(?___lmul^0+2)]
  1526  353B  6E 6C             	rrc	[(?___lmul^0+3)]
  1527                          ;lmul.c: 11: } while(multiplier != 0);
  1528  353D  51 69             	mov	a, [?___lmul^0]
  1529  353F  2A 6A             	or	a, [(?___lmul^0+1)]
  1530  3541  2A 6B             	or	a, [(?___lmul^0+2)]
  1531  3543  2A 6C             	or	a, [(?___lmul^0+3)]
  1532  3545  BFD0              	jnz	l322
  1533                          ;			CUR_PP=0 XIO=0 
  1534  3547  5F 69  71         	mov	[?___lmul^0], [??___lmul^0]
  1535  354A  5F 6A  72         	mov	[(?___lmul+1)^0], [(??___lmul+1)^0]
  1536  354D  5F 6B  73         	mov	[(?___lmul+2)^0], [(??___lmul+2)^0]
  1537  3550  5F 6C  74         	mov	[(?___lmul+3)^0], [(??___lmul+3)^0]
  1538                          ;lmul.c: 13: }
  1539                          ;			CUR_PP=0 XIO=0 
  1540  3553  7F                	ret
  1541  3554                    __end_of___lmul:
  1542                          ; =============== function ___lmul ends ============
  1543                          ; *************** function _ShowPMxx *****************
  1544                          ; Defined at:
  1545                          ;		line 10 in file "./led.c"
  1546                          ; Parameters:
  1547                          ;		pm          	reg:   xa	type: unsigned int 
  1548                          ; Auto variables:
  1549                          ;		pm          	       	type: unsigned int 
  1550                          ;		temp        	       	type: unsigned int 
  1551                          ;		index       	       	type: unsigned int 
  1552                          ;		k           	       	type: unsigned char 
  1553                          ; Return value:
  1554                          ;		type: void 
  1555                          ;		size: 0
  1556                          ; Registers used:
  1557                          ;		a, x, TMP_DR0, CUR_PP
  1558                          ; Tracked objects:
  1559                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1560                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1561                          ;		Unchanged: MVR_PP MVW_PP 
  1562                          ; Data sizes:
  1563                          ;		Autos:    7
  1564                          ;		Params:   0
  1565                          ;		Temp:     1
  1566                          ;		Total:    8
  1567                          ; This function calls:
  1568                          ;		___lwdiv
  1569                          ;		___lwmod
  1570                          ; This function is called by:
  1571                          ;		_LED_Display
  1572                          ; This function uses a non-reentrant model
  1573                          ; 
  1574  0163                    __size_of_ShowPMxx	equ	__end_of_ShowPMxx-_ShowPMxx
  1575                          ;led.c: 8: unsigned char DisplayNum[3];
  1576                          ;led.c: 9: void ShowPMxx(unsigned int pm)
  1577                          ;led.c: 10: {
  1578                          ;			CUR_PP=0 XIO=0 PG=2 
  1579  3554                    _ShowPMxx:
  1580                          ;ShowPMxx@pm stored from xa
  1581  3554  53 5F             	mov	[(??_ShowPMxx^0+1)], a
  1582  3556  5A 5E             	mov	[??_ShowPMxx^0], x
  1583                          ;led.c: 11: unsigned int temp,index;
  1584                          ;led.c: 12: unsigned char k = 0;
  1585                          ;led.c: 14: temp = pm;
  1586  3558  5F 60  5E         	mov	[(??_ShowPMxx+2)^0], [??_ShowPMxx^0]
  1587  355B  5F 61  5F         	mov	[(??_ShowPMxx+3)^0], [(??_ShowPMxx+1)^0]
  1588                          ;led.c: 15: if(temp > 999)
  1589  355E  3C 60  03         	cmp	[(??_ShowPMxx+2)^0], 3
  1590  3561  B004              	jnz	u203
  1591  3563  3C 61  E8         	cmp	[((??_ShowPMxx+2)^0+1)], 232
  1592  3566                    u203:
  1593  3566  C007              	jc	l57
  1594                          ;led.c: 16: {
  1595                          ;led.c: 17: temp = 999;
  1596  3568  55 60  03         	mov	[(??_ShowPMxx+2)^0], 3
  1597  356B  55 61  E7         	mov	[((??_ShowPMxx+2)^0+1)], 231
  1598                          ;			CUR_PP=0 XIO=0 PG=2 
  1599  356E                    l57:
  1600                          ;led.c: 18: }
  1601                          ;led.c: 20: index = temp/100;
  1602  356E  55 66  00         	mov	[?___lwdiv^0], 0
  1603  3571  55 67  64         	mov	[(?___lwdiv^0+1)], 100
  1604  3574  51 61             	mov	a, [((??_ShowPMxx+2)^0+1)]
  1605  3576  58 60             	mov	x, [(??_ShowPMxx+2)^0]
  1606  3578  7C 39A6           	call	___lwdiv
  1607  357B  5A 62             	mov	[(??_ShowPMxx+4)^0], x
  1608  357D  53 63             	mov	[(??_ShowPMxx+5)^0], a
  1609                          ;led.c: 21: DisplayNum[0] = index;
  1610  357F  5F 38  63         	mov	[_DisplayNum^0], [(??_ShowPMxx+5)^0]
  1611                          ;led.c: 23: temp = temp%100;
  1612  3582  55 66  00         	mov	[?___lwmod^0], 0
  1613  3585  55 67  64         	mov	[(?___lwmod^0+1)], 100
  1614  3588  51 61             	mov	a, [((??_ShowPMxx+2)^0+1)]
  1615  358A  58 60             	mov	x, [(??_ShowPMxx+2)^0]
  1616  358C  71 80             	or	f, 0x80	;select multiple RAM page mode
  1617  358E  7C 3A09           	call	___lwmod
  1618  3591  5A 60             	mov	[(??_ShowPMxx+2)^0], x
  1619  3593  53 61             	mov	[(??_ShowPMxx+3)^0], a
  1620                          ;led.c: 24: index = temp/10;
  1621  3595  55 66  00         	mov	[?___lwdiv^0], 0
  1622  3598  55 67  0A         	mov	[(?___lwdiv^0+1)], 10
  1623  359B  51 61             	mov	a, [((??_ShowPMxx+2)^0+1)]
  1624  359D  58 60             	mov	x, [(??_ShowPMxx+2)^0]
  1625  359F  71 80             	or	f, 0x80	;select multiple RAM page mode
  1626  35A1  7C 39A6           	call	___lwdiv
  1627  35A4  5A 62             	mov	[(??_ShowPMxx+4)^0], x
  1628  35A6  53 63             	mov	[(??_ShowPMxx+5)^0], a
  1629                          ;led.c: 25: DisplayNum[1] = index;
  1630  35A8  5F 39  63         	mov	[(_DisplayNum+1)^0], [(??_ShowPMxx+5)^0]
  1631                          ;led.c: 27: index = temp%10;
  1632  35AB  55 66  00         	mov	[?___lwmod^0], 0
  1633  35AE  55 67  0A         	mov	[(?___lwmod^0+1)], 10
  1634  35B1  51 61             	mov	a, [((??_ShowPMxx+2)^0+1)]
  1635  35B3  58 60             	mov	x, [(??_ShowPMxx+2)^0]
  1636  35B5  71 80             	or	f, 0x80	;select multiple RAM page mode
  1637  35B7  7C 3A09           	call	___lwmod
  1638  35BA  5A 62             	mov	[(??_ShowPMxx+4)^0], x
  1639  35BC  53 63             	mov	[(??_ShowPMxx+5)^0], a
  1640                          ;led.c: 28: DisplayNum[2] = index;
  1641  35BE  5F 3A  63         	mov	[(_DisplayNum+2)^0], [(??_ShowPMxx+5)^0]
  1642                          ;led.c: 30: DisplayContent[0] = ~(0X8000 + 0X0001 + 0X2000 + 0X1000 + 0X0008);
  1643  35C1  55 28  4F         	mov	[_DisplayContent^0], 79
  1644  35C4  55 29  F6         	mov	[(_DisplayContent^0+1)], 246
  1645                          ;led.c: 31: DisplayContent[4] = ~(0X8000 + 0X0001 + 0X2000 + 0X1000 + 0X0008);
  1646  35C7  55 30  4F         	mov	[(_DisplayContent+8)^0], 79
  1647  35CA  55 31  F6         	mov	[((_DisplayContent+8)^0+1)], 246
  1648                          ;led.c: 33: k = 0;
  1649  35CD  57 00             	mov	x, 0
  1650                          ;led.c: 34: while (k<2)
  1651  35CF  7D 3638           	jmp	l58
  1652                          ;			CUR_PP=0 XIO=0 
  1653  35D2                    l59:
  1654                          ;ShowPMxx@k stored from x
  1655  35D2  5A 64             	mov	[(??_ShowPMxx+6)^0], x
  1656                          ;led.c: 35: {
  1657                          ;led.c: 36: if (DisplayNum[k])
  1658  35D4  62 D3 00          	mov	reg[211], 0
  1659  35D7  52 38             	mov	a, [x+_DisplayNum]
  1660  35D9  A047              	jz	l61
  1661                          ;led.c: 37: {
  1662                          ;led.c: 38: DisplayContent[k+1] = DigitArray[DisplayNum[k]];
  1663  35DB  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1664  35DD  01 38             	add	a, <(<_DisplayNum)
  1665  35DF  5C                	mov	x, a
  1666  35E0  52 00             	mov	a, [x+0]
  1667  35E2  64                	asl	a
  1668  35E3  01 00             	add	a, <_DigitArray
  1669  35E5  5C                	mov	x, a
  1670  35E6  50 3E             	mov	a, >_DigitArray
  1671  35E8  60 6C             	mov	reg[108], a
  1672  35EA  28                	romx
  1673  35EB  08                	push	a
  1674  35EC  75                	inc	x
  1675  35ED  5D 6C             	mov	a, reg[108]
  1676  35EF  28                	romx
  1677  35F0  08                	push	a
  1678  35F1  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1679  35F3  64                	asl	a
  1680  35F4  5C                	mov	x, a
  1681  35F5  18                	pop	a
  1682  35F6  54 2B             	mov	[x+_DisplayContent+3], a
  1683  35F8  18                	pop	a
  1684  35F9  54 2A             	mov	[x+_DisplayContent+2], a
  1685                          ;led.c: 39: DisplayContent[k+5] = DigitArray[DisplayNum[k]];
  1686  35FB  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1687  35FD  01 38             	add	a, <(<_DisplayNum)
  1688  35FF  5C                	mov	x, a
  1689  3600  52 00             	mov	a, [x+0]
  1690  3602  64                	asl	a
  1691  3603  01 00             	add	a, <_DigitArray
  1692  3605  5C                	mov	x, a
  1693  3606  50 3E             	mov	a, >_DigitArray
  1694  3608  60 6C             	mov	reg[108], a
  1695  360A  28                	romx
  1696  360B  08                	push	a
  1697  360C  75                	inc	x
  1698  360D  5D 6C             	mov	a, reg[108]
  1699  360F  28                	romx
  1700  3610  08                	push	a
  1701  3611  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1702  3613  64                	asl	a
  1703  3614  5C                	mov	x, a
  1704  3615  18                	pop	a
  1705  3616  54 33             	mov	[x+_DisplayContent+11], a
  1706  3618  18                	pop	a
  1707  3619  54 32             	mov	[x+_DisplayContent+10], a
  1708                          ; ShowPMxx@k loaded to x
  1709  361B  58 64             	mov	x, [(??_ShowPMxx+6)^0]
  1710                          ;led.c: 40: k++;
  1711  361D  75                	inc	x
  1712                          ;led.c: 41: break;
  1713  361E  7D 363D           	jmp	l60
  1714                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1715  3621                    l61:
  1716                          ;led.c: 43: else
  1717                          ;led.c: 44: {
  1718                          ;led.c: 45: DisplayContent[k+1] = 0xffff;
  1719  3621  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1720  3623  64                	asl	a
  1721  3624  5C                	mov	x, a
  1722  3625  56 2A  FF         	mov	[x+_DisplayContent+2], 255
  1723  3628  56 2B  FF         	mov	[x+_DisplayContent+3], 255
  1724                          ;led.c: 46: DisplayContent[k+5] = 0xffff;
  1725  362B  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1726  362D  64                	asl	a
  1727  362E  5C                	mov	x, a
  1728  362F  56 32  FF         	mov	[x+_DisplayContent+10], 255
  1729  3632  56 33  FF         	mov	[x+_DisplayContent+11], 255
  1730                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  1731                          ; ShowPMxx@k loaded to x
  1732  3635  58 64             	mov	x, [(??_ShowPMxx+6)^0]
  1733                          ;led.c: 47: }
  1734                          ;led.c: 48: k++;
  1735  3637  75                	inc	x
  1736                          ;			CUR_PP=0 XIO=0 
  1737  3638                    l58:
  1738  3638  5B                	mov	a, x
  1739  3639  39 02             	cmp	a, 2
  1740  363B  CF96              	jc	l59
  1741                          ;			CUR_PP=0 XIO=0 
  1742  363D                    l60:
  1743                          ;ShowPMxx@k stored from x
  1744  363D  5A 64             	mov	[(??_ShowPMxx+6)^0], x
  1745                          ;led.c: 49: }
  1746                          ;led.c: 51: for (;k<3;k++)
  1747  363F  5B                	mov	a, x
  1748  3640  39 03             	cmp	a, 3
  1749  3642  D04B              	jnc	l64
  1750                          ;			CUR_PP=0 XIO=0 
  1751  3644                    l63:
  1752                          ;led.c: 52: {
  1753                          ;led.c: 53: DisplayContent[k+1] = DigitArray[DisplayNum[k]];
  1754  3644  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1755  3646  01 38             	add	a, <(<_DisplayNum)
  1756  3648  5C                	mov	x, a
  1757  3649  62 D3 00          	mov	reg[211], 0
  1758  364C  52 00             	mov	a, [x+0]
  1759  364E  64                	asl	a
  1760  364F  01 00             	add	a, <_DigitArray
  1761  3651  5C                	mov	x, a
  1762  3652  50 3E             	mov	a, >_DigitArray
  1763  3654  60 6C             	mov	reg[108], a
  1764  3656  28                	romx
  1765  3657  08                	push	a
  1766  3658  75                	inc	x
  1767  3659  5D 6C             	mov	a, reg[108]
  1768  365B  28                	romx
  1769  365C  08                	push	a
  1770  365D  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1771  365F  64                	asl	a
  1772  3660  5C                	mov	x, a
  1773  3661  18                	pop	a
  1774  3662  54 2B             	mov	[x+_DisplayContent+3], a
  1775  3664  18                	pop	a
  1776  3665  54 2A             	mov	[x+_DisplayContent+2], a
  1777                          ;led.c: 54: DisplayContent[k+5] = DigitArray[DisplayNum[k]];
  1778  3667  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1779  3669  01 38             	add	a, <(<_DisplayNum)
  1780  366B  5C                	mov	x, a
  1781  366C  52 00             	mov	a, [x+0]
  1782  366E  64                	asl	a
  1783  366F  01 00             	add	a, <_DigitArray
  1784  3671  5C                	mov	x, a
  1785  3672  50 3E             	mov	a, >_DigitArray
  1786  3674  60 6C             	mov	reg[108], a
  1787  3676  28                	romx
  1788  3677  08                	push	a
  1789  3678  75                	inc	x
  1790  3679  5D 6C             	mov	a, reg[108]
  1791  367B  28                	romx
  1792  367C  08                	push	a
  1793  367D  51 64             	mov	a, [(??_ShowPMxx+6)^0]
  1794  367F  64                	asl	a
  1795  3680  5C                	mov	x, a
  1796  3681  18                	pop	a
  1797  3682  54 33             	mov	[x+_DisplayContent+11], a
  1798  3684  18                	pop	a
  1799  3685  54 32             	mov	[x+_DisplayContent+10], a
  1800  3687  76 64             	inc	[(??_ShowPMxx+6)^0]
  1801  3689  3C 64  03         	cmp	[(??_ShowPMxx+6)^0], 3
  1802  368C  CFB7              	jc	l63
  1803                          ;			CUR_PP=0 XIO=0 
  1804  368E                    l64:
  1805                          ;led.c: 55: }
  1806                          ;led.c: 57: if (pm <= 50)
  1807  368E  3C 5E  00         	cmp	[??_ShowPMxx^0], 0
  1808  3691  B004              	jnz	u213
  1809  3693  3C 5F  33         	cmp	[(??_ShowPMxx^0+1)], 51
  1810  3696                    u213:
  1811  3696  D008              	jnc	l66
  1812                          ;led.c: 58: {
  1813                          ;led.c: 59: IndexStart = 0;
  1814  3698  55 46  00         	mov	[_IndexStart^0], 0
  1815                          ;led.c: 60: IndexEnd = 4;
  1816  369B  55 5A  04         	mov	[_IndexEnd^0], 4
  1817                          ;led.c: 61: }
  1818  369E  7F                	ret
  1819                          ;			CUR_PP=0 XIO=0 
  1820  369F                    l66:
  1821                          ;led.c: 62: else
  1822                          ;led.c: 63: {
  1823                          ;led.c: 64: if (pm <= 150)
  1824  369F  3C 5E  00         	cmp	[??_ShowPMxx^0], 0
  1825  36A2  B004              	jnz	u223
  1826  36A4  3C 5F  97         	cmp	[(??_ShowPMxx^0+1)], 151
  1827  36A7                    u223:
  1828  36A7  D008              	jnc	l68
  1829                          ;led.c: 65: {
  1830                          ;led.c: 66: IndexStart = 0;
  1831  36A9  55 46  00         	mov	[_IndexStart^0], 0
  1832                          ;led.c: 67: IndexEnd = 8;
  1833  36AC  55 5A  08         	mov	[_IndexEnd^0], 8
  1834                          ;led.c: 68: }
  1835  36AF  7F                	ret
  1836                          ;			CUR_PP=0 XIO=0 
  1837  36B0                    l68:
  1838                          ;led.c: 69: else
  1839                          ;led.c: 70: {
  1840                          ;led.c: 71: IndexStart = 4;
  1841  36B0  55 46  04         	mov	[_IndexStart^0], 4
  1842                          ;led.c: 72: IndexEnd = 8;
  1843  36B3  55 5A  08         	mov	[_IndexEnd^0], 8
  1844                          ;			CUR_PP=0 XIO=0 
  1845                          ;			CUR_PP=0 XIO=0 
  1846                          ;led.c: 73: }
  1847                          ;led.c: 74: }
  1848                          ;led.c: 75: }
  1849                          ;			CUR_PP=0 XIO=0 
  1850  36B6  7F                	ret
  1851  36B7                    __end_of_ShowPMxx:
  1852                          ; =============== function _ShowPMxx ends ============
  1853                          ; *************** function ___wmul *****************
  1854                          ; Defined at:
  1855                          ;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\wmul.c"
  1856                          ; Parameters:
  1857                          ;		multiplier  	reg:   xa	type: unsigned int 
  1858                          ;		multiplicand	offs:   0	type: unsigned int 
  1859                          ; Auto variables:
  1860                          ;		multiplier  	       	type: unsigned int 
  1861                          ;		product     	       	type: unsigned int 
  1862                          ; Return value:
  1863                          ;		type: unsigned int 
  1864                          ;		size: 2
  1865                          ; Registers used:
  1866                          ;		a, x, CUR_PP
  1867                          ; Tracked objects:
  1868                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1869                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1870                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  1871                          ; Data sizes:
  1872                          ;		Autos:    4
  1873                          ;		Params:   2
  1874                          ;		Temp:     0
  1875                          ;		Total:    6
  1876                          ; This function calls:
  1877                          ;		Nothing
  1878                          ; This function is called by:
  1879                          ;		_Si7020CalcTemp
  1880                          ; This function uses a non-reentrant model
  1881                          ; 
  1882  002C                    __size_of___wmul	equ	__end_of___wmul-___wmul
  1883                          ;wmul.c: 1: unsigned int
  1884                          ;wmul.c: 2: __wmul(unsigned int multiplier, unsigned int multiplicand)
  1885                          ;wmul.c: 3: {
  1886                          ;			CUR_PP=0 XIO=0 PG=2 
  1887  36B7                    ___wmul:
  1888                          ;___wmul@multiplier stored from xa
  1889  36B7  53 6C             	mov	[(??___wmul^0+1)], a
  1890  36B9  5A 6B             	mov	[??___wmul^0], x
  1891                          ;wmul.c: 4: unsigned int product = 0;
  1892  36BB  55 6D  00         	mov	[(??___wmul+2)^0], 0
  1893  36BE  55 6E  00         	mov	[((??___wmul+2)^0+1)], 0
  1894                          ;wmul.c: 6: do {
  1895                          ;			CUR_PP=0 XIO=0 
  1896  36C1                    l243:
  1897                          ;wmul.c: 7: if(multiplier & 1)
  1898  36C1  47 6C  01         	tst	[(??___wmul+1)^0], 1
  1899  36C4  A009              	jz	l244
  1900                          ;wmul.c: 8: product += multiplicand;
  1901  36C6  51 6A             	mov	a, [(?___wmul^0+1)]
  1902  36C8  04 6E             	add	[((??___wmul+2)^0+1)], a
  1903  36CA  51 69             	mov	a, [?___wmul^0]
  1904  36CC  0C 6D             	adc	[(??___wmul+2)^0], a
  1905                          ;			CUR_PP=0 XIO=0 
  1906  36CE                    l244:
  1907                          ;wmul.c: 9: multiplicand <<= 1;
  1908  36CE  65 6A             	asl	[(?___wmul^0+1)]
  1909  36D0  6B 69             	rlc	[?___wmul^0]
  1910                          ;wmul.c: 10: multiplier >>= 1;
  1911  36D2  70 FB             	and	f, 0xFB
  1912  36D4  6E 6B             	rrc	[??___wmul^0]
  1913  36D6  6E 6C             	rrc	[(??___wmul^0+1)]
  1914                          ;wmul.c: 11: } while(multiplier != 0);
  1915  36D8  51 6B             	mov	a, [??___wmul^0]
  1916  36DA  2A 6C             	or	a, [(??___wmul^0+1)]
  1917  36DC  BFE4              	jnz	l243
  1918                          ;			CUR_PP=0 XIO=0 
  1919                          ;wmul.c: 12: return product;
  1920  36DE  51 6E             	mov	a, [((??___wmul+2)^0+1)]
  1921  36E0  58 6D             	mov	x, [(??___wmul+2)^0]
  1922                          ;wmul.c: 13: }
  1923                          ;			CUR_PP=0 XIO=0 
  1924  36E2  7F                	ret
  1925  36E3                    __end_of___wmul:
  1926                          ; =============== function ___wmul ends ============
  1927                          ; *************** function _UartPutConstStr *****************
  1928                          ; Defined at:
  1929                          ;		line 22 in file "./boardcommunication.c"
  1930                          ; Parameters:
  1931                          ;		str         	reg:   ax	type: PTR const unsigned char ; Largest target is 14
  1932                          ;		 -> STR_8(13), STR_7(9), STR_6(4), STR_5(14), 
  1933                          ;		 -> STR_4(7), STR_3(8), STR_2(7), STR_1(8), 
  1934                          ; Auto variables:
  1935                          ;		str         	       	type: PTR const unsigned char ; Largest target is 14
  1936                          ;		 -> STR_8(13), STR_7(9), STR_6(4), STR_5(14), 
  1937                          ;		 -> STR_4(7), STR_3(8), STR_2(7), STR_1(8), 
  1938                          ;		k           	       	type: unsigned char 
  1939                          ; Return value:
  1940                          ;		type: void 
  1941                          ;		size: 0
  1942                          ; Registers used:
  1943                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  1944                          ; Tracked objects:
  1945                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  1946                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  1947                          ;		Unchanged: 
  1948                          ; Data sizes:
  1949                          ;		Autos:    3
  1950                          ;		Params:   0
  1951                          ;		Temp:     0
  1952                          ;		Total:    3
  1953                          ; This function calls:
  1954                          ;		_UART_Board_bReadTxStatus
  1955                          ;		_UART_Board_SendData
  1956                          ; This function is called by:
  1957                          ;		_LED_Display
  1958                          ;		_main
  1959                          ; This function uses a non-reentrant model
  1960                          ; 
  1961  004A                    __size_of_UartPutConstStr	equ	__end_of_UartPutConstStr-_UartPutConstStr
  1962                          ;boardcommunication.c: 21: void UartPutConstStr(const unsigned char *str)
  1963                          ;boardcommunication.c: 22: {
  1964                          ;			CUR_PP=0 XIO=0 PG=2 
  1965  36E3                    _UartPutConstStr:
  1966                          ;UartPutConstStr@str stored from ax
  1967  36E3  5A 5F             	mov	[(??_UartPutConstStr^0+1)], x
  1968  36E5  53 5E             	mov	[??_UartPutConstStr^0], a
  1969                          ;boardcommunication.c: 23: unsigned char k=0;
  1970  36E7  55 60  00         	mov	[(??_UartPutConstStr+2)^0], 0
  1971                          ;boardcommunication.c: 24: while (str[k])
  1972  36EA  7D 3709           	jmp	l6
  1973                          ;			CUR_PP=0 XIO=0 PG=2 
  1974                          ;boardcommunication.c: 25: {
  1975                          ;boardcommunication.c: 26: while (!(UART_Board_bReadTxStatus() & 0x10));
  1976                          ;			XIO=0 PG=2 
  1977  36ED                    l9:
  1978  36ED  7C 2E65           	call	_UART_Board_bReadTxStatus
  1979  36F0  21 10             	and	a, 0x10
  1980  36F2  AFFA              	jz	l9
  1981                          ;			XIO=0 PG=2 
  1982                          ;boardcommunication.c: 27: UART_Board_SendData(str[k]);
  1983  36F4  62 D0 00          	mov	reg[208], 0
  1984  36F7  51 60             	mov	a, [(??_UartPutConstStr+2)^0]
  1985  36F9  02 5F             	add	a, [(??_UartPutConstStr^0+1)]
  1986  36FB  5C                	mov	x, a
  1987  36FC  50 00             	mov	a, 0
  1988  36FE  0A 5E             	adc	a, [??_UartPutConstStr^0]
  1989  3700  28                	romx
  1990  3701  7C 2E62           	call	_UART_Board_SendData
  1991                          ;boardcommunication.c: 28: k++;
  1992  3704  62 D0 00          	mov	reg[208], 0
  1993  3707  76 60             	inc	[(??_UartPutConstStr+2)^0]
  1994                          ;			CUR_PP=0 XIO=0 PG=2 
  1995  3709                    l6:
  1996  3709  51 60             	mov	a, [(??_UartPutConstStr+2)^0]
  1997  370B  02 5F             	add	a, [(??_UartPutConstStr^0+1)]
  1998  370D  5C                	mov	x, a
  1999  370E  50 00             	mov	a, 0
  2000  3710  0A 5E             	adc	a, [??_UartPutConstStr^0]
  2001  3712  28                	romx
  2002  3713  BFD9              	jnz	l9
  2003                          ;			CUR_PP=0 XIO=0 PG=2 
  2004                          ;boardcommunication.c: 29: }
  2005                          ;boardcommunication.c: 30: while (!(UART_Board_bReadTxStatus() & 0x10));
  2006                          ;			XIO=0 PG=2 
  2007  3715                    l12:
  2008  3715  7C 2E65           	call	_UART_Board_bReadTxStatus
  2009  3718  21 10             	and	a, 0x10
  2010  371A  AFFA              	jz	l12
  2011                          ;			XIO=0 PG=2 
  2012                          ;boardcommunication.c: 31: UART_Board_SendData('\r');
  2013  371C  50 0D             	mov	a, 13
  2014  371E  7C 2E62           	call	_UART_Board_SendData
  2015                          ;boardcommunication.c: 33: while (!(UART_Board_bReadTxStatus() & 0x10));
  2016                          ;			XIO=0 PG=2 
  2017  3721                    l15:
  2018  3721  7C 2E65           	call	_UART_Board_bReadTxStatus
  2019  3724  21 10             	and	a, 0x10
  2020  3726  AFFA              	jz	l15
  2021                          ;			XIO=0 PG=2 
  2022                          ;boardcommunication.c: 34: UART_Board_SendData('\n');
  2023  3728  50 0A             	mov	a, 10
  2024  372A  7D 2E62           	jmp	_UART_Board_SendData
  2025                          ;boardcommunication.c: 35: }
  2026                          ;			XIO=0 PG=2 
  2027  372D                    __end_of_UartPutConstStr:
  2028                          ; =============== function _UartPutConstStr ends ============
  2029                          ; *************** function _ShowHumiTemp *****************
  2030                          ; Defined at:
  2031                          ;		line 78 in file "./led.c"
  2032                          ; Parameters:
  2033                          ;		value       	reg:    a	type: char 
  2034                          ; Auto variables:
  2035                          ;		value       	       	type: char 
  2036                          ;		temp        	       	type: char 
  2037                          ;		index       	       	type: unsigned char 
  2038                          ; Return value:
  2039                          ;		type: void 
  2040                          ;		size: 0
  2041                          ; Registers used:
  2042                          ;		a, x, CUR_PP
  2043                          ; Tracked objects:
  2044                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2045                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2046                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2047                          ; Data sizes:
  2048                          ;		Autos:    3
  2049                          ;		Params:   0
  2050                          ;		Temp:     3
  2051                          ;		Total:    6
  2052                          ; This function calls:
  2053                          ;		_abs
  2054                          ;		___awdiv
  2055                          ;		___awmod
  2056                          ; This function is called by:
  2057                          ;		_LED_Display
  2058                          ; This function uses a non-reentrant model
  2059                          ; 
  2060  00D6                    __size_of_ShowHumiTemp	equ	__end_of_ShowHumiTemp-_ShowHumiTemp
  2061                          ;led.c: 77: void ShowHumiTemp(signed char value)
  2062                          ;led.c: 78: {
  2063                          ;			CUR_PP=0 XIO=0 PG=2 
  2064  372D                    _ShowHumiTemp:
  2065                          ;ShowHumiTemp@value stored from a
  2066  372D  53 5E             	mov	[??_ShowHumiTemp^0], a
  2067                          ;led.c: 79: signed char temp = value;
  2068  372F  51 5E             	mov	a, [??_ShowHumiTemp^0]
  2069                          ;led.c: 80: unsigned char index;
  2070                          ;led.c: 82: DisplayContent[1] = 0xffff;
  2071  3731  55 2A  FF         	mov	[(_DisplayContent+2)^0], 255
  2072  3734  55 2B  FF         	mov	[((_DisplayContent+2)^0+1)], 255
  2073                          ;led.c: 83: DisplayContent[5] = 0xffff;
  2074  3737  55 32  FF         	mov	[(_DisplayContent+10)^0], 255
  2075  373A  55 33  FF         	mov	[((_DisplayContent+10)^0+1)], 255
  2076                          ;ShowHumiTemp@temp stored from a
  2077  373D  53 5F             	mov	[(??_ShowHumiTemp+1)^0], a
  2078                          ;led.c: 85: if (temp < 0)
  2079  373F  39 80             	cmp	a, 128
  2080  3741  C015              	jc	l71
  2081                          ;led.c: 86: {
  2082                          ;led.c: 87: temp = abs(temp);
  2083  3743  51 5F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2084  3745  53 62             	mov	[(??_ShowHumiTemp^0+4)], a
  2085  3747  55 61  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2086  374A  6A                	rlc	a
  2087  374B  1E 61  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2088  374E  51 62             	mov	a, [(??_ShowHumiTemp^0+4)]
  2089  3750  58 61             	mov	x, [(??_ShowHumiTemp^0+3)]
  2090  3752  7C 39F0           	call	_abs
  2091  3755  53 5F             	mov	[(??_ShowHumiTemp+1)^0], a
  2092                          ;			CUR_PP=0 XIO=0 PG=2 
  2093  3757                    l71:
  2094                          ;led.c: 88: }
  2095                          ;led.c: 90: if (temp > 99)
  2096  3757  51 5F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2097  3759  31 80             	xor	a, 0x80
  2098  375B  39 E4             	cmp	a, 228
  2099  375D  C004              	jc	l72
  2100                          ;led.c: 91: {
  2101                          ;led.c: 92: temp = 99;
  2102  375F  55 5F  63         	mov	[(??_ShowHumiTemp+1)^0], 99
  2103                          ;			CUR_PP=0 XIO=0 PG=2 
  2104  3762                    l72:
  2105                          ;led.c: 93: }
  2106                          ;led.c: 95: index = temp/10;
  2107  3762  55 64  00         	mov	[?___awdiv^0], 0
  2108  3765  55 65  0A         	mov	[(?___awdiv^0+1)], 10
  2109  3768  51 5F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2110  376A  53 62             	mov	[(??_ShowHumiTemp^0+4)], a
  2111  376C  55 61  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2112  376F  6A                	rlc	a
  2113  3770  1E 61  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2114  3773  51 62             	mov	a, [(??_ShowHumiTemp^0+4)]
  2115  3775  58 61             	mov	x, [(??_ShowHumiTemp^0+3)]
  2116  3777  7C 387F           	call	___awdiv
  2117  377A  53 60             	mov	[(??_ShowHumiTemp+2)^0], a
  2118                          ;led.c: 96: if(index)
  2119  377C  51 60             	mov	a, [(??_ShowHumiTemp+2)^0]
  2120  377E  A026              	jz	l73
  2121                          ;led.c: 97: {
  2122                          ;led.c: 98: DisplayContent[2] = DigitArray[index];
  2123  3780  51 60             	mov	a, [(??_ShowHumiTemp+2)^0]
  2124  3782  64                	asl	a
  2125  3783  01 00             	add	a, <_DigitArray
  2126  3785  5C                	mov	x, a
  2127  3786  50 3E             	mov	a, >_DigitArray
  2128  3788  08                	push	a
  2129  3789  28                	romx
  2130  378A  53 2C             	mov	[(_DisplayContent+4)^0], a
  2131  378C  18                	pop	a
  2132  378D  75                	inc	x
  2133  378E  28                	romx
  2134  378F  53 2D             	mov	[((_DisplayContent+4)^0+1)], a
  2135                          ;led.c: 99: DisplayContent[6] = DigitArray[index];
  2136  3791  51 60             	mov	a, [(??_ShowHumiTemp+2)^0]
  2137  3793  64                	asl	a
  2138  3794  01 00             	add	a, <_DigitArray
  2139  3796  5C                	mov	x, a
  2140  3797  50 3E             	mov	a, >_DigitArray
  2141  3799  08                	push	a
  2142  379A  28                	romx
  2143  379B  53 34             	mov	[(_DisplayContent+12)^0], a
  2144  379D  18                	pop	a
  2145  379E  75                	inc	x
  2146  379F  28                	romx
  2147  37A0  53 35             	mov	[((_DisplayContent+12)^0+1)], a
  2148                          ;led.c: 100: }
  2149  37A2  7D 37B1           	jmp	l74
  2150                          ;			CUR_PP=0 XIO=0 
  2151  37A5                    l73:
  2152                          ;led.c: 101: else
  2153                          ;led.c: 102: {
  2154                          ;led.c: 103: DisplayContent[2] = 0xffff;
  2155  37A5  55 2C  FF         	mov	[(_DisplayContent+4)^0], 255
  2156  37A8  55 2D  FF         	mov	[((_DisplayContent+4)^0+1)], 255
  2157                          ;led.c: 104: DisplayContent[6] = 0xffff;
  2158  37AB  55 34  FF         	mov	[(_DisplayContent+12)^0], 255
  2159  37AE  55 35  FF         	mov	[((_DisplayContent+12)^0+1)], 255
  2160                          ;			CUR_PP=0 XIO=0 
  2161  37B1                    l74:
  2162                          ;led.c: 105: }
  2163                          ;led.c: 107: index = temp%10;
  2164  37B1  55 64  00         	mov	[?___awmod^0], 0
  2165  37B4  55 65  0A         	mov	[(?___awmod^0+1)], 10
  2166  37B7  51 5F             	mov	a, [(??_ShowHumiTemp+1)^0]
  2167  37B9  53 62             	mov	[(??_ShowHumiTemp^0+4)], a
  2168  37BB  55 61  00         	mov	[(??_ShowHumiTemp^0+3)], 0
  2169  37BE  6A                	rlc	a
  2170  37BF  1E 61  00         	sbb	[(??_ShowHumiTemp^0+3)], 0
  2171  37C2  51 62             	mov	a, [(??_ShowHumiTemp^0+4)]
  2172  37C4  58 61             	mov	x, [(??_ShowHumiTemp^0+3)]
  2173  37C6  71 80             	or	f, 0x80	;select multiple RAM page mode
  2174  37C8  7C 380C           	call	___awmod
  2175  37CB  53 60             	mov	[(??_ShowHumiTemp+2)^0], a
  2176                          ;led.c: 108: DisplayContent[3] = DigitArray[index];
  2177  37CD  51 60             	mov	a, [(??_ShowHumiTemp+2)^0]
  2178  37CF  64                	asl	a
  2179  37D0  01 00             	add	a, <_DigitArray
  2180  37D2  5C                	mov	x, a
  2181  37D3  50 3E             	mov	a, >_DigitArray
  2182  37D5  08                	push	a
  2183  37D6  28                	romx
  2184  37D7  53 2E             	mov	[(_DisplayContent+6)^0], a
  2185  37D9  18                	pop	a
  2186  37DA  75                	inc	x
  2187  37DB  28                	romx
  2188  37DC  53 2F             	mov	[((_DisplayContent+6)^0+1)], a
  2189                          ;led.c: 109: DisplayContent[7] = DigitArray[index];
  2190  37DE  51 60             	mov	a, [(??_ShowHumiTemp+2)^0]
  2191  37E0  64                	asl	a
  2192  37E1  01 00             	add	a, <_DigitArray
  2193  37E3  5C                	mov	x, a
  2194  37E4  50 3E             	mov	a, >_DigitArray
  2195  37E6  08                	push	a
  2196  37E7  28                	romx
  2197  37E8  53 36             	mov	[(_DisplayContent+14)^0], a
  2198  37EA  18                	pop	a
  2199  37EB  75                	inc	x
  2200  37EC  28                	romx
  2201  37ED  53 37             	mov	[((_DisplayContent+14)^0+1)], a
  2202                          ;led.c: 111: if (temp < 0)
  2203  37EF  3C 5F  80         	cmp	[(??_ShowHumiTemp+1)^0], 128
  2204  37F2  C009              	jc	l75
  2205                          ;led.c: 116: DisplayContent[6] == (~0X1000);
  2206  37F4  3C 2C  FF         	cmp	[(_DisplayContent+4)^0], 255
  2207  37F7  B004              	jnz	l75
  2208  37F9  3C 2D  FF         	cmp	[((_DisplayContent+4)^0+1)], 255
  2209                          ;led.c: 117: }
  2210                          ;			CUR_PP=0 XIO=0 
  2211  37FC                    l75:
  2212                          ;led.c: 122: }
  2213                          ;led.c: 123: }
  2214                          ;led.c: 126: IndexStart = 0;
  2215  37FC  55 46  00         	mov	[_IndexStart^0], 0
  2216                          ;led.c: 127: IndexEnd = 4;
  2217  37FF  55 5A  04         	mov	[_IndexEnd^0], 4
  2218                          ;led.c: 129: }
  2219                          ;			CUR_PP=0 XIO=0 
  2220  3802  7F                	ret
  2221  3803                    __end_of_ShowHumiTemp:
  2222                          ; =============== function _ShowHumiTemp ends ============
  2223                          ; *************** function _Si7020SendCommand *****************
  2224                          ; Defined at:
  2225                          ;		line 10 in file "./si7020.c"
  2226                          ; Parameters:
  2227                          ;		cmd         	reg:    a	type: unsigned char 
  2228                          ; Auto variables:
  2229                          ;		cmd         	       	type: unsigned char 
  2230                          ; Return value:
  2231                          ;		type: unsigned char 
  2232                          ;		size: 1
  2233                          ; Registers used:
  2234                          ;		a, x, CUR_PP
  2235                          ; Tracked objects:
  2236                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2237                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2238                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2239                          ; Data sizes:
  2240                          ;		Autos:    1
  2241                          ;		Params:   0
  2242                          ;		Temp:     0
  2243                          ;		Total:    1
  2244                          ; This function calls:
  2245                          ;		_ISendByte
  2246                          ; This function is called by:
  2247                          ;		_main
  2248                          ;		_Si7020Read_Temp_after_RHM
  2249                          ; This function uses a non-reentrant model
  2250                          ; 
  2251  0009                    __size_of_Si7020SendCommand	equ	__end_of_Si7020SendCommand-_Si7020SendCommand
  2252                          ;si7020.c: 9: unsigned char Si7020SendCommand(char cmd)
  2253                          ;si7020.c: 10: {
  2254                          ;			CUR_PP=0 XIO=0 PG=2 
  2255  3803                    _Si7020SendCommand:
  2256                          ;Si7020SendCommand@cmd stored from a
  2257  3803  53 60             	mov	[??_Si7020SendCommand^0], a
  2258                          ;si7020.c: 11: return(ISendByte(0x80,cmd));
  2259  3805  50 80             	mov	a, 128
  2260  3807  58 60             	mov	x, [??_Si7020SendCommand^0]
  2261  3809  7D 38FD           	jmp	_ISendByte
  2262                          ;si7020.c: 12: }
  2263                          ;			CUR_PP=0 XIO=0 
  2264  380C                    __end_of_Si7020SendCommand:
  2265                          ; =============== function _Si7020SendCommand ends ============
  2266                          ; *************** function ___awmod *****************
  2267                          ; Defined at:
  2268                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awmod.c"
  2269                          ; Parameters:
  2270                          ;		dividend    	reg:   xa	type: int 
  2271                          ;		divisor     	offs:   0	type: int 
  2272                          ; Auto variables:
  2273                          ;		dividend    	       	type: int 
  2274                          ;		counter     	       	type: unsigned char 
  2275                          ;		sign        	       	type: unsigned char 
  2276                          ; Return value:
  2277                          ;		type: int 
  2278                          ;		size: 2
  2279                          ; Registers used:
  2280                          ;		a, x, CUR_PP
  2281                          ; Tracked objects:
  2282                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2283                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2284                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2285                          ; Data sizes:
  2286                          ;		Autos:    4
  2287                          ;		Params:   2
  2288                          ;		Temp:     0
  2289                          ;		Total:    6
  2290                          ; This function calls:
  2291                          ;		Nothing
  2292                          ; This function is called by:
  2293                          ;		_ShowHumiTemp
  2294                          ; This function uses a non-reentrant model
  2295                          ; 
  2296  0073                    __size_of___awmod	equ	__end_of___awmod-___awmod
  2297                          ;awmod.c: 3: signed int
  2298                          ;awmod.c: 4: __awmod(signed int dividend, signed int divisor)
  2299                          ;awmod.c: 5: {
  2300                          ;			CUR_PP=0 XIO=0 PG=2 
  2301  380C                    ___awmod:
  2302                          ;awmod.c: 6: unsigned char counter, sign;
  2303                          ;awmod.c: 8: sign = 0;
  2304  380C  55 68  00         	mov	[(??___awmod+2)^0], 0
  2305                          ;awmod.c: 9: if(dividend < 0) {
  2306  380F  4B                	swap	a, x
  2307  3810  39 80             	cmp	a, 128
  2308  3812  4B                	swap	a, x
  2309  3813  C00B              	jc	l516
  2310                          ;awmod.c: 10: dividend = -dividend;
  2311  3815  73                	cpl	a
  2312  3816  74                	inc	a
  2313  3817  4B                	swap	a, x
  2314  3818  73                	cpl	a
  2315  3819  09 00             	adc	a, 0
  2316  381B  4B                	swap	a, x
  2317                          ;awmod.c: 11: sign = 1;
  2318  381C  55 68  01         	mov	[(??___awmod+2)^0], 1
  2319                          ;			CUR_PP=0 XIO=0 PG=2 
  2320  381F                    l516:
  2321                          ;awmod.c: 12: }
  2322                          ;awmod.c: 13: if(divisor < 0)
  2323  381F  47 64  80         	tst	[?___awmod^0], 128
  2324  3822  A00C              	jz	l517
  2325                          ;awmod.c: 14: divisor = -divisor;
  2326  3824  36 64  FF         	xor	[?___awmod^0], 0xFF
  2327  3827  36 65  FF         	xor	[(?___awmod^0+1)], 0xFF
  2328  382A  76 65             	inc	[(?___awmod^0+1)]
  2329  382C  0E 64  00         	adc	[?___awmod^0], 0
  2330                          ;			CUR_PP=0 XIO=0 PG=2 
  2331  382F                    l517:
  2332                          ;awmod.c: 15: if(divisor != 0) {
  2333  382F  3C 64  00         	cmp	[?___awmod^0], 0
  2334  3832  B006              	jnz	L1
  2335  3834  3C 65  00         	cmp	[(?___awmod^0+1)], 0
  2336  3837  A03A              	jz	l518
  2337  3839                    L1:
  2338                          ;awmod.c: 16: counter = 1;
  2339  3839  55 69  01         	mov	[(??___awmod+3)^0], 1
  2340                          ;awmod.c: 17: while(((unsigned int)divisor & 0x8000U) == 0) {
  2341  383C  7D 3849           	jmp	l519
  2342                          ;			CUR_PP=0 XIO=0 
  2343  383F                    l520:
  2344                          ; ___awmod@dividend loaded to xa
  2345  383F  51 67             	mov	a, [(??___awmod^0+1)]
  2346  3841  58 66             	mov	x, [??___awmod^0]
  2347                          ;awmod.c: 18: divisor <<= 1;
  2348  3843  65 65             	asl	[(?___awmod^0+1)]
  2349  3845  6B 64             	rlc	[?___awmod^0]
  2350                          ;awmod.c: 19: counter++;
  2351  3847  76 69             	inc	[(??___awmod+3)^0]
  2352                          ;			CUR_PP=0 XIO=0 
  2353  3849                    l519:
  2354                          ;___awmod@dividend stored from xa
  2355  3849  53 67             	mov	[(??___awmod^0+1)], a
  2356  384B  5A 66             	mov	[??___awmod^0], x
  2357  384D  47 64  80         	tst	[?___awmod^0], 128
  2358  3850  AFEE              	jz	l520
  2359                          ;			CUR_PP=0 XIO=0 
  2360                          ;awmod.c: 20: }
  2361                          ;awmod.c: 21: do {
  2362                          ;			CUR_PP=0 XIO=0 
  2363  3852                    l524:
  2364                          ;awmod.c: 22: if((unsigned int)divisor <= (unsigned int)dividend)
  2365  3852  51 67             	mov	a, [(??___awmod^0+1)]
  2366  3854  3A 65             	cmp	a, [(?___awmod^0+1)]
  2367  3856  51 66             	mov	a, [??___awmod^0]
  2368  3858  1A 64             	sbb	a, [?___awmod^0]
  2369  385A  C009              	jc	l525
  2370                          ;awmod.c: 23: dividend -= divisor;
  2371  385C  51 65             	mov	a, [(?___awmod^0+1)]
  2372  385E  14 67             	sub	[(??___awmod^0+1)], a
  2373  3860  51 64             	mov	a, [?___awmod^0]
  2374  3862  1C 66             	sbb	[??___awmod^0], a
  2375                          ;			CUR_PP=0 XIO=0 
  2376  3864                    l525:
  2377                          ;awmod.c: 24: *(unsigned int *)&divisor >>= 1;
  2378  3864  70 FB             	and	f, 0xFB
  2379  3866  6E 64             	rrc	[?___awmod^0]
  2380  3868  6E 65             	rrc	[(?___awmod^0+1)]
  2381                          ;awmod.c: 25: } while(--counter != 0);
  2382  386A  7A 69             	dec	[(??___awmod+3)^0]
  2383  386C  BFE5              	jnz	l524
  2384                          ;			CUR_PP=0 XIO=0 
  2385                          ; ___awmod@dividend loaded to xa
  2386  386E  51 67             	mov	a, [(??___awmod^0+1)]
  2387  3870  58 66             	mov	x, [??___awmod^0]
  2388                          ;			CUR_PP=0 XIO=0 
  2389  3872                    l518:
  2390                          ;awmod.c: 26: }
  2391                          ;awmod.c: 27: if(sign)
  2392  3872  3C 68  00         	cmp	[(??___awmod+2)^0], 0
  2393  3875  A008              	jz	l515
  2394                          ;awmod.c: 28: dividend = -dividend;
  2395  3877  73                	cpl	a
  2396  3878  74                	inc	a
  2397  3879  4B                	swap	a, x
  2398  387A  73                	cpl	a
  2399  387B  09 00             	adc	a, 0
  2400  387D  4B                	swap	a, x
  2401                          ;			CUR_PP=0 XIO=0 
  2402                          ;awmod.c: 29: return dividend;
  2403                          ;awmod.c: 30: }
  2404  387E                    l515:
  2405                          ;			CUR_PP=0 XIO=0 
  2406  387E  7F                	ret
  2407  387F                    __end_of___awmod:
  2408                          ; =============== function ___awmod ends ============
  2409                          ; *************** function ___awdiv *****************
  2410                          ; Defined at:
  2411                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\awdiv.c"
  2412                          ; Parameters:
  2413                          ;		dividend    	reg:   xa	type: int 
  2414                          ;		divisor     	offs:   0	type: int 
  2415                          ; Auto variables:
  2416                          ;		dividend    	       	type: int 
  2417                          ;		quotient    	       	type: int 
  2418                          ;		sign        	       	type: unsigned char 
  2419                          ;		counter     	       	type: unsigned char 
  2420                          ; Return value:
  2421                          ;		type: int 
  2422                          ;		size: 2
  2423                          ; Registers used:
  2424                          ;		a, x, CUR_PP
  2425                          ; Tracked objects:
  2426                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2427                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2428                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2429                          ; Data sizes:
  2430                          ;		Autos:    6
  2431                          ;		Params:   2
  2432                          ;		Temp:     0
  2433                          ;		Total:    8
  2434                          ; This function calls:
  2435                          ;		Nothing
  2436                          ; This function is called by:
  2437                          ;		_ShowHumiTemp
  2438                          ; This function uses a non-reentrant model
  2439                          ; 
  2440  007E                    __size_of___awdiv	equ	__end_of___awdiv-___awdiv
  2441                          ;awdiv.c: 3: signed int
  2442                          ;awdiv.c: 4: __awdiv(signed int dividend, signed int divisor)
  2443                          ;awdiv.c: 5: {
  2444                          ;			CUR_PP=0 XIO=0 PG=2 
  2445  387F                    ___awdiv:
  2446                          ;___awdiv@dividend stored from xa
  2447  387F  53 67             	mov	[(??___awdiv^0+1)], a
  2448  3881  5A 66             	mov	[??___awdiv^0], x
  2449                          ;awdiv.c: 6: signed int quotient;
  2450                          ;awdiv.c: 7: unsigned char counter, sign;
  2451                          ;awdiv.c: 9: sign = 0;
  2452  3883  50 00             	mov	a, 0
  2453                          ;awdiv.c: 10: if(divisor < 0) {
  2454  3885  47 64  80         	tst	[?___awdiv^0], 128
  2455  3888  A00E              	jz	l436
  2456                          ;awdiv.c: 11: divisor = -divisor;
  2457  388A  36 64  FF         	xor	[?___awdiv^0], 0xFF
  2458  388D  36 65  FF         	xor	[(?___awdiv^0+1)], 0xFF
  2459  3890  76 65             	inc	[(?___awdiv^0+1)]
  2460  3892  0E 64  00         	adc	[?___awdiv^0], 0
  2461                          ;awdiv.c: 12: sign = 1;
  2462  3895  50 01             	mov	a, 1
  2463                          ;			CUR_PP=0 XIO=0 PG=2 
  2464  3897                    l436:
  2465                          ;awdiv.c: 13: }
  2466                          ;awdiv.c: 14: if(dividend < 0) {
  2467  3897  47 66  80         	tst	[??___awdiv^0], 128
  2468  389A  A00E              	jz	l437
  2469                          ;awdiv.c: 15: dividend = -dividend;
  2470  389C  36 66  FF         	xor	[??___awdiv^0], 0xFF
  2471  389F  36 67  FF         	xor	[(??___awdiv^0+1)], 0xFF
  2472  38A2  76 67             	inc	[(??___awdiv^0+1)]
  2473  38A4  0E 66  00         	adc	[??___awdiv^0], 0
  2474                          ;awdiv.c: 16: sign ^= 1;
  2475  38A7  31 01             	xor	a, 1
  2476                          ;			CUR_PP=0 XIO=0 PG=2 
  2477  38A9                    l437:
  2478                          ;awdiv.c: 17: }
  2479                          ;awdiv.c: 18: quotient = 0;
  2480  38A9  55 68  00         	mov	[(??___awdiv+2)^0], 0
  2481  38AC  55 69  00         	mov	[((??___awdiv+2)^0+1)], 0
  2482                          ;___awdiv@sign stored from a
  2483  38AF  53 6A             	mov	[(??___awdiv+4)^0], a
  2484                          ;awdiv.c: 19: if(divisor != 0) {
  2485  38B1  51 64             	mov	a, [?___awdiv^0]
  2486  38B3  2A 65             	or	a, [(?___awdiv^0+1)]
  2487  38B5  A036              	jz	l438
  2488                          ;awdiv.c: 20: counter = 1;
  2489  38B7  50 01             	mov	a, 1
  2490                          ;awdiv.c: 21: while((divisor & 0x8000U) == 0) {
  2491  38B9  7D 38C1           	jmp	l439
  2492                          ;			CUR_PP=0 XIO=0 
  2493  38BC                    l440:
  2494                          ;awdiv.c: 22: divisor <<= 1;
  2495  38BC  65 65             	asl	[(?___awdiv^0+1)]
  2496  38BE  6B 64             	rlc	[?___awdiv^0]
  2497                          ;awdiv.c: 23: counter++;
  2498  38C0  74                	inc	a
  2499                          ;			CUR_PP=0 XIO=0 
  2500  38C1                    l439:
  2501  38C1  47 64  80         	tst	[?___awdiv^0], 128
  2502  38C4  AFF7              	jz	l440
  2503                          ;			CUR_PP=0 XIO=0 
  2504                          ;awdiv.c: 24: }
  2505                          ;awdiv.c: 25: do {
  2506                          ;			CUR_PP=0 XIO=0 
  2507  38C6                    l444:
  2508                          ;awdiv.c: 26: quotient <<= 1;
  2509  38C6  65 69             	asl	[((??___awdiv+2)^0+1)]
  2510  38C8  6B 68             	rlc	[(??___awdiv+2)^0]
  2511                          ;___awdiv@counter stored from a
  2512  38CA  53 6B             	mov	[(??___awdiv+5)^0], a
  2513                          ;awdiv.c: 27: if((unsigned int)divisor <= (unsigned int)dividend) {
  2514  38CC  51 67             	mov	a, [(??___awdiv^0+1)]
  2515  38CE  3A 65             	cmp	a, [(?___awdiv^0+1)]
  2516  38D0  51 66             	mov	a, [??___awdiv^0]
  2517  38D2  1A 64             	sbb	a, [?___awdiv^0]
  2518  38D4  C00C              	jc	l445
  2519                          ;awdiv.c: 28: dividend -= divisor;
  2520  38D6  51 65             	mov	a, [(?___awdiv^0+1)]
  2521  38D8  14 67             	sub	[(??___awdiv^0+1)], a
  2522  38DA  51 64             	mov	a, [?___awdiv^0]
  2523  38DC  1C 66             	sbb	[??___awdiv^0], a
  2524                          ;awdiv.c: 29: quotient |= 1;
  2525  38DE  2E 69  01         	or	[((??___awdiv+2)^0+1)], 1
  2526                          ;			CUR_PP=0 XIO=0 
  2527  38E1                    l445:
  2528                          ;awdiv.c: 30: }
  2529                          ;awdiv.c: 31: *(unsigned int *)&divisor >>= 1;
  2530  38E1  70 FB             	and	f, 0xFB
  2531  38E3  6E 64             	rrc	[?___awdiv^0]
  2532  38E5  6E 65             	rrc	[(?___awdiv^0+1)]
  2533                          ; ___awdiv@counter loaded to a
  2534  38E7  51 6B             	mov	a, [(??___awdiv+5)^0]
  2535                          ;awdiv.c: 32: } while(--counter != 0);
  2536  38E9  78                	dec	a
  2537  38EA  BFDB              	jnz	l444
  2538                          ;			CUR_PP=0 XIO=0 
  2539                          ;			CUR_PP=0 XIO=0 
  2540  38EC                    l438:
  2541                          ; ___awdiv@quotient loaded to xa
  2542  38EC  51 69             	mov	a, [((??___awdiv+2)^0+1)]
  2543  38EE  58 68             	mov	x, [(??___awdiv+2)^0]
  2544                          ;awdiv.c: 33: }
  2545                          ;awdiv.c: 34: if(sign)
  2546  38F0  3C 6A  00         	cmp	[(??___awdiv+4)^0], 0
  2547  38F3  A008              	jz	l435
  2548                          ;awdiv.c: 35: quotient = -quotient;
  2549  38F5  73                	cpl	a
  2550  38F6  74                	inc	a
  2551  38F7  4B                	swap	a, x
  2552  38F8  73                	cpl	a
  2553  38F9  09 00             	adc	a, 0
  2554  38FB  4B                	swap	a, x
  2555                          ;			CUR_PP=0 XIO=0 
  2556                          ;awdiv.c: 36: return quotient;
  2557                          ;awdiv.c: 37: }
  2558  38FC                    l435:
  2559                          ;			CUR_PP=0 XIO=0 
  2560  38FC  7F                	ret
  2561  38FD                    __end_of___awdiv:
  2562                          ; =============== function ___awdiv ends ============
  2563                          ; *************** function _ISendByte *****************
  2564                          ; Defined at:
  2565                          ;		line 186 in file "./software_iic.c"
  2566                          ; Parameters:
  2567                          ;		sla         	reg:    a	type: unsigned char 
  2568                          ;		c           	reg:    x	type: unsigned char 
  2569                          ; Auto variables:
  2570                          ;		c           	       	type: unsigned char 
  2571                          ;		sla         	       	type: unsigned char 
  2572                          ; Return value:
  2573                          ;		type: unsigned char 
  2574                          ;		size: 1
  2575                          ; Registers used:
  2576                          ;		a, x, CUR_PP
  2577                          ; Tracked objects:
  2578                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2579                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2580                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2581                          ; Data sizes:
  2582                          ;		Autos:    2
  2583                          ;		Params:   0
  2584                          ;		Temp:     0
  2585                          ;		Total:    2
  2586                          ; This function calls:
  2587                          ;		_Start_I2c
  2588                          ;		_SendByte
  2589                          ;		_Stop_I2c
  2590                          ; This function is called by:
  2591                          ;		_Si7020SendCommand
  2592                          ; This function uses a non-reentrant model
  2593                          ; 
  2594  0035                    __size_of_ISendByte	equ	__end_of_ISendByte-_ISendByte
  2595                          ;software_iic.c: 185: unsigned char ISendByte(unsigned char sla,unsigned char c)
  2596                          ;software_iic.c: 186: {
  2597                          ;			CUR_PP=0 XIO=0 PG=2 
  2598  38FD                    _ISendByte:
  2599                          ;ISendByte@sla stored from a
  2600  38FD  53 62             	mov	[(??_ISendByte+1)^0], a
  2601                          ;ISendByte@c stored from x
  2602  38FF  5A 61             	mov	[??_ISendByte^0], x
  2603                          ;software_iic.c: 187: Start_I2c();
  2604  3901  7C 3ABF           	call	_Start_I2c
  2605                          ;software_iic.c: 188: SendByte(sla);
  2606  3904  51 62             	mov	a, [(??_ISendByte+1)^0]
  2607  3906  71 80             	or	f, 0x80	;select multiple RAM page mode
  2608  3908  7C 3A45           	call	_SendByte
  2609                          ;software_iic.c: 189: if(ack==0)
  2610  390B  51 4B             	mov	a, [_ack^0]
  2611  390D  B009              	jnz	l195
  2612                          ;software_iic.c: 190: {
  2613                          ;software_iic.c: 191: Stop_I2c();
  2614  390F  71 80             	or	f, 0x80	;select multiple RAM page mode
  2615  3911  7C 3AE4           	call	_Stop_I2c
  2616                          ;software_iic.c: 192: return(0);
  2617  3914  50 00             	mov	a, 0
  2618  3916  7F                	ret
  2619                          ;			CUR_PP=0 XIO=0 
  2620  3917                    l195:
  2621                          ;software_iic.c: 193: }
  2622                          ;software_iic.c: 194: SendByte(c);
  2623  3917  51 61             	mov	a, [??_ISendByte^0]
  2624  3919  71 80             	or	f, 0x80	;select multiple RAM page mode
  2625  391B  7C 3A45           	call	_SendByte
  2626                          ;software_iic.c: 195: if(ack==0)
  2627  391E  51 4B             	mov	a, [_ack^0]
  2628  3920  B009              	jnz	l196
  2629                          ;software_iic.c: 196: {
  2630                          ;software_iic.c: 197: Stop_I2c();
  2631  3922  71 80             	or	f, 0x80	;select multiple RAM page mode
  2632  3924  7C 3AE4           	call	_Stop_I2c
  2633                          ;software_iic.c: 198: return(0);
  2634  3927  50 00             	mov	a, 0
  2635  3929  7F                	ret
  2636                          ;			CUR_PP=0 XIO=0 
  2637  392A                    l196:
  2638                          ;software_iic.c: 199: }
  2639                          ;software_iic.c: 200: Stop_I2c();
  2640  392A  71 80             	or	f, 0x80	;select multiple RAM page mode
  2641  392C  7C 3AE4           	call	_Stop_I2c
  2642                          ;software_iic.c: 201: return(1);
  2643  392F  50 01             	mov	a, 1
  2644                          ;software_iic.c: 202: }
  2645                          ;			CUR_PP=0 XIO=0 
  2646  3931  7F                	ret
  2647  3932                    __end_of_ISendByte:
  2648                          ; =============== function _ISendByte ends ============
  2649                          ; *************** function _RcvByte *****************
  2650                          ; Defined at:
  2651                          ;		line 131 in file "./software_iic.c"
  2652                          ; Parameters:
  2653                          ;		None
  2654                          ; Auto variables:
  2655                          ;		retc        	       	type: unsigned char 
  2656                          ;		BitCnt      	       	type: unsigned char 
  2657                          ; Return value:
  2658                          ;		type: unsigned char 
  2659                          ;		size: 1
  2660                          ; Registers used:
  2661                          ;		a, x, CUR_PP
  2662                          ; Tracked objects:
  2663                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2664                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2665                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2666                          ; Data sizes:
  2667                          ;		Autos:    2
  2668                          ;		Params:   0
  2669                          ;		Temp:     0
  2670                          ;		Total:    2
  2671                          ; This function calls:
  2672                          ;		_ChangeToRead
  2673                          ;		_delay_us
  2674                          ;		_ChangeToOD
  2675                          ; This function is called by:
  2676                          ;		_IRcvBytes
  2677                          ; This function uses a non-reentrant model
  2678                          ; 
  2679  0048                    __size_of_RcvByte	equ	__end_of_RcvByte-_RcvByte
  2680                          ;software_iic.c: 130: unsigned char RcvByte(void)
  2681                          ;software_iic.c: 131: {
  2682                          ;			CUR_PP=0 XIO=0 PG=2 
  2683  3932                    _RcvByte:
  2684                          ;software_iic.c: 132: unsigned char retc;
  2685                          ;software_iic.c: 133: unsigned char BitCnt;
  2686                          ;software_iic.c: 135: retc=0;
  2687  3932  55 66  00         	mov	[??_RcvByte^0], 0
  2688                          ;software_iic.c: 136: ChangeToRead();
  2689  3935  7C 3B15           	call	_ChangeToRead
  2690                          ;software_iic.c: 137: for(BitCnt=0;BitCnt<8;BitCnt++)
  2691  3938  55 67  00         	mov	[(??_RcvByte+1)^0], 0
  2692                          ;			CUR_PP=0 XIO=0 
  2693  393B                    l187:
  2694                          ;software_iic.c: 138: {
  2695                          ;software_iic.c: 139: delay_us(1);
  2696  393B  50 01             	mov	a, 1
  2697  393D  57 00             	mov	x, 0
  2698  393F  71 80             	or	f, 0x80	;select multiple RAM page mode
  2699  3941  7C 3B26           	call	_delay_us
  2700                          ;software_iic.c: 140: PRT1DR &= ~0x80;
  2701  3944  41 04 7F          	and	reg[4], 0x7F
  2702                          ;software_iic.c: 141: delay_us(1);
  2703  3947  50 01             	mov	a, 1
  2704  3949  57 00             	mov	x, 0
  2705  394B  71 80             	or	f, 0x80	;select multiple RAM page mode
  2706  394D  7C 3B26           	call	_delay_us
  2707                          ;software_iic.c: 142: PRT1DR |= 0x80;
  2708  3950  43 04 80          	or	reg[4], 0x80
  2709                          ;software_iic.c: 143: delay_us(1);
  2710  3953  50 01             	mov	a, 1
  2711  3955  57 00             	mov	x, 0
  2712  3957  71 80             	or	f, 0x80	;select multiple RAM page mode
  2713  3959  7C 3B26           	call	_delay_us
  2714                          ;software_iic.c: 144: retc=retc<<1;
  2715  395C  65 66             	asl	[??_RcvByte^0]
  2716                          ;software_iic.c: 145: if(PRT1DR&0x20)
  2717  395E  49 04 20          	tst	reg[4], 32
  2718  3961  A004              	jz	l190
  2719                          ;software_iic.c: 146: {
  2720                          ;software_iic.c: 147: retc |= 1;
  2721  3963  2E 66  01         	or	[??_RcvByte^0], 1
  2722                          ;			CUR_PP=0 XIO=0 
  2723  3966                    l190:
  2724  3966  76 67             	inc	[(??_RcvByte+1)^0]
  2725  3968  3C 67  08         	cmp	[(??_RcvByte+1)^0], 8
  2726  396B  CFCF              	jc	l187
  2727                          ;			CUR_PP=0 XIO=0 
  2728                          ;software_iic.c: 148: }
  2729                          ;software_iic.c: 149: }
  2730                          ;software_iic.c: 150: PRT1DR &= ~0x80;
  2731  396D  41 04 7F          	and	reg[4], 0x7F
  2732  3970  40                	nop	;#
  2733  3971  40                	nop	;#
  2734                          ;software_iic.c: 151: asm("nop");
  2735                          ;software_iic.c: 152: asm("nop");
  2736                          ;software_iic.c: 153: ChangeToOD();
  2737  3972  71 80             	or	f, 0x80	;select multiple RAM page mode
  2738  3974  7C 3B06           	call	_ChangeToOD
  2739                          ;software_iic.c: 154: return(retc);
  2740  3977  51 66             	mov	a, [??_RcvByte^0]
  2741                          ;software_iic.c: 155: }
  2742                          ;			CUR_PP=0 XIO=0 
  2743  3979  7F                	ret
  2744  397A                    __end_of_RcvByte:
  2745                          ; =============== function _RcvByte ends ============
  2746                          ; *************** function _Ack_I2c *****************
  2747                          ; Defined at:
  2748                          ;		line 163 in file "./software_iic.c"
  2749                          ; Parameters:
  2750                          ;		a           	reg:    a	type: unsigned char 
  2751                          ; Auto variables:
  2752                          ;		a           	       	type: unsigned char 
  2753                          ; Return value:
  2754                          ;		type: void 
  2755                          ;		size: 0
  2756                          ; Registers used:
  2757                          ;		a, x, CUR_PP
  2758                          ; Tracked objects:
  2759                          ;		On entry : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2760                          ;		On exit  : CUR_PP=0 IDX_PP=0 XIO=0 PG? MVR_PP? MVW_PP? 
  2761                          ;		Unchanged: MVR_PP MVW_PP 
  2762                          ; Data sizes:
  2763                          ;		Autos:    1
  2764                          ;		Params:   0
  2765                          ;		Temp:     0
  2766                          ;		Total:    1
  2767                          ; This function calls:
  2768                          ;		_delay_us
  2769                          ; This function is called by:
  2770                          ;		_IRcvBytes
  2771                          ; This function uses a non-reentrant model
  2772                          ; 
  2773  002C                    __size_of_Ack_I2c	equ	__end_of_Ack_I2c-_Ack_I2c
  2774                          ;software_iic.c: 162: void Ack_I2c(unsigned char a)
  2775                          ;software_iic.c: 163: {
  2776                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2777  397A                    _Ack_I2c:
  2778                          ;software_iic.c: 164: if(a==0)
  2779  397A  39 00             	cmp	a, 0
  2780  397C  B007              	jnz	l192
  2781                          ;software_iic.c: 165: {
  2782                          ;software_iic.c: 166: PRT1DR &= ~0x20;
  2783  397E  41 04 DF          	and	reg[4], 0xDF
  2784                          ;software_iic.c: 167: }
  2785  3981  7D 3987           	jmp	l193
  2786                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2787  3984                    l192:
  2788                          ;software_iic.c: 168: else
  2789                          ;software_iic.c: 169: {
  2790                          ;software_iic.c: 170: PRT1DR |= 0x20;
  2791  3984  43 04 20          	or	reg[4], 0x20
  2792                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  2793  3987                    l193:
  2794                          ;software_iic.c: 171: }
  2795                          ;software_iic.c: 172: delay_us(1);
  2796  3987  50 01             	mov	a, 1
  2797  3989  57 00             	mov	x, 0
  2798  398B  7C 3B26           	call	_delay_us
  2799                          ;software_iic.c: 173: PRT1DR |= 0x80;
  2800  398E  43 04 80          	or	reg[4], 0x80
  2801                          ;software_iic.c: 174: delay_us(1);
  2802  3991  50 01             	mov	a, 1
  2803  3993  57 00             	mov	x, 0
  2804  3995  71 80             	or	f, 0x80	;select multiple RAM page mode
  2805  3997  7C 3B26           	call	_delay_us
  2806                          ;software_iic.c: 175: PRT1DR &= ~0x80;
  2807  399A  41 04 7F          	and	reg[4], 0x7F
  2808                          ;software_iic.c: 176: delay_us(1);
  2809  399D  50 01             	mov	a, 1
  2810  399F  57 00             	mov	x, 0
  2811  39A1  71 80             	or	f, 0x80	;select multiple RAM page mode
  2812  39A3  7D 3B26           	jmp	_delay_us
  2813                          ;software_iic.c: 177: }
  2814                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  2815  39A6                    __end_of_Ack_I2c:
  2816                          ; =============== function _Ack_I2c ends ============
  2817                          ; *************** function ___lwdiv *****************
  2818                          ; Defined at:
  2819                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwdiv.c"
  2820                          ; Parameters:
  2821                          ;		dividend    	reg:   xa	type: unsigned int 
  2822                          ;		divisor     	offs:   0	type: unsigned int 
  2823                          ; Auto variables:
  2824                          ;		dividend    	       	type: unsigned int 
  2825                          ;		quotient    	       	type: unsigned int 
  2826                          ;		counter     	       	type: unsigned char 
  2827                          ; Return value:
  2828                          ;		type: unsigned int 
  2829                          ;		size: 2
  2830                          ; Registers used:
  2831                          ;		a, x, CUR_PP
  2832                          ; Tracked objects:
  2833                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2834                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  2835                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2836                          ; Data sizes:
  2837                          ;		Autos:    5
  2838                          ;		Params:   2
  2839                          ;		Temp:     0
  2840                          ;		Total:    7
  2841                          ; This function calls:
  2842                          ;		Nothing
  2843                          ; This function is called by:
  2844                          ;		_ShowPMxx
  2845                          ; This function uses a non-reentrant model
  2846                          ; 
  2847  004A                    __size_of___lwdiv	equ	__end_of___lwdiv-___lwdiv
  2848                          ;lwdiv.c: 3: unsigned int
  2849                          ;lwdiv.c: 4: __lwdiv(unsigned int dividend, unsigned int divisor)
  2850                          ;lwdiv.c: 5: {
  2851                          ;			CUR_PP=0 XIO=0 PG=2 
  2852  39A6                    ___lwdiv:
  2853                          ;___lwdiv@dividend stored from xa
  2854  39A6  53 69             	mov	[(??___lwdiv^0+1)], a
  2855  39A8  5A 68             	mov	[??___lwdiv^0], x
  2856                          ;lwdiv.c: 6: unsigned int quotient;
  2857                          ;lwdiv.c: 7: unsigned char counter;
  2858                          ;lwdiv.c: 9: quotient = 0;
  2859  39AA  55 6A  00         	mov	[(??___lwdiv+2)^0], 0
  2860  39AD  55 6B  00         	mov	[((??___lwdiv+2)^0+1)], 0
  2861                          ;lwdiv.c: 10: if(divisor != 0) {
  2862  39B0  51 66             	mov	a, [?___lwdiv^0]
  2863  39B2  2A 67             	or	a, [(?___lwdiv^0+1)]
  2864  39B4  A036              	jz	l246
  2865                          ;lwdiv.c: 11: counter = 1;
  2866  39B6  50 01             	mov	a, 1
  2867                          ;lwdiv.c: 12: while((divisor & 0x8000) == 0) {
  2868  39B8  7D 39C0           	jmp	l247
  2869                          ;			CUR_PP=0 XIO=0 
  2870  39BB                    l248:
  2871                          ;lwdiv.c: 13: divisor <<= 1;
  2872  39BB  65 67             	asl	[(?___lwdiv^0+1)]
  2873  39BD  6B 66             	rlc	[?___lwdiv^0]
  2874                          ;lwdiv.c: 14: counter++;
  2875  39BF  74                	inc	a
  2876                          ;			CUR_PP=0 XIO=0 
  2877  39C0                    l247:
  2878  39C0  47 66  80         	tst	[?___lwdiv^0], 128
  2879  39C3  AFF7              	jz	l248
  2880                          ;			CUR_PP=0 XIO=0 
  2881                          ;lwdiv.c: 15: }
  2882                          ;lwdiv.c: 16: do {
  2883                          ;			CUR_PP=0 XIO=0 
  2884  39C5                    l252:
  2885                          ;lwdiv.c: 17: quotient <<= 1;
  2886  39C5  65 6B             	asl	[((??___lwdiv+2)^0+1)]
  2887  39C7  6B 6A             	rlc	[(??___lwdiv+2)^0]
  2888                          ;___lwdiv@counter stored from a
  2889  39C9  53 6C             	mov	[(??___lwdiv+4)^0], a
  2890                          ;lwdiv.c: 18: if(divisor <= dividend) {
  2891  39CB  51 69             	mov	a, [(??___lwdiv^0+1)]
  2892  39CD  3A 67             	cmp	a, [(?___lwdiv^0+1)]
  2893  39CF  51 68             	mov	a, [??___lwdiv^0]
  2894  39D1  1A 66             	sbb	a, [?___lwdiv^0]
  2895  39D3  C00C              	jc	l253
  2896                          ;lwdiv.c: 19: dividend -= divisor;
  2897  39D5  51 67             	mov	a, [(?___lwdiv^0+1)]
  2898  39D7  14 69             	sub	[(??___lwdiv^0+1)], a
  2899  39D9  51 66             	mov	a, [?___lwdiv^0]
  2900  39DB  1C 68             	sbb	[??___lwdiv^0], a
  2901                          ;lwdiv.c: 20: quotient |= 1;
  2902  39DD  2E 6B  01         	or	[((??___lwdiv+2)^0+1)], 1
  2903                          ;			CUR_PP=0 XIO=0 
  2904  39E0                    l253:
  2905                          ;lwdiv.c: 21: }
  2906                          ;lwdiv.c: 22: divisor >>= 1;
  2907  39E0  70 FB             	and	f, 0xFB
  2908  39E2  6E 66             	rrc	[?___lwdiv^0]
  2909  39E4  6E 67             	rrc	[(?___lwdiv^0+1)]
  2910                          ; ___lwdiv@counter loaded to a
  2911  39E6  51 6C             	mov	a, [(??___lwdiv+4)^0]
  2912                          ;lwdiv.c: 23: } while(--counter != 0);
  2913  39E8  78                	dec	a
  2914  39E9  BFDB              	jnz	l252
  2915                          ;			CUR_PP=0 XIO=0 
  2916                          ;			CUR_PP=0 XIO=0 
  2917  39EB                    l246:
  2918                          ;lwdiv.c: 24: }
  2919                          ;lwdiv.c: 25: return quotient;
  2920  39EB  51 6B             	mov	a, [((??___lwdiv+2)^0+1)]
  2921  39ED  58 6A             	mov	x, [(??___lwdiv+2)^0]
  2922                          ;lwdiv.c: 26: }
  2923                          ;			CUR_PP=0 XIO=0 
  2924  39EF  7F                	ret
  2925  39F0                    __end_of___lwdiv:
  2926                          ; =============== function ___lwdiv ends ============
  2927                          ; *************** function _abs *****************
  2928                          ; Defined at:
  2929                          ;		line 5 in file "../common/abs.c"
  2930                          ; Parameters:
  2931                          ;		a           	reg:   xa	type: int 
  2932                          ; Auto variables:
  2933                          ;		a           	       	type: int 
  2934                          ; Return value:
  2935                          ;		type: int 
  2936                          ;		size: 2
  2937                          ; Registers used:
  2938                          ;		a, x, CUR_PP
  2939                          ; Tracked objects:
  2940                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2941                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  2942                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  2943                          ; Data sizes:
  2944                          ;		Autos:    2
  2945                          ;		Params:   0
  2946                          ;		Temp:     0
  2947                          ;		Total:    2
  2948                          ; This function calls:
  2949                          ;		Nothing
  2950                          ; This function is called by:
  2951                          ;		_ShowHumiTemp
  2952                          ; This function uses a non-reentrant model
  2953                          ; 
  2954  0019                    __size_of_abs	equ	__end_of_abs-_abs
  2955                          ;abs.c: 3: int
  2956                          ;abs.c: 4: abs(int a)
  2957                          ;abs.c: 5: {
  2958                          ;			CUR_PP=0 XIO=0 PG=2 
  2959  39F0                    _abs:
  2960                          ;abs@a stored from xa
  2961  39F0  53 65             	mov	[(??_abs^0+1)], a
  2962  39F2  5A 64             	mov	[??_abs^0], x
  2963                          ;abs.c: 6: if(a < 0)
  2964  39F4  47 64  80         	tst	[??_abs^0], 128
  2965  39F7  A00C              	jz	l234
  2966                          ;abs.c: 7: return -a;
  2967  39F9  50 00             	mov	a, 0
  2968  39FB  12 65             	sub	a, [(??_abs^0+1)]
  2969  39FD  5C                	mov	x, a
  2970  39FE  50 00             	mov	a, 0
  2971  3A00  1A 64             	sbb	a, [??_abs^0]
  2972  3A02  4B                	swap	a, x
  2973  3A03  7F                	ret
  2974                          ;			CUR_PP=0 XIO=0 PG=2 
  2975  3A04                    l234:
  2976                          ;abs.c: 8: return a;
  2977  3A04  51 65             	mov	a, [(??_abs^0+1)]
  2978  3A06  58 64             	mov	x, [??_abs^0]
  2979                          ;abs.c: 9: }
  2980                          ;			CUR_PP=0 XIO=0 PG=2 
  2981  3A08  7F                	ret
  2982  3A09                    __end_of_abs:
  2983                          ; =============== function _abs ends ============
  2984                          ; *************** function ___lwmod *****************
  2985                          ; Defined at:
  2986                          ;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\HCPSOC\PRO\9.61\sources\lwmod.c"
  2987                          ; Parameters:
  2988                          ;		dividend    	reg:   xa	type: unsigned int 
  2989                          ;		divisor     	offs:   0	type: unsigned int 
  2990                          ; Auto variables:
  2991                          ;		dividend    	       	type: unsigned int 
  2992                          ;		counter     	       	type: unsigned char 
  2993                          ; Return value:
  2994                          ;		type: unsigned int 
  2995                          ;		size: 2
  2996                          ; Registers used:
  2997                          ;		a, x, CUR_PP
  2998                          ; Tracked objects:
  2999                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3000                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3001                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3002                          ; Data sizes:
  3003                          ;		Autos:    3
  3004                          ;		Params:   2
  3005                          ;		Temp:     0
  3006                          ;		Total:    5
  3007                          ; This function calls:
  3008                          ;		Nothing
  3009                          ; This function is called by:
  3010                          ;		_ShowPMxx
  3011                          ; This function uses a non-reentrant model
  3012                          ; 
  3013  003C                    __size_of___lwmod	equ	__end_of___lwmod-___lwmod
  3014                          ;lwmod.c: 3: unsigned int
  3015                          ;lwmod.c: 4: __lwmod(unsigned int dividend, unsigned int divisor)
  3016                          ;lwmod.c: 5: {
  3017                          ;			CUR_PP=0 XIO=0 PG=2 
  3018  3A09                    ___lwmod:
  3019                          ;___lwmod@dividend stored from xa
  3020  3A09  53 69             	mov	[(??___lwmod^0+1)], a
  3021  3A0B  5A 68             	mov	[??___lwmod^0], x
  3022                          ;lwmod.c: 6: unsigned char counter;
  3023                          ;lwmod.c: 8: if(divisor != 0) {
  3024  3A0D  51 66             	mov	a, [?___lwmod^0]
  3025  3A0F  2A 67             	or	a, [(?___lwmod^0+1)]
  3026  3A11  A02E              	jz	l255
  3027                          ;lwmod.c: 9: counter = 1;
  3028  3A13  55 6A  01         	mov	[(??___lwmod+2)^0], 1
  3029                          ;lwmod.c: 10: while((divisor & 0x8000) == 0) {
  3030  3A16  7D 3A1F           	jmp	l256
  3031                          ;			CUR_PP=0 XIO=0 
  3032  3A19                    l257:
  3033                          ;lwmod.c: 11: divisor <<= 1;
  3034  3A19  65 67             	asl	[(?___lwmod^0+1)]
  3035  3A1B  6B 66             	rlc	[?___lwmod^0]
  3036                          ;lwmod.c: 12: counter++;
  3037  3A1D  76 6A             	inc	[(??___lwmod+2)^0]
  3038                          ;			CUR_PP=0 XIO=0 
  3039  3A1F                    l256:
  3040  3A1F  47 66  80         	tst	[?___lwmod^0], 128
  3041  3A22  AFF6              	jz	l257
  3042                          ;			CUR_PP=0 XIO=0 
  3043                          ;lwmod.c: 13: }
  3044                          ;lwmod.c: 14: do {
  3045                          ;			CUR_PP=0 XIO=0 
  3046  3A24                    l261:
  3047                          ;lwmod.c: 15: if(divisor <= dividend)
  3048  3A24  51 69             	mov	a, [(??___lwmod^0+1)]
  3049  3A26  3A 67             	cmp	a, [(?___lwmod^0+1)]
  3050  3A28  51 68             	mov	a, [??___lwmod^0]
  3051  3A2A  1A 66             	sbb	a, [?___lwmod^0]
  3052  3A2C  C009              	jc	l262
  3053                          ;lwmod.c: 16: dividend -= divisor;
  3054  3A2E  51 67             	mov	a, [(?___lwmod^0+1)]
  3055  3A30  14 69             	sub	[(??___lwmod^0+1)], a
  3056  3A32  51 66             	mov	a, [?___lwmod^0]
  3057  3A34  1C 68             	sbb	[??___lwmod^0], a
  3058                          ;			CUR_PP=0 XIO=0 
  3059  3A36                    l262:
  3060                          ;lwmod.c: 17: divisor >>= 1;
  3061  3A36  70 FB             	and	f, 0xFB
  3062  3A38  6E 66             	rrc	[?___lwmod^0]
  3063  3A3A  6E 67             	rrc	[(?___lwmod^0+1)]
  3064                          ;lwmod.c: 18: } while(--counter != 0);
  3065  3A3C  7A 6A             	dec	[(??___lwmod+2)^0]
  3066  3A3E  BFE5              	jnz	l261
  3067                          ;			CUR_PP=0 XIO=0 
  3068                          ;			CUR_PP=0 XIO=0 
  3069  3A40                    l255:
  3070                          ;lwmod.c: 19: }
  3071                          ;lwmod.c: 20: return dividend;
  3072  3A40  51 69             	mov	a, [(??___lwmod^0+1)]
  3073  3A42  58 68             	mov	x, [??___lwmod^0]
  3074                          ;lwmod.c: 21: }
  3075                          ;			CUR_PP=0 XIO=0 
  3076  3A44  7F                	ret
  3077  3A45                    __end_of___lwmod:
  3078                          ; =============== function ___lwmod ends ============
  3079                          ; *************** function _SendByte *****************
  3080                          ; Defined at:
  3081                          ;		line 88 in file "./software_iic.c"
  3082                          ; Parameters:
  3083                          ;		c           	reg:    a	type: unsigned char 
  3084                          ; Auto variables:
  3085                          ;		c           	       	type: unsigned char 
  3086                          ;		BitCnt      	       	type: unsigned char 
  3087                          ; Return value:
  3088                          ;		type: void 
  3089                          ;		size: 0
  3090                          ; Registers used:
  3091                          ;		a, x, CUR_PP
  3092                          ; Tracked objects:
  3093                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3094                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3095                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3096                          ; Data sizes:
  3097                          ;		Autos:    2
  3098                          ;		Params:   0
  3099                          ;		Temp:     1
  3100                          ;		Total:    3
  3101                          ; This function calls:
  3102                          ;		_delay_us
  3103                          ;		_ChangeToRead
  3104                          ;		_ChangeToOD
  3105                          ; This function is called by:
  3106                          ;		_ISendByte
  3107                          ;		_IRcvBytes
  3108                          ; This function uses a non-reentrant model
  3109                          ; 
  3110  007A                    __size_of_SendByte	equ	__end_of_SendByte-_SendByte
  3111                          ;software_iic.c: 87: void SendByte(unsigned char c)
  3112                          ;software_iic.c: 88: {
  3113                          ;			CUR_PP=0 XIO=0 PG=2 
  3114  3A45                    _SendByte:
  3115                          ;SendByte@c stored from a
  3116  3A45  53 66             	mov	[??_SendByte^0], a
  3117                          ;software_iic.c: 89: unsigned char BitCnt;
  3118                          ;software_iic.c: 91: for(BitCnt=0;BitCnt<8;BitCnt++)
  3119  3A47  55 67  00         	mov	[(??_SendByte+1)^0], 0
  3120                          ;			CUR_PP=0 XIO=0 
  3121  3A4A                    l179:
  3122                          ;software_iic.c: 92: {
  3123                          ;software_iic.c: 93: if((c<<BitCnt)&0x80)
  3124  3A4A  5F 68  67         	mov	[(??_SendByte^0+2)], [(??_SendByte+1)^0]
  3125  3A4D  51 66             	mov	a, [??_SendByte^0]
  3126  3A4F  7D 3A53           	jmp	u313
  3127  3A52                    u314:
  3128  3A52  64                	asl	a
  3129  3A53                    u313:
  3130  3A53  7A 68             	dec	[(??_SendByte^0+2)]
  3131  3A55  DFFC              	jnc	u314
  3132  3A57  21 80             	and	a, 0x80
  3133  3A59  A007              	jz	l182
  3134                          ;software_iic.c: 94: {
  3135                          ;software_iic.c: 95: PRT1DR |= 0x20;
  3136  3A5B  43 04 20          	or	reg[4], 0x20
  3137                          ;software_iic.c: 96: }
  3138  3A5E  7D 3A64           	jmp	l183
  3139                          ;			CUR_PP=0 XIO=0 
  3140  3A61                    l182:
  3141                          ;software_iic.c: 97: else
  3142                          ;software_iic.c: 98: {
  3143                          ;software_iic.c: 99: PRT1DR &= ~0x20;
  3144  3A61  41 04 DF          	and	reg[4], 0xDF
  3145                          ;			CUR_PP=0 XIO=0 
  3146  3A64                    l183:
  3147                          ;software_iic.c: 100: }
  3148                          ;software_iic.c: 101: delay_us(1);
  3149  3A64  50 01             	mov	a, 1
  3150  3A66  57 00             	mov	x, 0
  3151  3A68  71 80             	or	f, 0x80	;select multiple RAM page mode
  3152  3A6A  7C 3B26           	call	_delay_us
  3153                          ;software_iic.c: 102: PRT1DR |= 0x80;
  3154  3A6D  43 04 80          	or	reg[4], 0x80
  3155                          ;software_iic.c: 103: delay_us(1);
  3156  3A70  50 01             	mov	a, 1
  3157  3A72  57 00             	mov	x, 0
  3158  3A74  71 80             	or	f, 0x80	;select multiple RAM page mode
  3159  3A76  7C 3B26           	call	_delay_us
  3160                          ;software_iic.c: 104: PRT1DR &= ~0x80;
  3161  3A79  41 04 7F          	and	reg[4], 0x7F
  3162                          ;software_iic.c: 105: delay_us(1);
  3163  3A7C  50 01             	mov	a, 1
  3164  3A7E  57 00             	mov	x, 0
  3165  3A80  71 80             	or	f, 0x80	;select multiple RAM page mode
  3166  3A82  7C 3B26           	call	_delay_us
  3167  3A85  76 67             	inc	[(??_SendByte+1)^0]
  3168  3A87  3C 67  08         	cmp	[(??_SendByte+1)^0], 8
  3169  3A8A  CFBF              	jc	l179
  3170                          ;			CUR_PP=0 XIO=0 
  3171                          ;software_iic.c: 106: }
  3172                          ;software_iic.c: 107: ChangeToRead();
  3173  3A8C  71 80             	or	f, 0x80	;select multiple RAM page mode
  3174  3A8E  7C 3B15           	call	_ChangeToRead
  3175                          ;software_iic.c: 108: delay_us(2);
  3176  3A91  50 02             	mov	a, 2
  3177  3A93  57 00             	mov	x, 0
  3178  3A95  71 80             	or	f, 0x80	;select multiple RAM page mode
  3179  3A97  7C 3B26           	call	_delay_us
  3180                          ;software_iic.c: 109: PRT1DR |= 0x80;
  3181  3A9A  43 04 80          	or	reg[4], 0x80
  3182                          ;software_iic.c: 110: delay_us(1);
  3183  3A9D  50 01             	mov	a, 1
  3184  3A9F  57 00             	mov	x, 0
  3185  3AA1  71 80             	or	f, 0x80	;select multiple RAM page mode
  3186  3AA3  7C 3B26           	call	_delay_us
  3187                          ;software_iic.c: 111: if(PRT1DR&0x20)
  3188  3AA6  49 04 20          	tst	reg[4], 32
  3189  3AA9  A007              	jz	l184
  3190                          ;software_iic.c: 112: {
  3191                          ;software_iic.c: 113: ack=0;
  3192  3AAB  55 4B  00         	mov	[_ack^0], 0
  3193                          ;software_iic.c: 114: }
  3194  3AAE  7D 3AB4           	jmp	l185
  3195                          ;			CUR_PP=0 XIO=0 
  3196  3AB1                    l184:
  3197                          ;software_iic.c: 115: else
  3198                          ;software_iic.c: 116: {
  3199                          ;software_iic.c: 117: ack=1;
  3200  3AB1  55 4B  01         	mov	[_ack^0], 1
  3201                          ;			CUR_PP=0 XIO=0 
  3202  3AB4                    l185:
  3203                          ;software_iic.c: 118: }
  3204                          ;software_iic.c: 119: ChangeToOD();
  3205  3AB4  71 80             	or	f, 0x80	;select multiple RAM page mode
  3206  3AB6  7C 3B06           	call	_ChangeToOD
  3207                          ;software_iic.c: 120: PRT1DR &= ~0x80;
  3208  3AB9  41 04 7F          	and	reg[4], 0x7F
  3209  3ABC  40                	nop	;#
  3210  3ABD  40                	nop	;#
  3211                          ;software_iic.c: 121: asm("nop");
  3212                          ;software_iic.c: 122: asm("nop");
  3213                          ;software_iic.c: 123: }
  3214                          ;			CUR_PP=0 XIO=0 
  3215  3ABE  7F                	ret
  3216  3ABF                    __end_of_SendByte:
  3217                          ; =============== function _SendByte ends ============
  3218                          ; *************** function _Start_I2c *****************
  3219                          ; Defined at:
  3220                          ;		line 56 in file "./software_iic.c"
  3221                          ; Parameters:
  3222                          ;		None
  3223                          ; Auto variables:
  3224                          ;		None
  3225                          ; Return value:
  3226                          ;		type: void 
  3227                          ;		size: 0
  3228                          ; Registers used:
  3229                          ;		a, x, CUR_PP
  3230                          ; Tracked objects:
  3231                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3232                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3233                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3234                          ; Data sizes:
  3235                          ;		Autos:    0
  3236                          ;		Params:   0
  3237                          ;		Temp:     0
  3238                          ;		Total:    0
  3239                          ; This function calls:
  3240                          ;		_delay_us
  3241                          ; This function is called by:
  3242                          ;		_ISendByte
  3243                          ;		_IRcvBytes
  3244                          ; This function uses a non-reentrant model
  3245                          ; 
  3246  0025                    __size_of_Start_I2c	equ	__end_of_Start_I2c-_Start_I2c
  3247                          ;software_iic.c: 55: void Start_I2c(void)
  3248                          ;software_iic.c: 56: {
  3249                          ;			CUR_PP=0 XIO=0 PG=2 
  3250  3ABF                    _Start_I2c:
  3251                          ;software_iic.c: 57: PRT1DR |= 0x20;
  3252  3ABF  43 04 20          	or	reg[4], 0x20
  3253                          ;software_iic.c: 58: PRT1DR |= 0x80;
  3254  3AC2  43 04 80          	or	reg[4], 0x80
  3255                          ;software_iic.c: 59: delay_us(2);
  3256  3AC5  50 02             	mov	a, 2
  3257  3AC7  57 00             	mov	x, 0
  3258  3AC9  7C 3B26           	call	_delay_us
  3259                          ;software_iic.c: 60: PRT1DR &= ~0x20;
  3260  3ACC  41 04 DF          	and	reg[4], 0xDF
  3261                          ;software_iic.c: 61: delay_us(1);
  3262  3ACF  50 01             	mov	a, 1
  3263  3AD1  57 00             	mov	x, 0
  3264  3AD3  71 80             	or	f, 0x80	;select multiple RAM page mode
  3265  3AD5  7C 3B26           	call	_delay_us
  3266                          ;software_iic.c: 62: PRT1DR &= ~0x80;
  3267  3AD8  41 04 7F          	and	reg[4], 0x7F
  3268                          ;software_iic.c: 63: delay_us(1);
  3269  3ADB  50 01             	mov	a, 1
  3270  3ADD  57 00             	mov	x, 0
  3271  3ADF  71 80             	or	f, 0x80	;select multiple RAM page mode
  3272  3AE1  7D 3B26           	jmp	_delay_us
  3273                          ;software_iic.c: 64: }
  3274                          ;			CUR_PP=0 XIO=0 
  3275  3AE4                    __end_of_Start_I2c:
  3276                          ; =============== function _Start_I2c ends ============
  3277                          ; *************** function _Stop_I2c *****************
  3278                          ; Defined at:
  3279                          ;		line 72 in file "./software_iic.c"
  3280                          ; Parameters:
  3281                          ;		None
  3282                          ; Auto variables:
  3283                          ;		None
  3284                          ; Return value:
  3285                          ;		type: void 
  3286                          ;		size: 0
  3287                          ; Registers used:
  3288                          ;		a, x, CUR_PP
  3289                          ; Tracked objects:
  3290                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3291                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3292                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3293                          ; Data sizes:
  3294                          ;		Autos:    0
  3295                          ;		Params:   0
  3296                          ;		Temp:     0
  3297                          ;		Total:    0
  3298                          ; This function calls:
  3299                          ;		_delay_us
  3300                          ; This function is called by:
  3301                          ;		_ISendByte
  3302                          ;		_IRcvBytes
  3303                          ; This function uses a non-reentrant model
  3304                          ; 
  3305  0022                    __size_of_Stop_I2c	equ	__end_of_Stop_I2c-_Stop_I2c
  3306                          ;software_iic.c: 71: void Stop_I2c(void)
  3307                          ;software_iic.c: 72: {
  3308                          ;			CUR_PP=0 XIO=0 PG=2 
  3309  3AE4                    _Stop_I2c:
  3310                          ;software_iic.c: 73: PRT1DR &= ~0x20;
  3311  3AE4  41 04 DF          	and	reg[4], 0xDF
  3312                          ;software_iic.c: 74: delay_us(1);
  3313  3AE7  50 01             	mov	a, 1
  3314  3AE9  57 00             	mov	x, 0
  3315  3AEB  7C 3B26           	call	_delay_us
  3316                          ;software_iic.c: 75: PRT1DR |= 0x80;
  3317  3AEE  43 04 80          	or	reg[4], 0x80
  3318                          ;software_iic.c: 76: delay_us(1);
  3319  3AF1  50 01             	mov	a, 1
  3320  3AF3  57 00             	mov	x, 0
  3321  3AF5  71 80             	or	f, 0x80	;select multiple RAM page mode
  3322  3AF7  7C 3B26           	call	_delay_us
  3323                          ;software_iic.c: 77: PRT1DR |= 0x20;
  3324  3AFA  43 04 20          	or	reg[4], 0x20
  3325                          ;software_iic.c: 78: delay_us(1);
  3326  3AFD  50 01             	mov	a, 1
  3327  3AFF  57 00             	mov	x, 0
  3328  3B01  71 80             	or	f, 0x80	;select multiple RAM page mode
  3329  3B03  7D 3B26           	jmp	_delay_us
  3330                          ;software_iic.c: 79: }
  3331                          ;			CUR_PP=0 XIO=0 
  3332  3B06                    __end_of_Stop_I2c:
  3333                          ; =============== function _Stop_I2c ends ============
  3334                          ; *************** function _ChangeToOD *****************
  3335                          ; Defined at:
  3336                          ;		line 37 in file "./software_iic.c"
  3337                          ; Parameters:
  3338                          ;		None
  3339                          ; Auto variables:
  3340                          ;		None
  3341                          ; Return value:
  3342                          ;		type: void 
  3343                          ;		size: 0
  3344                          ; Registers used:
  3345                          ;		a, x, CUR_PP
  3346                          ; Tracked objects:
  3347                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3348                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3349                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3350                          ; Data sizes:
  3351                          ;		Autos:    0
  3352                          ;		Params:   0
  3353                          ;		Temp:     0
  3354                          ;		Total:    0
  3355                          ; This function calls:
  3356                          ;		_delay_us
  3357                          ; This function is called by:
  3358                          ;		_SendByte
  3359                          ;		_RcvByte
  3360                          ; This function uses a non-reentrant model
  3361                          ; 
  3362  000F                    __size_of_ChangeToOD	equ	__end_of_ChangeToOD-_ChangeToOD
  3363                          ;software_iic.c: 36: void ChangeToOD(void)
  3364                          ;software_iic.c: 37: {
  3365                          ;			CUR_PP=0 XIO=0 PG=2 
  3366  3B06                    _ChangeToOD:
  3367                          ;software_iic.c: 38: PRT1DM2 |= (0x20);
  3368  3B06  43 07 20          	or	reg[7], 0x20
  3369                          ;software_iic.c: 40: PRT1DM0 |= (0x20);
  3370  3B09  71 10             	or	f, 0x10	; select config register space
  3371  3B0B  43 04 20          	or	reg[4], 0x20
  3372                          ;software_iic.c: 41: delay_us(1);
  3373  3B0E  50 01             	mov	a, 1
  3374  3B10  57 00             	mov	x, 0
  3375  3B12  7D 3B26           	jmp	_delay_us
  3376                          ;software_iic.c: 42: }
  3377                          ;			CUR_PP=0 XIO=0 
  3378  3B15                    __end_of_ChangeToOD:
  3379                          ; =============== function _ChangeToOD ends ============
  3380                          ; *************** function _ChangeToRead *****************
  3381                          ; Defined at:
  3382                          ;		line 30 in file "./software_iic.c"
  3383                          ; Parameters:
  3384                          ;		None
  3385                          ; Auto variables:
  3386                          ;		None
  3387                          ; Return value:
  3388                          ;		type: void 
  3389                          ;		size: 0
  3390                          ; Registers used:
  3391                          ;		a, x, CUR_PP
  3392                          ; Tracked objects:
  3393                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3394                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3395                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3396                          ; Data sizes:
  3397                          ;		Autos:    0
  3398                          ;		Params:   0
  3399                          ;		Temp:     0
  3400                          ;		Total:    0
  3401                          ; This function calls:
  3402                          ;		_delay_us
  3403                          ; This function is called by:
  3404                          ;		_SendByte
  3405                          ;		_RcvByte
  3406                          ; This function uses a non-reentrant model
  3407                          ; 
  3408  0011                    __size_of_ChangeToRead	equ	__end_of_ChangeToRead-_ChangeToRead
  3409                          ;software_iic.c: 29: void ChangeToRead(void)
  3410                          ;software_iic.c: 30: {
  3411                          ;			CUR_PP=0 XIO=0 PG=2 
  3412  3B15                    _ChangeToRead:
  3413                          ;software_iic.c: 31: PRT1DM0 &= ~(0x20);
  3414  3B15  71 10             	or	f, 0x10	; select config register space
  3415  3B17  41 04 DF          	and	reg[4], 0xDF
  3416                          ;software_iic.c: 32: PRT1DM2 &= ~(0x20);
  3417  3B1A  70 CF             	and	f, 0xCF	;select user reg space
  3418  3B1C  41 07 DF          	and	reg[7], 0xDF
  3419                          ;software_iic.c: 33: delay_us(1);
  3420  3B1F  50 01             	mov	a, 1
  3421  3B21  57 00             	mov	x, 0
  3422  3B23  7D 3B26           	jmp	_delay_us
  3423                          ;software_iic.c: 34: }
  3424                          ;			CUR_PP=0 XIO=0 
  3425  3B26                    __end_of_ChangeToRead:
  3426                          ; =============== function _ChangeToRead ends ============
  3427                          ; *************** function _delay_us *****************
  3428                          ; Defined at:
  3429                          ;		line 8 in file "./software_iic.c"
  3430                          ; Parameters:
  3431                          ;		us          	reg:   xa	type: unsigned int 
  3432                          ; Auto variables:
  3433                          ;		us          	       	type: unsigned int 
  3434                          ; Return value:
  3435                          ;		type: void 
  3436                          ;		size: 0
  3437                          ; Registers used:
  3438                          ;		a, x, CUR_PP
  3439                          ; Tracked objects:
  3440                          ;		On entry : CUR_PP=0 IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3441                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3442                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3443                          ; Data sizes:
  3444                          ;		Autos:    2
  3445                          ;		Params:   0
  3446                          ;		Temp:     0
  3447                          ;		Total:    2
  3448                          ; This function calls:
  3449                          ;		Nothing
  3450                          ; This function is called by:
  3451                          ;		_ChangeToRead
  3452                          ;		_ChangeToOD
  3453                          ;		_Start_I2c
  3454                          ;		_Stop_I2c
  3455                          ;		_SendByte
  3456                          ;		_RcvByte
  3457                          ;		_Ack_I2c
  3458                          ; This function uses a non-reentrant model
  3459                          ; 
  3460  001E                    __size_of_delay_us	equ	__end_of_delay_us-_delay_us
  3461                          ;software_iic.c: 7: void delay_us(unsigned int us)
  3462                          ;software_iic.c: 8: {
  3463                          ;			CUR_PP=0 PG=2 
  3464  3B26                    _delay_us:
  3465                          ;delay_us@us stored from xa
  3466  3B26  53 6A             	mov	[(??_delay_us^0+1)], a
  3467  3B28  5A 69             	mov	[??_delay_us^0], x
  3468                          ;software_iic.c: 9: for (;us>0;us--)
  3469  3B2A  51 69             	mov	a, [??_delay_us^0]
  3470  3B2C  2A 6A             	or	a, [(??_delay_us^0+1)]
  3471  3B2E  A012              	jz	l171
  3472                          ;			CUR_PP=0 
  3473  3B30                    l170:
  3474  3B30  40                	nop	;#
  3475  3B31  40                	nop	;#
  3476  3B32  40                	nop	;#
  3477  3B33  40                	nop	;#
  3478  3B34  40                	nop	;#
  3479  3B35  40                	nop	;#
  3480                          ;software_iic.c: 10: {
  3481                          ;software_iic.c: 11: asm ("NOP");
  3482                          ;software_iic.c: 12: asm ("NOP");
  3483                          ;software_iic.c: 13: asm ("NOP");
  3484                          ;software_iic.c: 14: asm ("NOP");
  3485                          ;software_iic.c: 15: asm ("NOP");
  3486                          ;software_iic.c: 16: asm ("NOP");
  3487  3B36  7A 6A             	dec	[(??_delay_us^0+1)]
  3488  3B38  1E 69  00         	sbb	[??_delay_us^0], 0
  3489  3B3B  51 69             	mov	a, [??_delay_us^0]
  3490  3B3D  2A 6A             	or	a, [(??_delay_us^0+1)]
  3491  3B3F  BFF0              	jnz	l170
  3492                          ;			CUR_PP=0 
  3493  3B41                    l171:
  3494                          ;software_iic.c: 17: }
  3495                          ;software_iic.c: 18: }
  3496                          ;			CUR_PP=0 
  3497  3B41  70 CF             	and	f, 0xCF	;select user reg space
  3498  3B43  7F                	ret
  3499  3B44                    __end_of_delay_us:
  3500                          ; =============== function _delay_us ends ============
  3501                          ; *************** function _BoardUART *****************
  3502                          ; Defined at:
  3503                          ;		line 12 in file "./boardcommunication.c"
  3504                          ; Parameters:
  3505                          ;		None
  3506                          ; Auto variables:
  3507                          ;		None
  3508                          ; Return value:
  3509                          ;		type: void 
  3510                          ;		size: 0
  3511                          ; Registers used:
  3512                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3513                          ; Tracked objects:
  3514                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3515                          ;		On exit  : CUR_PP? IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3516                          ;		Unchanged: 
  3517                          ; Data sizes:
  3518                          ;		Autos:    0
  3519                          ;		Params:   0
  3520                          ;		Temp:     0
  3521                          ;		Total:    0
  3522                          ; This function calls:
  3523                          ;		_UART_Board_bReadRxData
  3524                          ; This function is called by:
  3525                          ;		Interrupt level 2
  3526                          ; This function uses a non-reentrant model
  3527                          ; 
  3528  0005                    __size_of_BoardUART	equ	__end_of_BoardUART-_BoardUART
  3529                          ;boardcommunication.c: 11: void BoardUART(void )
  3530                          ;boardcommunication.c: 12: {
  3531                          ;			PG=2 
  3532  3B44                    _BoardUART:
  3533                          ;boardcommunication.c: 13: unsigned char rxdata;
  3534                          ;boardcommunication.c: 15: rxdata = UART_Board_bReadRxData();
  3535  3B44  70 CF             	and	f, 0xCF	;select user reg space
  3536  3B46  7D 2E68           	jmp	_UART_Board_bReadRxData
  3537                          ;boardcommunication.c: 19: }
  3538                          ;			XIO=0 PG=2 
  3539  3B49                    __end_of_BoardUART:
  3540                          ; =============== function _BoardUART ends ============
  3541                          ; *************** function _Timer8ISR *****************
  3542                          ; Defined at:
  3543                          ;		line 26 in file "./main.c"
  3544                          ; Parameters:
  3545                          ;		None
  3546                          ; Auto variables:
  3547                          ;		None
  3548                          ; Return value:
  3549                          ;		type: void 
  3550                          ;		size: 0
  3551                          ; Registers used:
  3552                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3553                          ; Tracked objects:
  3554                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3555                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3556                          ;		Unchanged: 
  3557                          ; Data sizes:
  3558                          ;		Autos:    0
  3559                          ;		Params:   0
  3560                          ;		Temp:     1
  3561                          ;		Total:    1
  3562                          ; This function calls:
  3563                          ;		_Timer8_WritePeriod
  3564                          ;		_ShiftRegOutput
  3565                          ; This function is called by:
  3566                          ;		Interrupt level 2
  3567                          ; This function uses a non-reentrant model
  3568                          ; 
  3569  005A                    __size_of_Timer8ISR	equ	__end_of_Timer8ISR-_Timer8ISR
  3570                          ;main.c: 21: unsigned int *p = (unsigned int *)DisplayBuf;
  3571                          ;main.c: 22: unsigned char RHSampleStep = 0;
  3572                          ;main.c: 23: unsigned char DeadZone = 0;
  3573                          ;main.c: 24: unsigned int Si7020Data;
  3574                          ;main.c: 25: void Timer8ISR(void)
  3575                          ;main.c: 26: {
  3576                          ;			PG=2 
  3577  3B49                    _Timer8ISR:
  3578                          ;main.c: 27: if (DeadZone)
  3579  3B49  70 CF             	and	f, 0xCF	;select user reg space
  3580  3B4B  62 D0 00          	mov	reg[208], 0
  3581  3B4E  51 40             	mov	a, [_DeadZone^0]
  3582  3B50  A019              	jz	l89
  3583                          ;main.c: 28: {
  3584                          ;main.c: 29: Timer8_WritePeriod(79);
  3585  3B52  50 4F             	mov	a, 79
  3586  3B54  7C 2DF9           	call	_Timer8_WritePeriod
  3587                          ;main.c: 30: DisplayBuf[0] = 0xff;
  3588  3B57  62 D0 00          	mov	reg[208], 0
  3589  3B5A  55 51  FF         	mov	[_DisplayBuf^0], 255
  3590                          ;main.c: 31: DisplayBuf[1] = 0xff;
  3591  3B5D  55 52  FF         	mov	[(_DisplayBuf+1)^0], 255
  3592                          ;main.c: 32: DisplayBuf[2] = 0xff;
  3593  3B60  55 53  FF         	mov	[(_DisplayBuf+2)^0], 255
  3594                          ;main.c: 33: ShiftRegOutput();
  3595  3B63  7C 3BA3           	call	_ShiftRegOutput
  3596                          ;main.c: 34: DeadZone = 0;
  3597  3B66  55 40  00         	mov	[_DeadZone^0], 0
  3598                          ;main.c: 35: }
  3599  3B69  7F                	ret
  3600                          ;			CUR_PP=0 XIO=0 PG=2 
  3601  3B6A                    l89:
  3602                          ;main.c: 36: else
  3603                          ;main.c: 37: {
  3604                          ;main.c: 38: Timer8_WritePeriod(159);
  3605  3B6A  50 9F             	mov	a, 159
  3606  3B6C  7C 2DF9           	call	_Timer8_WritePeriod
  3607                          ;main.c: 39: *p = DisplayContent[DisPlayIndex];
  3608  3B6F  62 D0 00          	mov	reg[208], 0
  3609  3B72  51 41             	mov	a, [_DisPlayIndex^0]
  3610  3B74  64                	asl	a
  3611  3B75  01 28             	add	a, <(<_DisplayContent)
  3612  3B77  5C                	mov	x, a
  3613  3B78  62 D3 00          	mov	reg[211], 0
  3614  3B7B  52 00             	mov	a, [x+0]
  3615  3B7D  08                	push	a
  3616  3B7E  52 01             	mov	a, [x+1]
  3617  3B80  58 55             	mov	x, [_p^0]
  3618  3B82  54 01             	mov	[x+1], a
  3619  3B84  18                	pop	a
  3620  3B85  54 00             	mov	[x+0], a
  3621                          ;main.c: 41: DisplayBuf[2] = DisBit[DisPlayIndex];
  3622  3B87  51 41             	mov	a, [_DisPlayIndex^0]
  3623  3B89  01 14             	add	a, <_DisBit
  3624  3B8B  5C                	mov	x, a
  3625  3B8C  50 3E             	mov	a, >_DisBit
  3626  3B8E  28                	romx
  3627  3B8F  53 53             	mov	[(_DisplayBuf+2)^0], a
  3628                          ;main.c: 43: ShiftRegOutput();
  3629  3B91  7C 3BA3           	call	_ShiftRegOutput
  3630                          ;main.c: 45: DisPlayIndex++;
  3631  3B94  76 41             	inc	[_DisPlayIndex^0]
  3632                          ;main.c: 46: if(DisPlayIndex >= IndexEnd)
  3633  3B96  51 41             	mov	a, [_DisPlayIndex^0]
  3634  3B98  3A 5A             	cmp	a, [_IndexEnd^0]
  3635  3B9A  C004              	jc	l91
  3636                          ;main.c: 47: {
  3637                          ;main.c: 48: DisPlayIndex = IndexStart;
  3638  3B9C  5F 41  46         	mov	[_DisPlayIndex^0], [_IndexStart^0]
  3639                          ;			CUR_PP=0 XIO=0 
  3640  3B9F                    l91:
  3641                          ;main.c: 49: }
  3642                          ;main.c: 50: DeadZone = 1;
  3643  3B9F  55 40  01         	mov	[_DeadZone^0], 1
  3644                          ;			CUR_PP=0 XIO=0 
  3645                          ;main.c: 51: }
  3646                          ;main.c: 52: }
  3647                          ;			CUR_PP=0 XIO=0 
  3648  3BA2  7F                	ret
  3649  3BA3                    __end_of_Timer8ISR:
  3650                          ; =============== function _Timer8ISR ends ============
  3651                          ; *************** function _ShiftRegOutput *****************
  3652                          ; Defined at:
  3653                          ;		line 7 in file "./t74hc595.c"
  3654                          ; Parameters:
  3655                          ;		None
  3656                          ; Auto variables:
  3657                          ;		k           	       	type: unsigned char 
  3658                          ;		temp_data   	       	type: unsigned char 
  3659                          ;		i           	       	type: unsigned char 
  3660                          ; Return value:
  3661                          ;		type: void 
  3662                          ;		size: 0
  3663                          ; Registers used:
  3664                          ;		a, x, CUR_PP
  3665                          ; Tracked objects:
  3666                          ;		On entry : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3667                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG? MVR_PP? MVW_PP? 
  3668                          ;		Unchanged: MVR_PP MVW_PP 
  3669                          ; Data sizes:
  3670                          ;		Autos:    3
  3671                          ;		Params:   0
  3672                          ;		Temp:     0
  3673                          ;		Total:    3
  3674                          ; This function calls:
  3675                          ;		Nothing
  3676                          ; This function is called by:
  3677                          ;		_Timer8ISR
  3678                          ; This function uses a non-reentrant model
  3679                          ; 
  3680  004F                    __size_of_ShiftRegOutput	equ	__end_of_ShiftRegOutput-_ShiftRegOutput
  3681                          ;t74hc595.c: 6: void ShiftRegOutput(void)
  3682                          ;t74hc595.c: 7: {
  3683                          ;			CUR_PP=0 XIO=0 PG=2 
  3684  3BA3                    _ShiftRegOutput:
  3685                          ;t74hc595.c: 8: unsigned char i,k;
  3686                          ;t74hc595.c: 9: unsigned char temp_data=0x00;
  3687                          ;t74hc595.c: 11: (PRT0DR |= 0x2);
  3688  3BA3  43 00 02          	or	reg[0], 2
  3689  3BA6  40                	nop	;#
  3690  3BA7  40                	nop	;#
  3691  3BA8  40                	nop	;#
  3692  3BA9  40                	nop	;#
  3693                          ;t74hc595.c: 12: asm ("NOP");
  3694                          ;t74hc595.c: 13: asm ("NOP");
  3695                          ;t74hc595.c: 14: asm ("NOP");
  3696                          ;t74hc595.c: 15: asm ("NOP");
  3697                          ;t74hc595.c: 17: (PRT0DR &= ~0x80);
  3698  3BAA  41 00 7F          	and	reg[0], 0x7F
  3699  3BAD  40                	nop	;#
  3700  3BAE  40                	nop	;#
  3701  3BAF  40                	nop	;#
  3702  3BB0  40                	nop	;#
  3703                          ;t74hc595.c: 18: asm ("NOP");
  3704                          ;t74hc595.c: 19: asm ("NOP");
  3705                          ;t74hc595.c: 20: asm ("NOP");
  3706                          ;t74hc595.c: 21: asm ("NOP");
  3707                          ;t74hc595.c: 23: for (k=0;k<3;k++)
  3708  3BB1  57 00             	mov	x, 0
  3709                          ;			CUR_PP=0 XIO=0 
  3710  3BB3                    l221:
  3711                          ;t74hc595.c: 24: {
  3712                          ;t74hc595.c: 25: temp_data = DisplayBuf[k];
  3713  3BB3  62 D3 00          	mov	reg[211], 0
  3714  3BB6  52 51             	mov	a, [x+_DisplayBuf]
  3715                          ;t74hc595.c: 26: for (i=0; i < 8; i++)
  3716  3BB8  55 78  00         	mov	[(??_ShiftRegOutput+2)^0], 0
  3717                          ;			CUR_PP=0 XIO=0 
  3718  3BBB                    l224:
  3719                          ;t74hc595.c: 27: {
  3720                          ;t74hc595.c: 28: (PRT0DR &= ~0x20);
  3721  3BBB  41 00 DF          	and	reg[0], 0xDF
  3722  3BBE  40                	nop	;#
  3723  3BBF  40                	nop	;#
  3724                          ;t74hc595.c: 29: asm ("NOP");
  3725                          ;t74hc595.c: 30: asm ("NOP");
  3726                          ;t74hc595.c: 32: if (temp_data & 0x80)
  3727  3BC0  39 80             	cmp	a, 128
  3728  3BC2  C007              	jc	l227
  3729                          ;t74hc595.c: 33: (PRT0DR |= 0x8);
  3730  3BC4  43 00 08          	or	reg[0], 8
  3731  3BC7  7D 3BCD           	jmp	l228
  3732                          ;			CUR_PP=0 XIO=0 
  3733  3BCA                    l227:
  3734                          ;t74hc595.c: 34: else
  3735                          ;t74hc595.c: 35: (PRT0DR &= ~0x8);
  3736  3BCA  41 00 F7          	and	reg[0], 0xF7
  3737                          ;			CUR_PP=0 XIO=0 
  3738  3BCD                    l228:
  3739  3BCD  40                	nop	;#
  3740  3BCE  40                	nop	;#
  3741                          ;t74hc595.c: 37: asm ("NOP");
  3742                          ;t74hc595.c: 38: asm ("NOP");
  3743                          ;t74hc595.c: 40: (PRT0DR |= 0x20);
  3744  3BCF  43 00 20          	or	reg[0], 0x20
  3745  3BD2  40                	nop	;#
  3746  3BD3  40                	nop	;#
  3747                          ;t74hc595.c: 42: asm ("NOP");
  3748                          ;t74hc595.c: 43: asm ("NOP");
  3749                          ;t74hc595.c: 45: temp_data <<= 1;
  3750  3BD4  64                	asl	a
  3751  3BD5  76 78             	inc	[(??_ShiftRegOutput+2)^0]
  3752  3BD7  3C 78  08         	cmp	[(??_ShiftRegOutput+2)^0], 8
  3753  3BDA  CFE0              	jc	l224
  3754                          ;			CUR_PP=0 XIO=0 
  3755  3BDC  75                	inc	x
  3756  3BDD  5B                	mov	a, x
  3757  3BDE  39 03             	cmp	a, 3
  3758  3BE0  CFD2              	jc	l221
  3759                          ;			CUR_PP=0 XIO=0 
  3760  3BE2  40                	nop	;#
  3761  3BE3  40                	nop	;#
  3762  3BE4  40                	nop	;#
  3763                          ;t74hc595.c: 46: }
  3764                          ;t74hc595.c: 47: }
  3765                          ;t74hc595.c: 48: asm ("NOP");
  3766                          ;t74hc595.c: 49: asm ("NOP");
  3767                          ;t74hc595.c: 50: asm ("NOP");
  3768                          ;t74hc595.c: 52: (PRT0DR |= 0x80); ;
  3769  3BE5  43 00 80          	or	reg[0], 0x80
  3770  3BE8  40                	nop	;#
  3771  3BE9  40                	nop	;#
  3772  3BEA  40                	nop	;#
  3773  3BEB  40                	nop	;#
  3774                          ;t74hc595.c: 53: asm ("NOP");
  3775                          ;t74hc595.c: 54: asm ("NOP");
  3776                          ;t74hc595.c: 55: asm ("NOP");
  3777                          ;t74hc595.c: 56: asm ("NOP");
  3778                          ;t74hc595.c: 58: (PRT0DR &= ~0x8);
  3779  3BEC  41 00 F7          	and	reg[0], 0xF7
  3780  3BEF  40                	nop	;#
  3781  3BF0  40                	nop	;#
  3782                          ;t74hc595.c: 59: asm ("NOP");
  3783                          ;t74hc595.c: 60: asm ("NOP");
  3784                          ;t74hc595.c: 61: }
  3785                          ;			CUR_PP=0 XIO=0 
  3786  3BF1  7F                	ret
  3787  3BF2                    __end_of_ShiftRegOutput:
  3788                          ; =============== function _ShiftRegOutput ends ============
  3789                          ; *************** function _Timer16ISR *****************
  3790                          ; Defined at:
  3791                          ;		line 55 in file "./main.c"
  3792                          ; Parameters:
  3793                          ;		None
  3794                          ; Auto variables:
  3795                          ;		None
  3796                          ; Return value:
  3797                          ;		type: void 
  3798                          ;		size: 0
  3799                          ; Registers used:
  3800                          ;		a, CUR_PP
  3801                          ; Tracked objects:
  3802                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3803                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3804                          ;		Unchanged: IDX_PP MVR_PP MVW_PP 
  3805                          ; Data sizes:
  3806                          ;		Autos:    0
  3807                          ;		Params:   0
  3808                          ;		Temp:     0
  3809                          ;		Total:    0
  3810                          ; This function calls:
  3811                          ;		Nothing
  3812                          ; This function is called by:
  3813                          ;		Interrupt level 2
  3814                          ; This function uses a non-reentrant model
  3815                          ; 
  3816  001E                    __size_of_Timer16ISR	equ	__end_of_Timer16ISR-_Timer16ISR
  3817                          ;main.c: 54: void Timer16ISR(void)
  3818                          ;main.c: 55: {
  3819                          ;			PG=2 
  3820  3BF2                    _Timer16ISR:
  3821                          ;main.c: 56: if (one_sec_timer) one_sec_timer--;
  3822  3BF2  70 CF             	and	f, 0xCF	;select user reg space
  3823  3BF4  62 D0 00          	mov	reg[208], 0
  3824  3BF7  51 54             	mov	a, [_one_sec_timer^0]
  3825  3BF9  A003              	jz	l93
  3826  3BFB  7A 54             	dec	[_one_sec_timer^0]
  3827                          ;			CUR_PP=0 XIO=0 PG=2 
  3828  3BFD                    l93:
  3829                          ;main.c: 57: if (rh_sample_timer) rh_sample_timer--;
  3830  3BFD  51 58             	mov	a, [_rh_sample_timer^0]
  3831  3BFF  A003              	jz	l94
  3832  3C01  7A 58             	dec	[_rh_sample_timer^0]
  3833                          ;			CUR_PP=0 XIO=0 PG=2 
  3834  3C03                    l94:
  3835                          ;main.c: 58: if (IICTimeOutTimer) IICTimeOutTimer--;
  3836  3C03  51 45             	mov	a, [_IICTimeOutTimer^0]
  3837  3C05  A003              	jz	l95
  3838  3C07  7A 45             	dec	[_IICTimeOutTimer^0]
  3839                          ;			CUR_PP=0 XIO=0 PG=2 
  3840  3C09                    l95:
  3841                          ;main.c: 59: if (DisplayExchangeTimer) DisplayExchangeTimer--;
  3842  3C09  51 59             	mov	a, [_DisplayExchangeTimer^0]
  3843  3C0B  A003              	jz	l96
  3844  3C0D  7A 59             	dec	[_DisplayExchangeTimer^0]
  3845                          ;			CUR_PP=0 XIO=0 PG=2 
  3846  3C0F                    l96:
  3847                          ;main.c: 60: }
  3848                          ;			CUR_PP=0 XIO=0 PG=2 
  3849  3C0F  7F                	ret
  3850  3C10                    __end_of_Timer16ISR:
  3851                          ; =============== function _Timer16ISR ends ============
  3852                          ; *************** function _SensorUART *****************
  3853                          ; Defined at:
  3854                          ;		line 12 in file "./particlesensor.c"
  3855                          ; Parameters:
  3856                          ;		None
  3857                          ; Auto variables:
  3858                          ;		rxdata      	       	type: unsigned char 
  3859                          ; Return value:
  3860                          ;		type: void 
  3861                          ;		size: 0
  3862                          ; Registers used:
  3863                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  3864                          ; Tracked objects:
  3865                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  3866                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  3867                          ;		Unchanged: 
  3868                          ; Data sizes:
  3869                          ;		Autos:    1
  3870                          ;		Params:   0
  3871                          ;		Temp:     2
  3872                          ;		Total:    3
  3873                          ; This function calls:
  3874                          ;		_UART_Sensor_bReadRxData
  3875                          ; This function is called by:
  3876                          ;		Interrupt level 2
  3877                          ; This function uses a non-reentrant model
  3878                          ; 
  3879  007E                    __size_of_SensorUART	equ	__end_of_SensorUART-_SensorUART
  3880                          ;particlesensor.c: 11: void SensorUART(void )
  3881                          ;particlesensor.c: 12: {
  3882                          ;			PG=2 
  3883  3C10                    _SensorUART:
  3884                          ;particlesensor.c: 13: unsigned char rxdata;
  3885                          ;particlesensor.c: 14: unsigned char i;
  3886                          ;particlesensor.c: 15: rxdata = UART_Sensor_bReadRxData();
  3887  3C10  70 CF             	and	f, 0xCF	;select user reg space
  3888  3C12  7C 2FB8           	call	_UART_Sensor_bReadRxData
  3889  3C15  62 D0 00          	mov	reg[208], 0
  3890  3C18  53 75             	mov	[??_SensorUART^0], a
  3891                          ;particlesensor.c: 24: RecTimeoutTimer = 3;
  3892  3C1A  55 49  03         	mov	[_RecTimeoutTimer^0], 3
  3893                          ; SensorUART@rxdata loaded to a
  3894  3C1D  51 75             	mov	a, [??_SensorUART^0]
  3895                          ;particlesensor.c: 26: if(HeadFlag == 0)
  3896  3C1F  3C 43  00         	cmp	[_HeadFlag^0], 0
  3897  3C22  B030              	jnz	l119
  3898                          ;particlesensor.c: 27: {
  3899                          ;particlesensor.c: 29: if(DataPtr < 2)
  3900  3C24  3C 3F  02         	cmp	[_DataPtr^0], 2
  3901  3C27  D00D              	jnc	l120
  3902                          ;particlesensor.c: 30: {
  3903                          ;particlesensor.c: 31: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  3904  3C29  58 3F             	mov	x, [_DataPtr^0]
  3905  3C2B  62 D3 00          	mov	reg[211], 0
  3906  3C2E  54 00             	mov	[x+_MyPMSUnion], a
  3907                          ;particlesensor.c: 32: DataPtr ++;
  3908  3C30  76 3F             	inc	[_DataPtr^0]
  3909                          ;particlesensor.c: 33: }
  3910  3C32  7D 3C40           	jmp	l121
  3911                          ;			CUR_PP=0 XIO=0 PG=2 
  3912  3C35                    l120:
  3913                          ;particlesensor.c: 34: else
  3914                          ;particlesensor.c: 35: {
  3915                          ;particlesensor.c: 36: MyPMSUnion.MyPMFrame.Head <<= 8;
  3916  3C35  5F 00  01         	mov	[_MyPMSUnion^0], [(_MyPMSUnion+1)^0]
  3917  3C38  55 01  00         	mov	[(_MyPMSUnion+1)^0], 0
  3918                          ;particlesensor.c: 37: MyPMSUnion.PMRxBuf[1] = rxdata;
  3919  3C3B  53 01             	mov	[(_MyPMSUnion+1)^0], a
  3920                          ;particlesensor.c: 38: DataPtr = 2;
  3921  3C3D  55 3F  02         	mov	[_DataPtr^0], 2
  3922                          ;			CUR_PP=0 XIO=0 PG=2 
  3923  3C40                    l121:
  3924                          ;particlesensor.c: 39: }
  3925                          ;particlesensor.c: 42: if(DataPtr == 2 && MyPMSUnion.MyPMFrame.Head == 0x424d)
  3926  3C40  3C 3F  02         	cmp	[_DataPtr^0], 2
  3927  3C43  B049              	jnz	l123
  3928  3C45  3C 00  42         	cmp	[_MyPMSUnion^0], 66
  3929  3C48  B009              	jnz	l122
  3930  3C4A  3C 01  4D         	cmp	[(_MyPMSUnion^0+1)], 77
  3931  3C4D  B03F              	jnz	l123
  3932                          ;particlesensor.c: 43: {
  3933                          ;particlesensor.c: 44: HeadFlag = 1;
  3934  3C4F  55 43  01         	mov	[_HeadFlag^0], 1
  3935                          ;			CUR_PP=0 XIO=0 PG=2 
  3936  3C52                    l122:
  3937                          ;particlesensor.c: 45: }
  3938                          ;particlesensor.c: 46: }
  3939  3C52  7F                	ret
  3940                          ;			CUR_PP=0 XIO=0 PG=2 
  3941  3C53                    l119:
  3942                          ;particlesensor.c: 47: else
  3943                          ;particlesensor.c: 48: {
  3944                          ;particlesensor.c: 49: MyPMSUnion.PMRxBuf[DataPtr] = rxdata;
  3945  3C53  58 3F             	mov	x, [_DataPtr^0]
  3946  3C55  62 D3 00          	mov	reg[211], 0
  3947  3C58  54 00             	mov	[x+_MyPMSUnion], a
  3948                          ;particlesensor.c: 50: if(DataPtr >= (40-1))
  3949  3C5A  3C 3F  27         	cmp	[_DataPtr^0], 39
  3950  3C5D  C007              	jc	l124
  3951                          ;particlesensor.c: 51: {
  3952                          ;particlesensor.c: 52: DataPtr = (40-1);
  3953  3C5F  55 3F  27         	mov	[_DataPtr^0], 39
  3954                          ;particlesensor.c: 53: }
  3955  3C62  7D 3C67           	jmp	l125
  3956                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3957  3C65                    l124:
  3958                          ;particlesensor.c: 54: else
  3959                          ;particlesensor.c: 55: {
  3960                          ;particlesensor.c: 56: DataPtr++;
  3961  3C65  76 3F             	inc	[_DataPtr^0]
  3962                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3963  3C67                    l125:
  3964                          ;particlesensor.c: 57: }
  3965                          ;particlesensor.c: 59: if(DataPtr == (MyPMSUnion.MyPMFrame.Length + 4) && DataPtr >= 6)
  3966  3C67  5F 76  02         	mov	[(??_SensorUART^0+1)], [(_MyPMSUnion+2)^0]
  3967  3C6A  5F 77  03         	mov	[(??_SensorUART^0+2)], [(_MyPMSUnion+3)^0]
  3968  3C6D  06 77  04         	add	[(??_SensorUART^0+2)], 4
  3969  3C70  0E 76  00         	adc	[(??_SensorUART^0+1)], 0
  3970  3C73  51 76             	mov	a, [(??_SensorUART^0+1)]
  3971  3C75  39 00             	cmp	a, 0
  3972  3C77  B015              	jnz	l123
  3973  3C79  51 77             	mov	a, [(??_SensorUART^0+2)]
  3974  3C7B  3A 3F             	cmp	a, [_DataPtr^0]
  3975  3C7D  B00F              	jnz	l123
  3976  3C7F  3C 3F  06         	cmp	[_DataPtr^0], 6
  3977  3C82  C00A              	jc	l123
  3978                          ;particlesensor.c: 60: {
  3979                          ;particlesensor.c: 61: PMSFrameFlag = 1;
  3980  3C84  55 47  01         	mov	[_PMSFrameFlag^0], 1
  3981                          ;particlesensor.c: 62: HeadFlag = 0;
  3982  3C87  55 43  00         	mov	[_HeadFlag^0], 0
  3983                          ;particlesensor.c: 63: DataPtr = 0;
  3984  3C8A  55 3F  00         	mov	[_DataPtr^0], 0
  3985                          ;			CUR_PP=0 IDX_PP=0 XIO=0 PG=2 
  3986                          ;			CUR_PP=0 XIO=0 PG=2 
  3987  3C8D                    l123:
  3988                          ;particlesensor.c: 70: }
  3989                          ;particlesensor.c: 71: }
  3990                          ;particlesensor.c: 72: }
  3991                          ;			CUR_PP=0 XIO=0 PG=2 
  3992  3C8D  7F                	ret
  3993  3C8E                    __end_of_SensorUART:
  3994  3C8E                    ___end_of_c_program_code:
  3995                          
  3996                          	psect	maintext
  3997                          ;Data sizes: Strings 70, constant 28, data 5, bss 84, persistent 3 stack 29
  3998                          ; *************** function _main *****************
  3999                          ; Defined at:
  4000                          ;		line 63 in file "./main.c"
  4001                          ; Parameters:
  4002                          ;		None
  4003                          ; Auto variables:
  4004                          ;		ret         	       	type: unsigned char 
  4005                          ; Return value:
  4006                          ;		type: void 
  4007                          ;		size: 0
  4008                          ; Registers used:
  4009                          ;		a, x, TMP_DR0, TMP_DR1, TMP_DR2, TMP_DR3, CUR_PP, IDX_PP, MVR_PP, MVW_PP, mret
  4010                          ; Tracked objects:
  4011                          ;		On entry : CUR_PP? IDX_PP? XIO? PG? MVR_PP? MVW_PP? 
  4012                          ;		On exit  : CUR_PP=0 IDX_PP? XIO=0 PG=2 MVR_PP? MVW_PP? 
  4013                          ;		Unchanged: 
  4014                          ; Data sizes:
  4015                          ;		Autos:    1
  4016                          ;		Params:   0
  4017                          ;		Temp:     1
  4018                          ;		Total:    2
  4019                          ; This function calls:
  4020                          ;		_Init_IIC
  4021                          ;		_UART_Board_Start
  4022                          ;		_UART_Sensor_Start
  4023                          ;		_UART_Sensor_IntCntl
  4024                          ;		_LED_Init
  4025                          ;		_Timer8_WritePeriod
  4026                          ;		_Timer8_WriteCompareValue
  4027                          ;		_Timer8_EnableInt
  4028                          ;		_Timer8_Start
  4029                          ;		_Timer16_WritePeriod
  4030                          ;		_Timer16_WriteCompareValue
  4031                          ;		_Timer16_EnableInt
  4032                          ;		_Timer16_Start
  4033                          ;		_SAR10_SetClk
  4034                          ;		_SAR10_SetRunMode
  4035                          ;		_SAR10_SetADCChannel
  4036                          ;		_SAR10_DisableInt
  4037                          ;		_SAR10_Start
  4038                          ;		_Si7020Init
  4039                          ;		_FrameCheck
  4040                          ;		_UartPutConstStr
  4041                          ;		_UartPutHexWord
  4042                          ;		_SAR10_Trigger
  4043                          ;		_SAR10_fIsDataAvailable
  4044                          ;		_SAR10_iGetData
  4045                          ;		_Si7020SendCommand
  4046                          ;		_Si7020Read_RH_NHM
  4047                          ;		_CRC8Check
  4048                          ;		_Si7020CalcRH
  4049                          ;		_UartPutHexByte
  4050                          ;		_Si7020Read_Temp_after_RHM
  4051                          ;		_Si7020CalcTemp
  4052                          ;		_LED_Display
  4053                          ; This function is called by:
  4054                          ;		Startup code after reset
  4055                          ; This function uses a non-reentrant model
  4056                          ; 
  4057  0172                    __size_of_main	equ	__end_of_main-_main
  4058                          ;main.c: 62: void main(void)
  4059                          ;main.c: 63: {
  4060                          ;			CUR_PP=0 XIO=0 PG=2 
  4061  3C8E                    _main:
  4062  3C8E  71 01             	or	f, 1	;#
  4063                          ;main.c: 64: unsigned char ret;
  4064                          ;main.c: 65: unsigned char i,k;
  4065                          ;main.c: 66: asm("or  F, 01h") ;
  4066                          ;main.c: 69: Init_IIC();
  4067  3C90  7C 344E           	call	_Init_IIC
  4068                          ;main.c: 71: UART_Board_Start(0x00);
  4069  3C93  50 00             	mov	a, 0
  4070  3C95  7C 2E54           	call	_UART_Board_Start
  4071                          ;main.c: 75: UART_Sensor_Start(0x00);
  4072  3C98  50 00             	mov	a, 0
  4073  3C9A  7C 2FA4           	call	_UART_Sensor_Start
  4074                          ;main.c: 77: UART_Sensor_IntCntl(0x01|0x00);
  4075  3C9D  50 01             	mov	a, 1
  4076  3C9F  7C 2FD1           	call	_UART_Sensor_IntCntl
  4077                          ;main.c: 79: LED_Init();
  4078  3CA2  7C 342F           	call	_LED_Init
  4079                          ;main.c: 81: Timer8_WritePeriod(160);
  4080  3CA5  50 A0             	mov	a, 160
  4081  3CA7  7C 2DF9           	call	_Timer8_WritePeriod
  4082                          ;main.c: 82: Timer8_WriteCompareValue(80);
  4083  3CAA  50 50             	mov	a, 80
  4084  3CAC  7C 2DFC           	call	_Timer8_WriteCompareValue
  4085                          ;main.c: 83: Timer8_EnableInt();
  4086  3CAF  7C 2DE9           	call	_Timer8_EnableInt
  4087                          ;main.c: 84: Timer8_Start();
  4088  3CB2  7C 2DF1           	call	_Timer8_Start
  4089                          ;main.c: 86: Timer16_WritePeriod(9600);
  4090  3CB5  50 80             	mov	a, 128
  4091  3CB7  57 25             	mov	x, 37
  4092  3CB9  7C 2D97           	call	_Timer16_WritePeriod
  4093                          ;main.c: 87: Timer16_WriteCompareValue(9000);
  4094  3CBC  50 28             	mov	a, 40
  4095  3CBE  57 23             	mov	x, 35
  4096  3CC0  7C 2D9D           	call	_Timer16_WriteCompareValue
  4097                          ;main.c: 88: Timer16_EnableInt();
  4098  3CC3  7C 2D87           	call	_Timer16_EnableInt
  4099                          ;main.c: 89: Timer16_Start();
  4100  3CC6  7C 2D8F           	call	_Timer16_Start
  4101                          ;main.c: 91: SAR10_SetClk((0x0A));
  4102  3CC9  50 0A             	mov	a, 10
  4103  3CCB  7C 2D56           	call	_SAR10_SetClk
  4104                          ;main.c: 92: SAR10_SetRunMode((0x00));
  4105  3CCE  50 00             	mov	a, 0
  4106  3CD0  7C 2D6E           	call	_SAR10_SetRunMode
  4107                          ;main.c: 93: SAR10_SetADCChannel((0x60));
  4108  3CD3  50 60             	mov	a, 96
  4109  3CD5  7C 2D0E           	call	_SAR10_SetADCChannel
  4110                          ;main.c: 94: SAR10_DisableInt();
  4111  3CD8  7C 2CCC           	call	_SAR10_DisableInt
  4112                          ;main.c: 95: SAR10_Start();
  4113  3CDB  7C 2CD0           	call	_SAR10_Start
  4114                          ;main.c: 97: DisplayBuf[0] = 0;
  4115  3CDE  62 D0 00          	mov	reg[208], 0
  4116  3CE1  55 51  00         	mov	[_DisplayBuf^0], 0
  4117                          ;main.c: 98: DisplayBuf[1] = 0;
  4118  3CE4  55 52  00         	mov	[(_DisplayBuf+1)^0], 0
  4119                          ;main.c: 100: IndexStart = 0;
  4120  3CE7  55 46  00         	mov	[_IndexStart^0], 0
  4121                          ;main.c: 101: IndexEnd = 4;
  4122  3CEA  55 5A  04         	mov	[_IndexEnd^0], 4
  4123                          ;main.c: 103: Si7020Init();
  4124  3CED  7C 31CB           	call	_Si7020Init
  4125                          ;main.c: 105: RES_WDT = 0;
  4126  3CF0  62 E3 00          	mov	reg[227], 0
  4127                          ;main.c: 106: while (1)
  4128                          ;			XIO=0 PG=2 
  4129  3CF3                    l99:
  4130                          ;main.c: 107: {
  4131                          ;main.c: 108: if (!RecTimeoutTimer)
  4132  3CF3  62 D0 00          	mov	reg[208], 0
  4133  3CF6  51 49             	mov	a, [_RecTimeoutTimer^0]
  4134  3CF8  B00A              	jnz	l101
  4135                          ;main.c: 109: {
  4136                          ;main.c: 110: PMSFrameFlag = 0;
  4137  3CFA  55 47  00         	mov	[_PMSFrameFlag^0], 0
  4138                          ;main.c: 111: HeadFlag = 0;
  4139  3CFD  55 43  00         	mov	[_HeadFlag^0], 0
  4140                          ;main.c: 112: DataPtr = 0;
  4141  3D00  55 3F  00         	mov	[_DataPtr^0], 0
  4142                          ;			CUR_PP=0 XIO=0 PG=2 
  4143  3D03                    l101:
  4144                          ;main.c: 113: }
  4145                          ;main.c: 115: if (PMSFrameFlag)
  4146  3D03  51 47             	mov	a, [_PMSFrameFlag^0]
  4147  3D05  A02F              	jz	l102
  4148                          ;main.c: 116: {
  4149                          ;main.c: 117: PMSFrameFlag = 0;
  4150  3D07  55 47  00         	mov	[_PMSFrameFlag^0], 0
  4151                          ;main.c: 118: if (FrameCheck())
  4152  3D0A  7C 317E           	call	_FrameCheck
  4153  3D0D  78                	dec	a
  4154  3D0E  C01D              	jc	l103
  4155                          ;main.c: 119: {
  4156                          ;main.c: 120: data_pm2_5 = MyPMSUnion.MyPMFrame.PM2_5_US;
  4157  3D10  5F 3D  06         	mov	[_data_pm2_5^0], [(_MyPMSUnion+6)^0]
  4158  3D13  5F 3E  07         	mov	[(_data_pm2_5+1)^0], [(_MyPMSUnion+7)^0]
  4159                          ;main.c: 121: UartPutConstStr("PM2.5:");
  4160  3D16  57 3B             	mov	x, <STR_4
  4161  3D18  50 3F             	mov	a, >STR_4
  4162  3D1A  71 80             	or	f, 0x80	;select multiple RAM page mode
  4163  3D1C  7C 36E3           	call	_UartPutConstStr
  4164                          ;main.c: 122: UartPutHexWord(data_pm2_5);
  4165  3D1F  62 D0 00          	mov	reg[208], 0
  4166  3D22  51 3E             	mov	a, [(_data_pm2_5^0+1)]
  4167  3D24  58 3D             	mov	x, [_data_pm2_5^0]
  4168  3D26  7C 30D4           	call	_UartPutHexWord
  4169                          ;main.c: 123: }
  4170  3D29  7D 3D35           	jmp	l102
  4171                          ;			CUR_PP=0 XIO=0 
  4172  3D2C                    l103:
  4173                          ;main.c: 124: else
  4174                          ;main.c: 125: {
  4175                          ;main.c: 126: UartPutConstStr("checksum fail");
  4176  3D2C  57 00             	mov	x, <STR_5
  4177  3D2E  50 3F             	mov	a, >STR_5
  4178  3D30  71 80             	or	f, 0x80	;select multiple RAM page mode
  4179  3D32  7C 36E3           	call	_UartPutConstStr
  4180                          ;			XIO=0 PG=2 
  4181                          ;			XIO=0 PG=2 
  4182  3D35                    l102:
  4183                          ;main.c: 127: }
  4184                          ;main.c: 128: }
  4185                          ;main.c: 130: if (!one_sec_timer)
  4186  3D35  62 D0 00          	mov	reg[208], 0
  4187  3D38  51 54             	mov	a, [_one_sec_timer^0]
  4188  3D3A  B01C              	jnz	l105
  4189                          ;main.c: 131: {
  4190                          ;main.c: 132: one_sec_timer = 8;
  4191  3D3C  55 54  08         	mov	[_one_sec_timer^0], 8
  4192                          ;main.c: 135: MUX_CR2 |= 0X02;
  4193  3D3F  71 10             	or	f, 0x10	; select config register space
  4194  3D41  43 DA 02          	or	reg[0xDA], 2
  4195                          ;main.c: 136: SAR10_Trigger();
  4196  3D44  70 CF             	and	f, 0xCF	;select user reg space
  4197  3D46  7C 2CE0           	call	_SAR10_Trigger
  4198                          ;main.c: 137: while(SAR10_fIsDataAvailable()==0);
  4199                          ;			XIO=0 PG=2 
  4200  3D49                    l106:
  4201  3D49  7C 2CE8           	call	_SAR10_fIsDataAvailable
  4202  3D4C  78                	dec	a
  4203  3D4D  CFFB              	jc	l106
  4204                          ;			XIO=0 PG=2 
  4205                          ;main.c: 138: LightADCValue = SAR10_iGetData();
  4206  3D4F  7C 2CF1           	call	_SAR10_iGetData
  4207                          ;main.c: 139: MUX_CR2 &= ~0X02;
  4208  3D52  71 10             	or	f, 0x10	; select config register space
  4209  3D54  41 DA FD          	and	reg[0xDA], 0xFD
  4210                          ;			PG=2 
  4211  3D57                    l105:
  4212                          ;main.c: 141: }
  4213                          ;main.c: 144: if(!rh_sample_timer)
  4214  3D57  70 CF             	and	f, 0xCF	;select user reg space
  4215  3D59  62 D0 00          	mov	reg[208], 0
  4216  3D5C  51 58             	mov	a, [_rh_sample_timer^0]
  4217  3D5E  B093              	jnz	l109
  4218                          ;main.c: 145: {
  4219                          ;main.c: 146: rh_sample_timer = 8;
  4220  3D60  55 58  08         	mov	[_rh_sample_timer^0], 8
  4221                          ;main.c: 147: if (!RHSampleStep)
  4222  3D63  51 48             	mov	a, [_RHSampleStep^0]
  4223  3D65  B012              	jnz	l110
  4224                          ;main.c: 148: {
  4225                          ;main.c: 149: ret = Si7020SendCommand(0xF5);
  4226  3D67  50 F5             	mov	a, 245
  4227  3D69  7C 3803           	call	_Si7020SendCommand
  4228  3D6C  53 5C             	mov	[??_main^0], a
  4229                          ;main.c: 150: if(ret)
  4230  3D6E  51 5C             	mov	a, [??_main^0]
  4231  3D70  A081              	jz	l109
  4232                          ;main.c: 151: {
  4233                          ;main.c: 152: RHSampleStep = 1;
  4234  3D72  55 48  01         	mov	[_RHSampleStep^0], 1
  4235                          ;main.c: 153: }
  4236                          ;main.c: 154: else
  4237                          ;main.c: 155: {
  4238                          ;			CUR_PP=0 XIO=0 
  4239                          ;main.c: 157: }
  4240                          ;main.c: 158: }
  4241  3D75  7D 3DF2           	jmp	l109
  4242                          ;			CUR_PP=0 XIO=0 PG=2 
  4243  3D78                    l110:
  4244                          ;main.c: 159: else
  4245                          ;main.c: 160: {
  4246                          ;main.c: 162: Si7020Read_RH_NHM(RecBuf);
  4247  3D78  50 4C             	mov	a, <(<_RecBuf)
  4248  3D7A  7C 3356           	call	_Si7020Read_RH_NHM
  4249                          ;main.c: 163: Si7020Data = *(unsigned int *)RecBuf;
  4250  3D7D  57 4C             	mov	x, <_RecBuf
  4251  3D7F  62 D3 00          	mov	reg[211], 0
  4252  3D82  52 00             	mov	a, [x+0]
  4253  3D84  08                	push	a
  4254  3D85  52 01             	mov	a, [x+1]
  4255  3D87  53 3C             	mov	[(_Si7020Data^0+1)], a
  4256  3D89  18                	pop	a
  4257  3D8A  53 3B             	mov	[_Si7020Data^0], a
  4258                          ;main.c: 167: if (CRC8Check())
  4259  3D8C  71 80             	or	f, 0x80	;select multiple RAM page mode
  4260  3D8E  7C 3372           	call	_CRC8Check
  4261  3D91  78                	dec	a
  4262  3D92  C020              	jc	l114
  4263                          ;main.c: 168: {
  4264                          ;main.c: 169: UartPutConstStr("RH:");
  4265  3D94  57 42             	mov	x, <STR_6
  4266  3D96  50 3F             	mov	a, >STR_6
  4267  3D98  71 80             	or	f, 0x80	;select multiple RAM page mode
  4268  3D9A  7C 36E3           	call	_UartPutConstStr
  4269                          ;main.c: 171: Humidity = Si7020CalcRH(Si7020Data);
  4270  3D9D  62 D0 00          	mov	reg[208], 0
  4271  3DA0  51 3C             	mov	a, [(_Si7020Data^0+1)]
  4272  3DA2  58 3B             	mov	x, [_Si7020Data^0]
  4273  3DA4  7C 339C           	call	_Si7020CalcRH
  4274  3DA7  53 44             	mov	[_Humidity^0], a
  4275                          ;main.c: 172: UartPutHexByte(Humidity);
  4276  3DA9  51 44             	mov	a, [_Humidity^0]
  4277  3DAB  71 80             	or	f, 0x80	;select multiple RAM page mode
  4278  3DAD  7C 32FD           	call	_UartPutHexByte
  4279                          ;main.c: 173: }
  4280  3DB0  7D 3DBC           	jmp	l115
  4281                          ;			CUR_PP=0 IDX_PP=0 XIO=0 
  4282  3DB3                    l114:
  4283                          ;main.c: 174: else
  4284                          ;main.c: 175: {
  4285                          ;main.c: 176: UartPutConstStr("CRC fail");
  4286  3DB3  57 1B             	mov	x, <STR_7
  4287  3DB5  50 3F             	mov	a, >STR_7
  4288  3DB7  71 80             	or	f, 0x80	;select multiple RAM page mode
  4289  3DB9  7C 36E3           	call	_UartPutConstStr
  4290                          ;			XIO=0 PG=2 
  4291  3DBC                    l115:
  4292                          ;main.c: 177: }
  4293                          ;main.c: 180: Si7020Read_Temp_after_RHM(RecBuf);
  4294  3DBC  50 4C             	mov	a, <(<_RecBuf)
  4295  3DBE  7C 31D5           	call	_Si7020Read_Temp_after_RHM
  4296                          ;main.c: 181: Si7020Data = *(unsigned int *)RecBuf;
  4297  3DC1  57 4C             	mov	x, <_RecBuf
  4298  3DC3  62 D3 00          	mov	reg[211], 0
  4299  3DC6  52 00             	mov	a, [x+0]
  4300  3DC8  08                	push	a
  4301  3DC9  52 01             	mov	a, [x+1]
  4302  3DCB  53 3C             	mov	[(_Si7020Data^0+1)], a
  4303  3DCD  18                	pop	a
  4304  3DCE  53 3B             	mov	[_Si7020Data^0], a
  4305                          ;main.c: 182: UartPutConstStr("Temperature:");
  4306  3DD0  57 0E             	mov	x, <STR_8
  4307  3DD2  50 3F             	mov	a, >STR_8
  4308  3DD4  71 80             	or	f, 0x80	;select multiple RAM page mode
  4309  3DD6  7C 36E3           	call	_UartPutConstStr
  4310                          ;main.c: 183: Temperature = Si7020CalcTemp(Si7020Data);
  4311  3DD9  62 D0 00          	mov	reg[208], 0
  4312  3DDC  51 3C             	mov	a, [(_Si7020Data^0+1)]
  4313  3DDE  58 3B             	mov	x, [_Si7020Data^0]
  4314  3DE0  7C 31F6           	call	_Si7020CalcTemp
  4315  3DE3  53 4A             	mov	[_Temperature^0], a
  4316                          ;main.c: 184: UartPutHexByte(Temperature);
  4317  3DE5  51 4A             	mov	a, [_Temperature^0]
  4318  3DE7  71 80             	or	f, 0x80	;select multiple RAM page mode
  4319  3DE9  7C 32FD           	call	_UartPutHexByte
  4320                          ;main.c: 186: RHSampleStep = 0;
  4321  3DEC  62 D0 00          	mov	reg[208], 0
  4322  3DEF  55 48  00         	mov	[_RHSampleStep^0], 0
  4323                          ;			CUR_PP=0 XIO=0 PG=2 
  4324                          ;			CUR_PP=0 XIO=0 
  4325  3DF2                    l109:
  4326                          ;main.c: 187: }
  4327                          ;main.c: 188: }
  4328                          ;main.c: 190: LED_Display();
  4329  3DF2  71 80             	or	f, 0x80	;select multiple RAM page mode
  4330  3DF4  7C 329A           	call	_LED_Display
  4331                          ;main.c: 191: RES_WDT = 0;
  4332  3DF7  62 E3 00          	mov	reg[227], 0
  4333                          ;			XIO=0 PG=2 
  4334  3DFA  7D 3CF3           	jmp	l99
  4335  3DFD                    ___exit:	;where's that confounded watchdog?
  4336  3DFD  7D 3DFD           	jmp	___exit
  4337  3E00                    __end_of_main:
  4338                          
  4339                          	psect	ramdata0
  4340                          ; =============== function _SensorUART ends ============
  4341  0054                    _one_sec_timer:
  4342  0054                    	blk	1
  4343                          ;Pointer p: 1 byte -> DisplayBuf, 
  4344  0055                    _p:
  4345  0055                    	blk	1
  4346  0056                    _poly_h:
  4347  0056                    	blk	1
  4348  0057                    _poly_l:
  4349  0057                    	blk	1
  4350  0058                    _rh_sample_timer:
  4351  0058                    	blk	1
  4352                          
  4353                          	psect	romdata0
  4354                          ;initializer for _one_sec_timer
  4355  0065  08                	db	8
  4356                          ;initializer for _p
  4357  0066  51                	db	<_DisplayBuf
  4358                          ;initializer for _poly_h
  4359  0067  98                	db	152
  4360                          ;initializer for _poly_l
  4361  0068  80                	db	128
  4362                          ;initializer for _rh_sample_timer
  4363  0069  08                	db	8
  4364                          
  4365                          	psect	cdata
  4366  3E00                    _DigitArray:
  4367  3E00  5FF0              	dw	24560
  4368  3E02  FFFC              	dw	65532
  4369  3E04  6FF2              	dw	28658
  4370  3E06  6FF8              	dw	28664
  4371  3E08  CFFC              	dw	53244
  4372  3E0A  4FF9              	dw	20473
  4373  3E0C  4FF1              	dw	20465
  4374  3E0E  7FFC              	dw	32764
  4375  3E10  4FF0              	dw	20464
  4376  3E12  4FF8              	dw	20472
  4377  3E14                    _DisBit:
  4378  3E14  7F                	db	127
  4379  3E15  DF                	db	223
  4380  3E16  F7                	db	247
  4381  3E17  FD                	db	253
  4382  3E18  BF                	db	191
  4383  3E19  EF                	db	239
  4384  3E1A  FB                	db	251
  4385  3E1B  FE                	db	254
  4386                          
  4387                          	psect	bss0
  4388  0000                    _MyPMSUnion:
  4389  0000                    	blk	40
  4390  0028                    _DisplayContent:
  4391  0028                    	blk	16
  4392  0038                    _DisplayNum:
  4393  0038                    	blk	3
  4394  003B                    _Si7020Data:
  4395  003B                    	blk	2
  4396  003D                    _data_pm2_5:
  4397  003D                    	blk	2
  4398  003F                    _DataPtr:
  4399  003F                    	blk	1
  4400  0040                    _DeadZone:
  4401  0040                    	blk	1
  4402  0041                    _DisPlayIndex:
  4403  0041                    	blk	1
  4404  0042                    _DisplayItem:
  4405  0042                    	blk	1
  4406  0043                    _HeadFlag:
  4407  0043                    	blk	1
  4408  0044                    _Humidity:
  4409  0044                    	blk	1
  4410  0045                    _IICTimeOutTimer:
  4411  0045                    	blk	1
  4412  0046                    _IndexStart:
  4413  0046                    	blk	1
  4414  0047                    _PMSFrameFlag:
  4415  0047                    	blk	1
  4416  0048                    _RHSampleStep:
  4417  0048                    	blk	1
  4418  0049                    _RecTimeoutTimer:
  4419  0049                    	blk	1
  4420  004A                    _Temperature:
  4421  004A                    	blk	1
  4422  004B                    _ack:
  4423  004B                    	blk	1
  4424  004C                    _RecBuf:
  4425  004C                    	blk	5
  4426  0051                    _DisplayBuf:
  4427  0051                    	blk	3
  4428                          
  4429                          	psect	nvram0
  4430  0059                    _DisplayExchangeTimer:
  4431  0059                    	blk	1
  4432  005A                    _IndexEnd:
  4433  005A                    	blk	1
  4434  005B                    _data_length:
  4435  005B                    	blk	1
  4436                          
  4437                          	psect	strings
  4438                          ;			CUR_PP=0 XIO=0 PG=2 
  4439  3F00                    STR_5:
  4440  3F00  63                	db	99	;'c'
  4441  3F01  68                	db	104	;'h'
  4442  3F02  65                	db	101	;'e'
  4443  3F03  63                	db	99	;'c'
  4444  3F04  6B                	db	107	;'k'
  4445  3F05  73                	db	115	;'s'
  4446  3F06  75                	db	117	;'u'
  4447  3F07  6D                	db	109	;'m'
  4448  3F08  20                	db	32
  4449  3F09  66                	db	102	;'f'
  4450  3F0A  61                	db	97	;'a'
  4451  3F0B  69                	db	105	;'i'
  4452  3F0C  6C                	db	108	;'l'
  4453  3F0D  00                	db	0
  4454                          ;			CUR_PP=0 XIO=0 PG=2 
  4455  3F0E                    STR_8:
  4456  3F0E  54                	db	84	;'T'
  4457  3F0F  65                	db	101	;'e'
  4458  3F10  6D                	db	109	;'m'
  4459  3F11  70                	db	112	;'p'
  4460  3F12  65                	db	101	;'e'
  4461  3F13  72                	db	114	;'r'
  4462  3F14  61                	db	97	;'a'
  4463  3F15  74                	db	116	;'t'
  4464  3F16  75                	db	117	;'u'
  4465  3F17  72                	db	114	;'r'
  4466  3F18  65                	db	101	;'e'
  4467  3F19  3A                	db	58	;':'
  4468  3F1A  00                	db	0
  4469                          ;			CUR_PP=0 XIO=0 PG=2 
  4470  3F1B                    STR_7:
  4471  3F1B  43                	db	67	;'C'
  4472  3F1C  52                	db	82	;'R'
  4473  3F1D  43                	db	67	;'C'
  4474  3F1E  20                	db	32
  4475  3F1F  66                	db	102	;'f'
  4476  3F20  61                	db	97	;'a'
  4477  3F21  69                	db	105	;'i'
  4478  3F22  6C                	db	108	;'l'
  4479  3F23  00                	db	0
  4480                          ;			CUR_PP=0 XIO=0 PG=2 
  4481  3F24                    STR_1:
  4482  3F24  53                	db	83	;'S'
  4483  3F25  68                	db	104	;'h'
  4484  3F26  6F                	db	111	;'o'
  4485  3F27  77                	db	119	;'w'
  4486  3F28  20                	db	32
  4487  3F29  50                	db	80	;'P'
  4488  3F2A  4D                	db	77	;'M'
  4489  3F2B  00                	db	0
  4490                          ;			CUR_PP=0 XIO=0 PG=2 
  4491  3F2C                    STR_3:
  4492  3F2C  53                	db	83	;'S'
  4493  3F2D  68                	db	104	;'h'
  4494  3F2E  6F                	db	111	;'o'
  4495  3F2F  77                	db	119	;'w'
  4496  3F30  20                	db	32
  4497  3F31  52                	db	82	;'R'
  4498  3F32  48                	db	72	;'H'
  4499  3F33  00                	db	0
  4500                          ;			CUR_PP=0 XIO=0 PG=2 
  4501  3F34                    STR_2:
  4502  3F34  53                	db	83	;'S'
  4503  3F35  68                	db	104	;'h'
  4504  3F36  6F                	db	111	;'o'
  4505  3F37  77                	db	119	;'w'
  4506  3F38  20                	db	32
  4507  3F39  54                	db	84	;'T'
  4508  3F3A  00                	db	0
  4509                          ;			CUR_PP=0 XIO=0 PG=2 
  4510  3F3B                    STR_4:
  4511  3F3B  50                	db	80	;'P'
  4512  3F3C  4D                	db	77	;'M'
  4513  3F3D  32                	db	50	;'2'
  4514  3F3E  2E                	db	46	;'.'
  4515  3F3F  35                	db	53	;'5'
  4516  3F40  3A                	db	58	;':'
  4517  3F41  00                	db	0
  4518                          ;			CUR_PP=0 XIO=0 PG=2 
  4519  3F42                    STR_6:
  4520  3F42  52                	db	82	;'R'
  4521  3F43  48                	db	72	;'H'
  4522  3F44  3A                	db	58	;':'
  4523  3F45  00                	db	0


HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:54:53 2015

                    SendByte@BitCnt 0067                        _ChangeToRead 3B15                          ??_Num2Char 0066  
               _UART_Board_SendData 2E62                    ___awdiv@dividend 0066                                   l2 34DB  
                                 l6 3709                                   l9 36ED                                   _p 0055  
                        delay_us@us 0069                            _ShowPMxx 3554                           ShowPMxx@k 0064  
                  ??_ShiftRegOutput 0076                                  l12 3715                                  l22 332F  
                                l15 3721                                  l32 30F6                                  l25 333E  
                                l41 3157                                  l19 3310                                  l35 3115  
                                l60 363D                                  l28 334A                                  l44 3166  
                                l61 3621                                  l38 3138                                  l71 3757  
                                l63 3644                                  l47 3172                                  l72 3762  
                                l64 368E                                  l80 32B8                                  l73 37A5  
                                l57 356E                                  l74 37B1                                  l66 369F  
                                l58 3638                                  l82 32DA                                  l91 3B9F  
                                l75 37FC                                  l59 35D2                                  l68 36B0  
                                l93 3BFD                                  l94 3C03                           _Timer8ISR 3B49  
                                l95 3C09                                  l79 32FC                                  l96 3C0F  
                                l89 3B6A                                  l99 3CF3                          ??_SendByte 0066  
                 __end_of_Timer8ISR 3BA3                __end_of_ChangeToRead 3B26                          ShowPMxx@pm 005E  
                          _Stop_I2c 3AE4                          _Timer16ISR 3BF2                          ??_ShowPMxx 005E  
                         l500002302 34FC                  __end_of_Timer16ISR 3C10                                 l101 3D03  
                               l110 3D78                                 l102 3D35                                 l103 3D2C  
                               l120 3C35                                 l121 3C40                                 l105 3D57  
                               l122 3C52                                 l114 3DB3                                 l106 3D49  
                               l123 3C8D                                 l131 3194                                 l115 3DBC  
                               l124 3C65                                 l140 31F5                                 l132 31C8  
                               l125 3C67                                 l221 3BB3                                 l109 3DF2  
                               l119 3C53                                 l215 347B                                 l224 3BBB  
                               l216 3481                                 l144 3297                                 l128 3189  
                               l137 335B                                 l170 3B30                                 l234 3A04  
                               l322 3516                                 l146 3422                                 l162 3372  
                               l138 3371                                 l227 3BCA                                 l171 3B41  
                               l243 36C1                                 l323 352B                                 l219 3498  
                               l147 3413                                 l228 3BCD                                 l252 39C5  
                               l244 36CE                                 l156 34E2                                 l164 3385  
                               l261 3A24                                 l253 39E0                                 l149 342C  
                               l165 338A                                 l182 3A61                                 l262 3A36  
                               l246 39EB                                 l190 3966                                 l183 3A64  
                               l255 3A40                                 l247 39C0                                 l159 3500  
                               l167 3399                                 l184 3AB1                                 l256 3A1F  
                               l248 39BB                                 l192 3984                                 l440 38BC  
                               l520 383F                                 l185 3AB4                                 l257 3A19  
                               l193 3987                                 l179 3A4A                                 l187 393B  
                               l195 3917                                 l435 38FC                                 l515 387E  
                               l196 392A                                 l444 38C6                                 l436 3897  
                               l524 3852                                 l516 381F                                 l445 38E1  
                               l437 38A9                                 l525 3864                                 l517 382F  
                               l438 38EC                                 l518 3872                                 l439 38C1  
                               l519 3849                                 u203 3566                                 u213 3696  
                               u223 36A7                                 u304 33D7                                 u313 3A53  
                               u314 3A52                                 u323 34B2                                 u194 30E2  
                               u284 323D                                 u294 3261                       _one_sec_timer 0054  
                       IRcvBytes@no 0060            _Timer8_WriteCompareValue 2DFC                                 _ack 004B  
                               _abs 39F0                         _data_length 005B                         Num2Char@num 0066  
                        _SensorUART 3C10                        _Si7020CalcRH 339C                           _Start_I2c 3ABF  
                 __end_of_Start_I2c 3AE4                  __end_of_SensorUART 3C8E         ??_Si7020Read_Temp_after_RHM 005E  
         __end_of_Si7020Read_RH_NHM 3372                            _delay_us 3B26              __end_of_ShiftRegOutput 3BF2  
              __end_of_Si7020CalcRH 342F                     __end_of_Ack_I2c 39A6                                STR_1 3F24  
                              STR_2 3F34                                STR_3 3F2C                                STR_4 3F3B  
                              STR_5 3F00                                STR_6 3F42                                STR_7 3F1B  
                              STR_8 3F0E                    ___awdiv@quotient 0068                        IRcvBytes@sla 0062  
               ??_Si7020SendCommand 0060                        ___awdiv@sign 006A                                abs@a 0064  
                        ??_delay_us 0069                                _main 3C8E                   ___lmul@multiplier 0069  
                   _LeftRotate$3378 005F                    __end_of_LED_Init 344E             ___end_of_c_program_code 3C8E  
                  ShowHumiTemp@temp 005F                     __end_of_RcvByte 397A                         _Temperature 004A  
                      ___awmod@sign 0068                        ShowPMxx@temp 0060           _Si7020Read_Temp_after_RHM 31D5  
                  _Timer8_EnableInt 2DE9                      ??_ShowHumiTemp 005E                             ?___lmul 0069  
                        _Si7020Data 003B                             ?___wmul 0069                            ??___lmul 0071  
                        _Si7020Init 31CB                               ??_abs 0064                     __end_of___awdiv 38FD  
                          ??___wmul 006B                     __end_of___awmod 387F                  __end_of_Si7020Init 31D5  
                      ??_SensorUART 0075                   _Timer16_EnableInt 2D87                     __end_of___lwdiv 39F0  
                   __end_of___lwmod 3A45                               IDX_PP 00D3                               CUR_PP 00D0  
                    ___wmul@product 006D                           _CRC8Check 3372                       _SAR10_Trigger 2CE0  
                 __end_of_CRC8Check 339C                        ISendByte@sla 0062                     ___lwdiv@divisor 0066  
                  _SAR10_SetRunMode 2D6E                     ___lwdiv@counter 006C                    Si7020CalcRH@data 005E  
                      _RHSampleStep 0048                    Si7020CalcRH@temp 0060                    UartPutHexByte@ch 0060  
                      _DisPlayIndex 0041                    _UART_Board_Start 2E54             _UART_Sensor_bReadRxData 2FB8  
   Si7020Read_Temp_after_RHM@buffer 005E                             _Ack_I2c 397A                        _Timer8_Start 2DF1  
                   _UartPutConstStr 36E3           __end_of_Si7020SendCommand 380C              _UART_Board_bReadRxData 2E68  
                  UartPutHexWord@ch 0063                           ??_Ack_I2c 0066                             _DataPtr 003F  
                       _DisplayItem 0042                            intlevel2 0003                Si7020Read_RH_NHM@ret 005F  
                  __end_of_Init_IIC 345F                      _Si7020CalcTemp 31F6                    UartPutConstStr@k 0060  
                 ShowHumiTemp@index 0060                 UartPutHexWord@value 0060                    __end_of_Num2Char 34E0  
                 ShowHumiTemp@value 005E                         RcvByte@retc 0066                   ___wmul@multiplier 006B  
                      ??_Si7020Init 005E                  UartPutHexByte@data 005E                  UartPutHexByte@temp 005F  
                           _RcvByte 3932              _SAR10_fIsDataAvailable 2CE8                          _ChangeToOD 3B06  
                  __end_of_SendByte 3ABF                    SensorUART@rxdata 0075                    ??_Si7020CalcTemp 005E  
         _Timer16_WriteCompareValue 2D9D                   ??_UartPutConstStr 005E                       ShowPMxx@index 0062  
                __end_of_ChangeToOD 3B15        Si7020Read_Temp_after_RHM@ret 005F                        _ShowHumiTemp 372D  
                   ___awdiv@divisor 0064                           ??_RcvByte 0066                     ___awdiv@counter 006B  
                  __end_of_ShowPMxx 36B7                   _Si7020Read_RH_NHM 3356                          _data_pm2_5 003D  
                           ___awdiv 387F                      _DisplayContent 0028                             ___awmod 380C  
                        IRcvBytes@i 0063                          IRcvBytes@s 0061                            ?___awdiv 0064  
                          ?___awmod 0064                             ___lwdiv 39A6                 _UART_Sensor_IntCntl 2FD1  
                           ___lwmod 3A09                __end_of_ShowHumiTemp 3803                            ?___lwdiv 0066  
                          ?___lwmod 0066                           ??___awdiv 0066                           ??___awmod 0066  
                  __end_of_Stop_I2c 3B06             Si7020Read_RH_NHM@buffer 005E                           ??___lwdiv 0068  
                         ??___lwmod 0068                              ??_main 005C                          ISendByte@c 0061  
                        _DigitArray 3E00                   Si7020Init@my_data 005E                       _Timer16_Start 2D8F  
 __end_of_Si7020Read_Temp_after_RHM 31F6                    ___lwmod@dividend 0068                  _Timer8_WritePeriod 2DF9  
            __end_of_Si7020CalcTemp 329A                      _SAR10_iGetData 2CF1                        _SAR10_SetClk 2D56  
                    __end_of___lmul 3554                    __end_of_delay_us 3B44                    ___lwdiv@dividend 0068  
                            TMP_DR0 006C                      __end_of___wmul 36E3                             main@ret 005C  
                      __end_of_main 3E00                           _IRcvBytes 345F                   __end_of_IRcvBytes 34CF  
                         _ISendByte 38FD                   __end_of_ISendByte 3932                      _UartPutHexByte 32FD  
                    _UartPutHexWord 30D4                 _Timer16_WritePeriod 2D97                          ?_IRcvBytes 0060  
                        _DisplayBuf 0051                              _DisBit 3E14                          _DisplayNum 0038  
                          _LED_Init 342F                     _rh_sample_timer 0058                          _FrameCheck 317E  
                UartPutHexWord@temp 0062                  __end_of_FrameCheck 31CB             __end_of_UartPutConstStr 372D  
                            _RecBuf 004C                    ??_UartPutHexByte 005E                    ??_UartPutHexWord 005E  
          _UART_Board_bReadTxStatus 2E65                              ___exit 3DFD                         ??_IRcvBytes 0061  
                            ___lmul 350C                              ___wmul 36B7                           _BoardUART 3B44  
                     RcvByte@BitCnt 0067                         ??_ISendByte 0061                         _LED_Display 329A  
                 __end_of_BoardUART 3B49                          _MyPMSUnion 0000                          _LeftRotate 34E0  
                __end_of_LeftRotate 350C                 __end_of_LED_Display 32FD                    ___lwdiv@quotient 006A  
                 _Si7020SendCommand 3803                     ___lwmod@divisor 0066                          _IndexStart 0046  
              Si7020SendCommand@cmd 0060                  FrameCheck@checksum 005E                     ___lwmod@counter 006A  
                            _poly_h 0056                              _poly_l 0057                         _SAR10_Start 2CD0  
                       __end_of_abs 3A09                 ___lmul@multiplicand 006D                  UartPutConstStr@str 005E  
                Si7020CalcTemp@data 005E                     ShiftRegOutput@i 0078              __end_of_UartPutHexByte 3356  
                Si7020CalcTemp@temp 0060                            _DeadZone 0040              __end_of_UartPutHexWord 317E  
                    ??_Si7020CalcRH 005E                            _HeadFlag 0043                 ___wmul@multiplicand 0069  
                 _UART_Sensor_Start 2FA4                      ___lmul@product 0071                           SendByte@c 0066  
                   _RecTimeoutTimer 0049                 ??_Si7020Read_RH_NHM 005E                     _IICTimeOutTimer 0045  
                      ??_FrameCheck 005E                _DisplayExchangeTimer 0059                    _SAR10_DisableInt 2CCC  
                          _IndexEnd 005A                            _Init_IIC 344E                 _SAR10_SetADCChannel 2D0E  
                          _Num2Char 34CF                        _PMSFrameFlag 0047                    ___awmod@dividend 0066  
                      ??_LeftRotate 005E                      _ShiftRegOutput 3BA3                            _Humidity 0044  
         ___start_of_c_program_code 30D4                     ___awmod@divisor 0064                            _SendByte 3A45  
                   ___awmod@counter 0069  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201+                         
   202+                         ;-----------------------------------------------
   203+                         ;  Global General Purpose Data Registers
   204+                         ;-----------------------------------------------
   205+ 006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206+ 006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0011                    PORT_2_GLOBAL_SELECT:	equ 11h	;Port 2 global select register (PRT2GS)
   102  0001                    PORT_2_DRIVE_0:			equ 1h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00FE                    PORT_2_DRIVE_1:			equ feh	;Port 2 drive mode 1 register (PRT2DM1)
   104  00EE                    PORT_2_DRIVE_2:			equ eeh	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114  0000                    PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;==========================================================================
     4                          ;  PSoCConfig.asm
     5                          ;  @PSOC_VERSION
     6                          ;
     7                          ;  Version: 0.85
     8                          ;  Revised: June 22, 2004
     9                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;
    11                          ;  This file is generated by the Device Editor on Application Generation.
    12                          ;  It contains code which loads the configuration data table generated in
    13                          ;  the file PSoCConfigTBL.asm
    14                          ;
    15                          ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
    16                          ;  Edits to this file will not be preserved.
    17                          ;==========================================================================
    18                          ;
    19                          include "m8c.inc"
    20                          include "memory.inc"
    21                          include "GlobalParams.inc"
    22                          
    23                          export LoadConfigInit
    24                          export _LoadConfigInit
    25                          export LoadConfig_led_display
    26                          export _LoadConfig_led_display
    27                          
    28                          export NO_SHADOW
    29                          export _NO_SHADOW
    30                          
    31  0010                    FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
    32  00FF                    END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
    33                          
    34                          AREA psoc_config(rom, rel)
    35                          
    36                          ;---------------------------------------------------------------------------
    37                          ; LoadConfigInit - Establish the start-up configuration (except for a few
    38                          ;                  parameters handled by boot code, like CPU speed). This
    39                          ;                  function can be called from user code, but typically it
    40                          ;                  is only called from boot.
    41                          ;
    42                          ;       INPUTS: None.
    43                          ;      RETURNS: Nothing.
    44                          ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
    45                          ;               In the large memory model currently only the page
    46                          ;               pointer registers listed below are modified.  This does
    47                          ;               not guarantee that in future implementations of this
    48                          ;               function other page pointer registers will not be
    49                          ;               modified.
    50                          ;          
    51                          ;               Page Pointer Registers Modified: 
    52                          ;               CUR_PP
    53                          ;
    54  2B32                    _LoadConfigInit:
    55  2B32                     LoadConfigInit:
    56                              RAM_PROLOGUE RAM_USE_CLASS_4
    57                              
    58  2B32  7C 2B39           	lcall	LoadConfig_led_display
    59  2B35  7C 3E1C           	lcall	LoadConfigTBL_led_display_Ordered
    60                          
    61                          
    62                              RAM_EPILOGUE RAM_USE_CLASS_4
    63  2B38  7F                    ret
    64                          
    65                          ;---------------------------------------------------------------------------
    66                          ; Load Configuration led_display
    67                          ;
    68                          ;    Load configuration registers for led_display.
    69                          ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
    70                          ;
    71                          ;       INPUTS: None.
    72                          ;      RETURNS: Nothing.
    73                          ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
    74                          ;               modified as may the Page Pointer registers!
    75                          ;               In the large memory model currently only the page
    76                          ;               pointer registers listed below are modified.  This does
    77                          ;               not guarantee that in future implementations of this
    78                          ;               function other page pointer registers will not be
    79                          ;               modified.
    80                          ;          
    81                          ;               Page Pointer Registers Modified: 
    82                          ;               CUR_PP
    83                          ;
    84  2B39                    _LoadConfig_led_display:
    85  2B39                     LoadConfig_led_display:
    86                              RAM_PROLOGUE RAM_USE_CLASS_4
    87                          
    88  2B39  10                	push	x
    89  2B3A  70 EF                 M8C_SetBank0                    ; Force bank 0
    90  2B3C  50 00                 mov     a, 0                    ; Specify bank 0
    91  2B3E  67                    asr     a                       ; Store in carry flag
    92                                                              ; Load bank 0 table:
    93  2B3F  50 2B                 mov     A, >LoadConfigTBL_led_display_Bank0
    94  2B41  57 96                 mov     X, <LoadConfigTBL_led_display_Bank0
    95  2B43  7C 2B54               lcall   LoadConfig              ; Load the bank 0 values
    96                          
    97  2B46  50 01                 mov     a, 1                    ; Specify bank 1
    98  2B48  67                    asr     a                       ; Store in carry flag
    99                                                              ; Load bank 1 table:
   100  2B49  50 2C                 mov     A, >LoadConfigTBL_led_display_Bank1
   101  2B4B  57 2D                 mov     X, <LoadConfigTBL_led_display_Bank1
   102  2B4D  7C 2B54               lcall   LoadConfig              ; Load the bank 1 values
   103                          
   104  2B50  70 EF                 M8C_SetBank0                    ; Force return to bank 0
   105  2B52  20                	pop		x
   106                          
   107                              RAM_EPILOGUE RAM_USE_CLASS_4
   108  2B53  7F                    ret
   109                          
   110                          
   111                          
   112                          
   113                          ;---------------------------------------------------------------------------
   114                          ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
   115                          ;              pairs. Terminate on address=0xFF.
   116                          ;
   117                          ;  INPUTS:  [A,X] points to the table to be loaded
   118                          ;           Flag Register Carry bit encodes the Register Bank
   119                          ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
   120                          ;
   121                          ;  RETURNS: nothing.
   122                          ;
   123                          ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
   124                          ;                X-3 Temporary store for register address
   125                          ;                X-2 LSB of config table address
   126                          ;                X-1 MSB of config table address
   127                          ;
   128  2B54                    LoadConfig:
   129  2B54  71 40                 RAM_PROLOGUE RAM_USE_CLASS_2
   130  2B56  38 02                 add     SP, 2                   ; Set up local vars
   131  2B58  10                    push    X                       ; Save config table address on stack
   132  2B59  08                    push    A
   133  2B5A  4F                    mov     X, SP
   134  2B5B  56 FC 00              mov     [X-4], 0                ; Set default Destination to Bank 0
   135  2B5E  D004                  jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
   136  2B60  56 FC 01              mov     [X-4], 1                ; No Carry: default to Bank 1
   137  2B63                    .BankSelectSaved:
   138  2B63  18                    pop     A
   139  2B64  20                    pop     X
   140                          
   141  2B65                    LoadConfigLp:
   142  2B65  70 EF                 M8C_SetBank0                    ; Switch to bank 0
   143  2B67  62 E3 00              M8C_ClearWDT                    ; Clear the watchdog for long inits
   144  2B6A  10                    push    X                       ; Preserve the config table address
   145  2B6B  08                    push    A
   146  2B6C  28                    romx                            ; Load register address from table
   147  2B6D  39 FF                 cmp     A, END_CONFIG_TABLE     ; End of table?
   148  2B6F  A01F                  jz      EndLoadConfig           ;   Yes, go wrap it up
   149  2B71  4F                    mov     X, SP                   ;
   150  2B72  48 FC 01              tst     [X-4], 1                ; Loading IO Bank 1?
   151  2B75  A003                  jz      .IOBankNowSet           ;    No, Bank 0 is fine
   152  2B77  71 10                 M8C_SetBank1                    ;   Yes, switch to Bank 1
   153  2B79                    .IOBankNowSet:
   154  2B79  54 FD                 mov     [X-3], A                ; Stash the register address
   155  2B7B  18                    pop     A                       ; Retrieve the table address
   156  2B7C  20                    pop     X
   157  2B7D  75                    inc     X                       ; Advance to the data byte
   158  2B7E  09 00                 adc     A, 0
   159  2B80  10                    push    X                       ; Save the config table address again
   160  2B81  08                    push    A
   161  2B82  28                    romx                            ; load config data from the table
   162  2B83  4F                    mov     X, SP                   ; retrieve the register address
   163  2B84  59 FD                 mov     X, [X-3]
   164  2B86  61 00                 mov     reg[X], A               ; Configure the register
   165  2B88  18                    pop     A                       ; retrieve the table address
   166  2B89  20                    pop     X
   167  2B8A  75                    inc     X                       ; advance to next table entry
   168  2B8B  09 00                 adc     A, 0
   169  2B8D  8FD7                  jmp     LoadConfigLp            ; loop to configure another register
   170  2B8F                    EndLoadConfig:
   171  2B8F  38 FC                 add     SP, -4
   172                              RAM_EPILOGUE RAM_USE_CLASS_2
      + 2B91  70 3F             	and	f, 0x3F
      + 2B93  71 80             	or	f, 0x80
   173  2B95  7F                    ret
   174                          
   175                          AREA InterruptRAM(ram, rel)
   176                          
   177  0079                    NO_SHADOW:
   178  0079                    _NO_SHADOW:
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
                  _LoadConfigInit 2B32    LoadConfigTBL_led_display_Bank0 2B96    LoadConfigTBL_led_display_Bank1 2C2D  
           LoadConfig_led_display 2B39                             HITECH 0002                    FLAG_PGMODE_01b 0040  
                  FLAG_PGMODE_10b 0080            _LoadConfig_led_display 2B39          SYSTEM_LARGE_MEMORY_MODEL 0001  
                        NO_SHADOW 0079                          TOOLCHAIN 0002                         _NO_SHADOW 0079  
                 FLAG_PGMODE_MASK 00C0                            RES_WDT 00E3                    RAM_USE_CLASS_1 0001  
                  RAM_USE_CLASS_2 0002                    RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008  
LoadConfigTBL_led_display_Ordered 3E1C                         LoadConfig 2B54                     LoadConfigInit 2B32  
                 END_CONFIG_TABLE 00FF                      EndLoadConfig 2B8F                      FLAG_XIO_MASK 0010  
       SYSTEM_IDXPG_TRACKS_IDX_PP 0001                       LoadConfigLp 2B65         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207+ 006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ; =============================================================================
     4                          ; FILENAME: PSoCConfigTBL.asm
     5                          ;  
     6                          ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     7                          ;  
     8                          ; NOTES:
     9                          ; Do not modify this file. It is generated by PSoC Designer each time the
    10                          ; generate application function is run. The values of the parameters in this
    11                          ; file can be modified by changing the values of the global parameters in the
    12                          ; device editor.
    13                          ;  
    14                          ; =============================================================================
    15                           
    16                          include "m8c.inc"
    17                          ;  Personalization tables 
    18                          export LoadConfigTBL_led_display_Bank1
    19                          export LoadConfigTBL_led_display_Bank0
    20                          export LoadConfigTBL_led_display_Ordered
    21                          AREA lit(rom, rel)
    22  2B96                    LoadConfigTBL_led_display_Bank0:
    23                          ;  Instance name SAR10, User Module SAR10
    24                          ;  Instance name Timer16, User Module Timer16
    25                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
    26  2B96  23 00             	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBC00CR0)
    27  2B98  21 9F             	db		21h, 9fh		;Timer16_PERIOD_LSB_REG(DBC00DR1)
    28  2B9A  22 50             	db		22h, 50h		;Timer16_COMPARE_LSB_REG(DBC00DR2)
    29                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
    30  2B9C  27 04             	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBC01CR0)
    31  2B9E  25 00             	db		25h, 00h		;Timer16_PERIOD_MSB_REG(DBC01DR1)
    32  2BA0  26 00             	db		26h, 00h		;Timer16_COMPARE_MSB_REG(DBC01DR2)
    33                          ;  Instance name Timer8, User Module Timer8
    34                          ;       Instance name Timer8, Block Name TIMER8(DBC10)
    35  2BA2  33 04             	db		33h, 04h		;Timer8_CONTROL_REG(DBC10CR0)
    36  2BA4  31 9F             	db		31h, 9fh		;Timer8_PERIOD_REG(DBC10DR1)
    37  2BA6  32 50             	db		32h, 50h		;Timer8_COMPARE_REG(DBC10DR2)
    38                          ;  Instance name UART_Board, User Module UART
    39                          ;       Instance name UART_Board, Block Name RX(DCC13)
    40  2BA8  3F 00             	db		3fh, 00h		;UART_Board_RX_CONTROL_REG(DCC13CR0)
    41  2BAA  3D 00             	db		3dh, 00h		;UART_Board_(DCC13DR1)
    42  2BAC  3E 00             	db		3eh, 00h		;UART_Board_RX_BUFFER_REG (DCC13DR2)
    43                          ;       Instance name UART_Board, Block Name TX(DCC12)
    44  2BAE  3B 00             	db		3bh, 00h		;UART_Board_TX_CONTROL_REG(DCC12CR0)
    45  2BB0  39 00             	db		39h, 00h		;UART_Board_TX_BUFFER_REG (DCC12DR1)
    46  2BB2  3A 00             	db		3ah, 00h		;UART_Board_(DCC12DR2)
    47                          ;  Instance name UART_Sensor, User Module UART
    48                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
    49  2BB4  2F 00             	db		2fh, 00h		;UART_Sensor_RX_CONTROL_REG(DCC03CR0)
    50  2BB6  2D 00             	db		2dh, 00h		;UART_Sensor_(DCC03DR1)
    51  2BB8  2E 00             	db		2eh, 00h		;UART_Sensor_RX_BUFFER_REG (DCC03DR2)
    52                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
    53  2BBA  2B 00             	db		2bh, 00h		;UART_Sensor_TX_CONTROL_REG(DCC02CR0)
    54  2BBC  29 00             	db		29h, 00h		;UART_Sensor_TX_BUFFER_REG (DCC02DR1)
    55  2BBE  2A 00             	db		2ah, 00h		;UART_Sensor_(DCC02DR2)
    56                          ;  Global Register values Bank 0
    57  2BC0  6A 00             	db		6ah, 00h		; ADCDataHigh register (ADC_DH)
    58  2BC2  6B 00             	db		6bh, 00h		; ADCDataLow register (ADC_DL)
    59  2BC4  60 09             	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
    60  2BC6  66 00             	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
    61  2BC8  61 00             	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
    62  2BCA  FC 00             	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
    63  2BCC  FD 00             	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
    64  2BCE  65 00             	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
    65  2BD0  53 00             	db		53h, 00h		; CSD0Control0 register (CSD0_CR0)
    66  2BD2  57 00             	db		57h, 00h		; CSD0Control1 register (CSD0_CR1)
    67  2BD4  56 00             	db		56h, 00h		; CSD0CounterHigh register (CSD0_CNT_H)
    68  2BD6  52 00             	db		52h, 00h		; CSD0CounterLow register (CSD0_CNT_L)
    69  2BD8  54 00             	db		54h, 00h		; CSD0Data0High register (CSD0_DR0_H)
    70  2BDA  50 00             	db		50h, 00h		; CSD0Data0Low register (CSD0_DR0_L)
    71  2BDC  55 00             	db		55h, 00h		; CSD0Data1High register (CSD0_DR1_H)
    72  2BDE  51 00             	db		51h, 00h		; CSD0Data1Low register (CSD0_DR1_L)
    73  2BE0  5B 00             	db		5bh, 00h		; CSD1Control0 register (CSD1_CR0)
    74  2BE2  5F 00             	db		5fh, 00h		; CSD1Control1 register (CSD1_CR1)
    75  2BE4  5E 00             	db		5eh, 00h		; CSD1CounterHigh register (CSD1_CNT_H)
    76  2BE6  5A 00             	db		5ah, 00h		; CSD1CounterLow register (CSD1_CNT_L)
    77  2BE8  5C 00             	db		5ch, 00h		; CSD1Data0High register (CSD1_DR0_H)
    78  2BEA  58 00             	db		58h, 00h		; CSD1Data0Low register (CSD1_DR0_L)
    79  2BEC  5D 00             	db		5dh, 00h		; CSD1Data1High register (CSD1_DR1_H)
    80  2BEE  59 00             	db		59h, 00h		; CSD1Data1Low register (CSD1_DR1_L)
    81  2BF0  E6 00             	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
    82  2BF2  E7 00             	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
    83  2BF4  E4 00             	db		e4h, 00h		; DecimatorDataHigh register (DEC_DH)
    84  2BF6  E5 00             	db		e5h, 00h		; DecimatorDataLow register (DEC_DL)
    85  2BF8  D6 00             	db		d6h, 00h		; I2CConfig register (I2CCFG)
    86  2BFA  CA 00             	db		cah, 00h		; IDACMode register (IDACMODE)
    87  2BFC  CB 00             	db		cbh, 00h		; PWMSource register (PWMSRC)
    88  2BFE  C8 00             	db		c8h, 00h		; PWMVoltageReference_0 register (PWMVREF0)
    89  2C00  C9 00             	db		c9h, 00h		; PWMVoltageReference_1 register (PWMVREF1)
    90  2C02  62 00             	db		62h, 00h		; PWM_Control register (PWM_CR)
    91  2C04  B7 00             	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
    92  2C06  BF 00             	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
    93  2C08  B0 00             	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
    94  2C0A  B1 00             	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
    95  2C0C  B2 00             	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
    96  2C0E  B3 33             	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
    97  2C10  B4 33             	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
    98  2C12  B5 01             	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
    99  2C14  B6 00             	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
   100  2C16  B8 55             	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
   101  2C18  B9 00             	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
   102  2C1A  BA 10             	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
   103  2C1C  BB 33             	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
   104  2C1E  BC 33             	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
   105  2C20  BD 02             	db		bdh, 02h		; Row_1_OutputDrive_0 register (RDI1SRO0)
   106  2C22  BE 00             	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
   107  2C24  CD 00             	db		cdh, 00h		; TSCMPHigh register (TSCMPH)
   108  2C26  CE 00             	db		ceh, 00h		; TSCMPLow register (TSCMPL)
   109  2C28  CC 00             	db		cch, 00h		; TSource:0 register (TSCR0)
   110  2C2A  CF 00             	db		cfh, 00h		; TSource:1 register (TSCR1)
   111  2C2C  FF                	db		ffh
   112  2C2D                    LoadConfigTBL_led_display_Bank1:
   113                          ;  Instance name SAR10, User Module SAR10
   114                          ;  Instance name Timer16, User Module Timer16
   115                          ;       Instance name Timer16, Block Name TIMER16_LSB(DBC00)
   116  2C2D  23 00             	db		23h, 00h		;Timer16_(DBC00CR1)
   117  2C2F  20 00             	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBC00FN)
   118  2C31  21 01             	db		21h, 01h		;Timer16_INPUT_LSB_REG(DBC00IN)
   119  2C33  22 40             	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBC00OU)
   120                          ;       Instance name Timer16, Block Name TIMER16_MSB(DBC01)
   121  2C35  27 00             	db		27h, 00h		;Timer16_(DBC01CR1)
   122  2C37  24 20             	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBC01FN)
   123  2C39  25 31             	db		25h, 31h		;Timer16_INPUT_MSB_REG(DBC01IN)
   124  2C3B  26 40             	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBC01OU)
   125                          ;  Instance name Timer8, User Module Timer8
   126                          ;       Instance name Timer8, Block Name TIMER8(DBC10)
   127  2C3D  33 00             	db		33h, 00h		;Timer8_(DBC10CR1)
   128  2C3F  30 30             	db		30h, 30h		;Timer8_FUNC_REG(DBC10FN)
   129  2C41  31 01             	db		31h, 01h		;Timer8_INPUT_REG(DBC10IN)
   130  2C43  32 40             	db		32h, 40h		;Timer8_OUTPUT_REG(DBC10OU)
   131                          ;  Instance name UART_Board, User Module UART
   132                          ;       Instance name UART_Board, Block Name RX(DCC13)
   133  2C45  3F 00             	db		3fh, 00h		;UART_Board_(DCC13CR1)
   134  2C47  3C 05             	db		3ch, 05h		;UART_Board_RX_FUNC_REG   (DCC13FN)
   135  2C49  3D C1             	db		3dh, c1h		;UART_Board_RX_INPUT_REG  (DCC13IN)
   136  2C4B  3E 40             	db		3eh, 40h		;UART_Board_RX_OUTPUT_REG (DCC13OU)
   137                          ;       Instance name UART_Board, Block Name TX(DCC12)
   138  2C4D  3B 00             	db		3bh, 00h		;UART_Board_(DCC12CR1)
   139  2C4F  38 1D             	db		38h, 1dh		;UART_Board_TX_FUNC_REG   (DCC12FN)
   140  2C51  39 01             	db		39h, 01h		;UART_Board_TX_INPUT_REG  (DCC12IN)
   141  2C53  3A 44             	db		3ah, 44h		;UART_Board_TX_OUTPUT_REG (DCC12OU)
   142                          ;  Instance name UART_Sensor, User Module UART
   143                          ;       Instance name UART_Sensor, Block Name RX(DCC03)
   144  2C55  2F 00             	db		2fh, 00h		;UART_Sensor_(DCC03CR1)
   145  2C57  2C 05             	db		2ch, 05h		;UART_Sensor_RX_FUNC_REG   (DCC03FN)
   146  2C59  2D C1             	db		2dh, c1h		;UART_Sensor_RX_INPUT_REG  (DCC03IN)
   147  2C5B  2E 40             	db		2eh, 40h		;UART_Sensor_RX_OUTPUT_REG (DCC03OU)
   148                          ;       Instance name UART_Sensor, Block Name TX(DCC02)
   149  2C5D  2B 00             	db		2bh, 00h		;UART_Sensor_(DCC02CR1)
   150  2C5F  28 1D             	db		28h, 1dh		;UART_Sensor_TX_FUNC_REG   (DCC02FN)
   151  2C61  29 01             	db		29h, 01h		;UART_Sensor_TX_INPUT_REG  (DCC02IN)
   152  2C63  2A 44             	db		2ah, 44h		;UART_Sensor_TX_OUTPUT_REG (DCC02OU)
   153                          ;  Global Register values Bank 1
   154  2C65  A8 00             	db		a8h, 00h		; ADCControl0 register (ADC_CR0)
   155  2C67  A9 08             	db		a9h, 08h		; ADCControl1 register (ADC_CR1)
   156  2C69  AA 00             	db		aah, 00h		; ADCControl2 register (ADC_CR2)
   157  2C6B  AB 00             	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
   158  2C6D  AC 00             	db		ach, 00h		; ADCControl4 register (ADC_CR4)
   159  2C6F  61 00             	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
   160  2C71  69 00             	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
   161  2C73  60 00             	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
   162  2C75  62 00             	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
   163  2C77  67 33             	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
   164  2C79  68 00             	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
   165  2C7B  5F 00             	db		5fh, 00h		; CMPClock:0 register (CMPCLK0)
   166  2C7D  5E 00             	db		5eh, 00h		; CMPClock:1 register (CMPCLK1)
   167  2C7F  5B 02             	db		5bh, 02h		; CMPColumnMux register (CMPCOLMUX)
   168  2C81  5D 00             	db		5dh, 00h		; CMPFilterControl register (CMPFLTCR)
   169  2C83  5C 00             	db		5ch, 00h		; CMPPWMControl register (CMPPWMCR)
   170  2C85  59 00             	db		59h, 00h		; CSCMOGlobalOutEnable register (CSCMPGOEN)
   171  2C87  58 00             	db		58h, 00h		; CSCMPControl:0 register (CSCMPCR0)
   172  2C89  5A 33             	db		5ah, 33h		; CSLUTControl register (CSLUTCR0)
   173  2C8B  64 00             	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
   174  2C8D  65 00             	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
   175  2C8F  FD 00             	db		fdh, 00h		; DAC_Control register (DAC_CR0)
   176  2C91  DC 00             	db		dch, 00h		; DAC_Control_1 register (DAC_CR1)
   177  2C93  D1 00             	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
   178  2C95  A1 00             	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
   179  2C97  D3 00             	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
   180  2C99  A3 00             	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
   181  2C9B  D0 00             	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
   182  2C9D  A0 00             	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
   183  2C9F  D2 00             	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
   184  2CA1  A2 00             	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
   185  2CA3  AD 00             	db		adh, 00h		; I2CAddress register (I2C_ADDR)
   186  2CA5  E1 7F             	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
   187  2CA7  E2 00             	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
   188  2CA9  DF 26             	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
   189  2CAB  DE 01             	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
   190  2CAD  DD 00             	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
   191  2CAF  D8 00             	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
   192  2CB1  D9 00             	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
   193  2CB3  DA 00             	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
   194  2CB5  DB 00             	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
   195  2CB7  EC 00             	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
   196  2CB9  A7 00             	db		a7h, 00h		; RTClockControl register (RTCCR)
   197  2CBB  A4 00             	db		a4h, 00h		; RTCurrentHour register (RTCH)
   198  2CBD  A5 00             	db		a5h, 00h		; RTCurrentMinute register (RTCM)
   199  2CBF  A6 00             	db		a6h, 00h		; RTCurrentSecond register (RTCS)
   200  2CC1  53 00             	db		53h, 00h		; VDAC5Control0:0 register (VDAC50CR0)
   201  2CC3  57 00             	db		57h, 00h		; VDAC5Control0:1 register (VDAC51CR0)
   202  2CC5  E7 00             	db		e7h, 00h		; VDACTrim register (VDAC_TRIM)
   203  2CC7  FF                	db		ffh
   204                          AREA psoc_config(rom, rel)
   205  3E1C                    LoadConfigTBL_led_display_Ordered:
   206                          ;  Ordered Global Register values
   207  3E1C  70 EF             	M8C_SetBank0
   208  3E1E  62 00 44          	mov	reg[00h], 44h		; Port_0_Data register (PRT0DR)
   209  3E21  71 10             	M8C_SetBank1
   210  3E23  62 00 FE          	mov	reg[00h], feh		; Port_0_DriveMode_0 register (PRT0DM0)
   211  3E26  62 01 01          	mov	reg[01h], 01h		; Port_0_DriveMode_1 register (PRT0DM1)
   212  3E29  70 EF             	M8C_SetBank0
   213  3E2B  62 03 00          	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
   214  3E2E  62 02 11          	mov	reg[02h], 11h		; Port_0_GlobalSelect register (PRT0GS)
   215  3E31  71 10             	M8C_SetBank1
   216  3E33  62 02 00          	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
   217  3E36  62 03 00          	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
   218  3E39  70 EF             	M8C_SetBank0
   219  3E3B  62 01 00          	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
   220  3E3E  62 04 A0          	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
   221  3E41  71 10             	M8C_SetBank1
   222  3E43  62 04 A0          	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
   223  3E46  62 05 FF          	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
   224  3E49  70 EF             	M8C_SetBank0
   225  3E4B  62 07 FF          	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
   226  3E4E  62 06 00          	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
   227  3E51  71 10             	M8C_SetBank1
   228  3E53  62 06 00          	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
   229  3E56  62 07 00          	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
   230  3E59  70 EF             	M8C_SetBank0
   231  3E5B  62 05 00          	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
   232  3E5E  62 08 00          	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
   233  3E61  71 10             	M8C_SetBank1
   234  3E63  62 08 01          	mov	reg[08h], 01h		; Port_2_DriveMode_0 register (PRT2DM0)
   235  3E66  62 09 FE          	mov	reg[09h], feh		; Port_2_DriveMode_1 register (PRT2DM1)
   236  3E69  70 EF             	M8C_SetBank0
   237  3E6B  62 0B EE          	mov	reg[0bh], eeh		; Port_2_DriveMode_2 register (PRT2DM2)
   238  3E6E  62 0A 11          	mov	reg[0ah], 11h		; Port_2_GlobalSelect register (PRT2GS)
   239  3E71  71 10             	M8C_SetBank1
   240  3E73  62 0A 00          	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
   241  3E76  62 0B 00          	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
   242  3E79  70 EF             	M8C_SetBank0
   243  3E7B  62 09 00          	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
   244  3E7E  62 0C 00          	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
   245  3E81  71 10             	M8C_SetBank1
   246  3E83  62 0C 00          	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
   247  3E86  62 0D 00          	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
   248  3E89  70 EF             	M8C_SetBank0
   249  3E8B  62 0F 00          	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
   250  3E8E  62 0E 00          	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
   251  3E91  71 10             	M8C_SetBank1
   252  3E93  62 0E 00          	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
   253  3E96  62 0F 00          	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
   254  3E99  70 EF             	M8C_SetBank0
   255  3E9B  62 0D 00          	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
   256  3E9E  62 10 00          	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
   257  3EA1  71 10             	M8C_SetBank1
   258  3EA3  62 10 00          	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
   259  3EA6  62 11 00          	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
   260  3EA9  70 EF             	M8C_SetBank0
   261  3EAB  62 13 00          	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
   262  3EAE  62 12 00          	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
   263  3EB1  71 10             	M8C_SetBank1
   264  3EB3  62 12 00          	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
   265  3EB6  62 13 00          	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
   266  3EB9  70 EF             	M8C_SetBank0
   267  3EBB  62 11 00          	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
   268  3EBE  70 EF             	M8C_SetBank0
   269  3EC0  7F                	ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
  LoadConfigTBL_led_display_Bank0 2B96    LoadConfigTBL_led_display_Bank1 2C2D  LoadConfigTBL_led_display_Ordered 3E1C  
                    FLAG_XIO_MASK 0010  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307+ 0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331+ 00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332+                         
   333+                         ; DECIMATOR Control Registers
   334+ 00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
      + 3C8E                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3C8E                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3C8E                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3C8E                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3C8E                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "SAR10.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  SAR10_EnableInt
    30                          export _SAR10_EnableInt
    31                          export  SAR10_DisableInt
    32                          export _SAR10_DisableInt
    33                          export  SAR10_Start
    34                          export _SAR10_Start
    35                          export  SAR10_Stop
    36                          export _SAR10_Stop
    37                          export  SAR10_Trigger
    38                          export _SAR10_Trigger
    39                          export  SAR10_fIsDataAvailable
    40                          export _SAR10_fIsDataAvailable
    41                          export  SAR10_iGetData
    42                          export _SAR10_iGetData
    43                          export  SAR10_bGetData
    44                          export _SAR10_bGetData
    45                          export  SAR10_SetADCChannel
    46                          export _SAR10_SetADCChannel
    47                          export  SAR10_SetTriggerSrc
    48                          export _SAR10_SetTriggerSrc
    49                          export  SAR10_EnableAutoTrigger
    50                          export _SAR10_EnableAutoTrigger
    51                          export  SAR10_SetClk
    52                          export _SAR10_SetClk
    53                          export  SAR10_SetRunMode
    54                          export _SAR10_SetRunMode
    55                          
    56                          AREA led_display_RAM (RAM,REL)
    57                          
    58                          ;-----------------------------------------------
    59                          ;  Constant Definitions
    60                          ;-----------------------------------------------
    61                          
    62                          ;-----------------------------------------------
    63                          ; Variable Allocation
    64                          ;-----------------------------------------------
    65                          
    66                          
    67                          AREA UserModules (ROM, REL)
    68                          
    69                          .SECTION
    70                          ;-----------------------------------------------------------------------------
    71                          ;  FUNCTION NAME: SAR10_EnableInt
    72                          ;
    73                          ;  DESCRIPTION:
    74                          ;     Enables the interrupt mode operation by setting the interrupt enable mask bit
    75                          ;     associated with this User Module. This function has no effect until and
    76                          ;     unless the global interrupts are enabled (for example by using the
    77                          ;     macro M8C_EnableGInt).
    78                          ;-----------------------------------------------------------------------------
    79                          ;
    80                          ;  ARGUMENTS:    None.
    81                          ;  RETURNS:      Nothing.
    82                          ;  SIDE EFFECTS: 
    83                          ;    The A and X registers may be modified by this or future implementations
    84                          ;    of this function.  The same is true for all RAM page pointer registers in
    85                          ;    the Large Memory Model.  When necessary, it is the calling function's
    86                          ;    responsibility to perserve their values across calls to fastcall16 
    87                          ;    functions.
    88                          ;
    89  2CC8                     SAR10_EnableInt:
    90  2CC8                    _SAR10_EnableInt:
    91                             RAM_PROLOGUE RAM_USE_CLASS_1
    92  2CC8  43 DF 10             SAR10_EnableInt_M
    93                             RAM_EPILOGUE RAM_USE_CLASS_1
    94  2CCB  7F                   ret
    95                          
    96                          .ENDSECTION
    97                          
    98                          
    99                          .SECTION
   100                          ;-----------------------------------------------------------------------------
   101                          ;  FUNCTION NAME: SAR10_DisableInt
   102                          ;
   103                          ;  DESCRIPTION:
   104                          ;     Disables the interrupt mode operation by clearing the interrupt enable
   105                          ;     mask bit associated with this User Module.
   106                          ;-----------------------------------------------------------------------------
   107                          ;
   108                          ;  ARGUMENTS:    None
   109                          ;  RETURNS:      Nothing
   110                          ;  SIDE EFFECTS: 
   111                          ;    The A and X registers may be modified by this or future implementations
   112                          ;    of this function.  The same is true for all RAM page pointer registers in
   113                          ;    the Large Memory Model.  When necessary, it is the calling function's
   114                          ;    responsibility to perserve their values across calls to fastcall16 
   115                          ;    functions.
   116                          ;
   117  2CCC                     SAR10_DisableInt:
   118  2CCC                    _SAR10_DisableInt:
   119                             RAM_PROLOGUE RAM_USE_CLASS_1
   120  2CCC  41 DF EF             SAR10_DisableInt_M
   121                             RAM_EPILOGUE RAM_USE_CLASS_1
   122  2CCF  7F                   ret
   123                          
   124                          .ENDSECTION
   125                          
   126                          
   127                          .SECTION
   128                          ;-----------------------------------------------------------------------------
   129                          ;  FUNCTION NAME: SAR10_Start
   130                          ;
   131                          ;  DESCRIPTION:
   132                          ;     Enables SAR operation. 
   133                          ;     Set the ADC_EN bit in SAR_CR0 register
   134                          ;-----------------------------------------------------------------------------
   135                          ;
   136                          ;  ARGUMENTS:    None
   137                          ;  RETURNS:      Nothing
   138                          ;  SIDE EFFECTS: 
   139                          ;    The A and X registers may be modified by this or future implementations
   140                          ;    of this function.  The same is true for all RAM page pointer registers in
   141                          ;    the Large Memory Model.  When necessary, it is the calling function's
   142                          ;    responsibility to perserve their values across calls to fastcall16 
   143                          ;    functions.
   144                          ;
   145  2CD0                     SAR10_Start:
   146  2CD0                    _SAR10_Start:
   147                             RAM_PROLOGUE RAM_USE_CLASS_1
   148  2CD0  71 10                M8C_SetBank1
   149  2CD2  43 A8 01             SAR10_Start_M
   150  2CD5  70 EF                M8C_SetBank0
   151                             RAM_EPILOGUE RAM_USE_CLASS_1
   152  2CD7  7F                   ret
   153                          
   154                          .ENDSECTION
   155                          
   156                          
   157                          .SECTION
   158                          ;-----------------------------------------------------------------------------
   159                          ;  FUNCTION NAME: SAR10_Stop
   160                          ;
   161                          ;  DESCRIPTION:
   162                          ;     Disables SAR operation 
   163                          ;     Clear ADC_EN bit in SAR_CR0 register
   164                          ;-----------------------------------------------------------------------------
   165                          ;
   166                          ;  ARGUMENTS:    None
   167                          ;  RETURNS:      Nothing
   168                          ;  SIDE EFFECTS: 
   169                          ;    The A and X registers may be modified by this or future implementations
   170                          ;    of this function.  The same is true for all RAM page pointer registers in
   171                          ;    the Large Memory Model.  When necessary, it is the calling function's
   172                          ;    responsibility to perserve their values across calls to fastcall16 
   173                          ;    functions.
   174                          ;
   175  2CD8                     SAR10_Stop:
   176  2CD8                    _SAR10_Stop:
   177                             RAM_PROLOGUE RAM_USE_CLASS_1
   178  2CD8  71 10                M8C_SetBank1
   179  2CDA  41 A8 FE             SAR10_Stop_M
   180  2CDD  70 EF                M8C_SetBank0
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2CDF  7F                   ret
   183                          
   184                          .ENDSECTION
   185                          
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: SAR10_Trigger
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Trigger the SAR to sample for one time
   192                          ;     Set START/ONGOING bit in SAR_CR0 register
   193                          ;
   194                          ;-----------------------------------------------------------------------------
   195                          ;
   196                          ;  ARGUMENTS:   Nothing
   197                          ;  RETURNS:         Nothing
   198                          ;  SIDE EFFECTS: 
   199                          ;    The A and X registers may be modified by this or future implementations
   200                          ;    of this function.  The same is true for all RAM page pointer registers in
   201                          ;    the Large Memory Model.  When necessary, it is the calling function's
   202                          ;    responsibility to perserve their values across calls to fastcall16 
   203                          ;    functions.
   204                          ;
   205  2CE0                     SAR10_Trigger:
   206  2CE0                    _SAR10_Trigger:
   207                             RAM_PROLOGUE RAM_USE_CLASS_1
   208  2CE0  71 10                M8C_SetBank1
   209  2CE2  43 A8 02             or    reg[SAR10_SAR_CR0_REG], SAR10_SAR_CR0_REG_SW_TRIG_BIT
   210  2CE5  70 EF                M8C_SetBank0
   211                             RAM_EPILOGUE RAM_USE_CLASS_1
   212  2CE7  7F                   ret
   213                          
   214                          .ENDSECTION
   215                          
   216                          .SECTION
   217                          ;-----------------------------------------------------------------------------
   218                          ;  FUNCTION NAME: SAR10_fIsDataAvailable
   219                          ;
   220                          ;  DESCRIPTION:
   221                          ;     Checks the availability of sampled data.
   222                          ;     Get READY bit from SAR_CR0 register
   223                          ;
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:   None
   227                          ;  RETURNS:     fastcall16 BYTE fIsDataAvailable (void)
   228                          ;  SIDE EFFECTS: 
   229                          ;    The A and X registers may be modified by this or future implementations
   230                          ;    of this function.  The same is true for all RAM page pointer registers in
   231                          ;    the Large Memory Model.  When necessary, it is the calling function's
   232                          ;    responsibility to perserve their values across calls to fastcall16 
   233                          ;    functions.
   234                          ;
   235  2CE8                     SAR10_fIsDataAvailable:
   236  2CE8                    _SAR10_fIsDataAvailable:
   237                             RAM_PROLOGUE RAM_USE_CLASS_4
   238  2CE8  71 10                M8C_SetBank1
   239  2CEA  5D A8                mov   A,reg[SAR10_SAR_CR0_REG]    ; Read value of SAR_CR0 register
   240  2CEC  70 EF                M8C_SetBank0
   241  2CEE  21 04                and   A,SAR10_READY_MASK                   ; Checks the availability of sampled data.
   242                             RAM_EPILOGUE RAM_USE_CLASS_4
   243  2CF0  7F                   ret
   244                          
   245                          .ENDSECTION
   246                          
   247                          .SECTION
   248                          ;-----------------------------------------------------------------------------
   249                          ;  FUNCTION NAME: SAR10_iGetData
   250                          ;
   251                          ;  DESCRIPTION:
   252                          ;     Returns last converted data.
   253                          ;     SAR_DL will be read first, then the SAR_DH
   254                          ;     The MSB is returned in X and the LSB in A
   255                          ;     Note: this function returns correct result only in right-justify mode 
   256                          ;     for CY8C28x45 device.
   257                          ;
   258                          ;-----------------------------------------------------------------------------
   259                          ;
   260                          ;  ARGUMENTS:   None
   261                          ;  RETURNS:     fastcall16 INT iGetData(void)
   262                          ;  SIDE EFFECTS: 
   263                          ;    The A and X registers may be modified by this or future implementations
   264                          ;    of this function.  The same is true for all RAM page pointer registers in
   265                          ;    the Large Memory Model.  When necessary, it is the calling function's
   266                          ;    responsibility to perserve their values across calls to fastcall16 
   267                          ;    functions.
   268                          ;
   269  FFFFFFFE                       Temp_offs:         equ  -2
   270  FFFFFFFF                       DL_REG_offs:       equ  -1
   271                                  
   272  2CF1                     SAR10_iGetData:
   273  2CF1                    _SAR10_iGetData:
   274  2CF1  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   275                          IF(SAR10_Justify)  ; for CY8C28x45 Device
   276                             mov   A, reg[SAR10_SAR_DL_REG]  ; Get 8 lowest bits
   277                             push  A                                    ; Store 8 lowest bits in stack
   278                             mov   A, reg[SAR10_SAR_DH_REG]  ; Read 2 highest bits
   279                             mov   X, A                                 ; Get MSB of result
   280                             pop   A                                    ; Get LSB of result
   281                          ELSE ;for CY8C22x45 device
   282  2CF3  50 00                mov   A, 0x00                              ; Init local var
   283  2CF5  08                   push  A                                    ; Reserve one byte in stack
   284  2CF6  5D 6B                mov   A, reg[SAR10_SAR_DL_REG]  ; Get 2 lowest bits
   285  2CF8  08                   push  A                                    ; Store 2 lowest bits in stack
   286  2CF9  4F                   mov   X, SP                                ; Set SP in X
   287  2CFA  5D 6A                mov   A, reg[SAR10_SAR_DH_REG]  ; Read 8 highest bits
   288  2CFC  64                   asl   A                                    ; Determine two highest bits and store it in stack
   289  2CFD  6C FE                rlc   [X+Temp_offs]
   290  2CFF  64                   asl   A
   291  2D00  6C FE                rlc   [X+Temp_offs]
   292  2D02  2B FF                or    A, [X+DL_REG_offs]                    ; Form LSB of result
   293  2D04  20                   pop   X                                     
   294  2D05  20                   pop   X                                     ; Get MSB of result
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D06  70 3F             	and	f, 0x3F
      + 2D08  71 80             	or	f, 0x80
   297  2D0A  7F                   ret
   298                          
   299                          .ENDSECTION
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: SAR10_GetDataMSB8
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;    Returns last converted data.
   307                          ;    Note: this function returns correct result only in left-justify mode
   308                          ;    for CY8C28x45 device.  
   309                          ;
   310                          ;-----------------------------------------------------------------------------
   311                          ;
   312                          ;  ARGUMENTS:    Nothing
   313                          ;  RETURNS:          fastcall16 char GetDataMSB8(void)
   314                          ;  SIDE EFFECTS: 
   315                          ;    The A and X registers may be modified by this or future implementations
   316                          ;    of this function.  The same is true for all RAM page pointer registers in
   317                          ;    the Large Memory Model.  When necessary, it is the calling function's
   318                          ;    responsibility to perserve their values across calls to fastcall16 
   319                          ;    functions.
   320                          ;
   321  2D0B                     SAR10_bGetData:
   322  2D0B                    _SAR10_bGetData:
   323                             RAM_PROLOGUE RAM_USE_CLASS_1
   324  2D0B  5D 6A                mov   A,reg[SAR10_SAR_DH_REG]
   325                             RAM_EPILOGUE RAM_USE_CLASS_1
   326  2D0D  7F                   ret
   327                          
   328                          .ENDSECTION
   329                          
   330                          .SECTION
   331                          ;-----------------------------------------------------------------------------
   332                          ;  FUNCTION NAME: SAR10_SelectADCChannel
   333                          ;
   334                          ;  DESCRIPTION:
   335                          ;    Select the SAR input from 14 optional input channels.
   336                          ;   Set ADC_CHS bits in SAR_CR0 register
   337                          ;-----------------------------------------------------------------------------
   338                          ;
   339                          ;  ARGUMENTS:    fastcall16 void SelectADCChannel(passed in A)
   340                          ;  RETURNS:    None
   341                          ;  SIDE EFFECTS: 
   342                          ;    The A and X registers may be modified by this or future implementations
   343                          ;    of this function.  The same is true for all RAM page pointer registers in
   344                          ;    the Large Memory Model.  When necessary, it is the calling function's
   345                          ;    responsibility to perserve their values across calls to fastcall16 
   346                          ;    functions.
   347                          ;
   348  2D0E                     SAR10_SetADCChannel:
   349  2D0E                    _SAR10_SetADCChannel:
   350  2D0E  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   351  2D10  21 78                and   A, SAR10_CHN_SEL_MASK
   352  2D12  4F                   mov   X, SP
   353  2D13  08                   push  A                                     ; store value in stack
   354  2D14  71 10                M8C_SetBank1
   355  2D16  5D A8                mov   A, reg[SAR10_SAR_CR0_REG]  ; get register value
   356  2D18  21 87                and   A, ~SAR10_CHN_SEL_MASK     ; clear ADC_CHS bits
   357  2D1A  2B 00                or    A, [X]                                ; set ADC_CHS bits
   358  2D1C  60 A8                mov   reg[SAR10_SAR_CR0_REG], A  ; set new register value
   359  2D1E  70 EF                M8C_SetBank0
   360  2D20  18                   pop   A
   361                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D21  70 3F             	and	f, 0x3F
      + 2D23  71 80             	or	f, 0x80
   362  2D25  7F                   ret
   363                          
   364                          .ENDSECTION
   365                          
   366                          .SECTION
   367                          ;-----------------------------------------------------------------------------
   368                          ;  FUNCTION NAME: SAR10_SelectTriggerSrc
   369                          ;
   370                          ;  DESCRIPTION:
   371                          ;    Select the SAR10 auto-trigger source 
   372                          ;    by setting TIGSEL in SAR_CR1
   373                          ;
   374                          ;-----------------------------------------------------------------------------
   375                          ;
   376                          ;  ARGUMENTS:    fastcall16 void SelectTriggerSrc(passed in A)
   377                          ;  RETURNS:    None
   378                          ;  SIDE EFFECTS: 
   379                          ;    The A and X registers may be modified by this or future implementations
   380                          ;    of this function.  The same is true for all RAM page pointer registers in
   381                          ;    the Large Memory Model.  When necessary, it is the calling function's
   382                          ;    responsibility to perserve their values across calls to fastcall16 
   383                          ;    functions.
   384                          ;
   385  2D26                     SAR10_SetTriggerSrc:
   386  2D26                    _SAR10_SetTriggerSrc:
   387  2D26  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   388  2D28  21 30                and   A, SAR10_TRG_SEL_MASK 
   389  2D2A  4F                   mov   X, SP
   390  2D2B  08                   push  A                                    ; store value in stack
   391  2D2C  71 10                M8C_SetBank1
   392  2D2E  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   393  2D30  21 CF                and   A, ~SAR10_TRG_SEL_MASK     ; clear TIGSEL bits
   394  2D32  2B 00                or    A, [X]                                ; set TIGSEL bits
   395  2D34  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   396  2D36  70 EF                M8C_SetBank0
   397  2D38  18                   pop   A
   398                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D39  70 3F             	and	f, 0x3F
      + 2D3B  71 80             	or	f, 0x80
   399  2D3D  7F                   ret
   400                          
   401                          .ENDSECTION
   402                          
   403                          .SECTION
   404                          ;-----------------------------------------------------------------------------
   405                          ;  FUNCTION NAME: SAR10_EnableAutoTrigger
   406                          ;
   407                          ;  DESCRIPTION:
   408                          ;    Global enable CR of the SAR10 auto-trigger function by setting 
   409                          ;    by setting ALIGN_EN in SAR_CR1
   410                          ;
   411                          ;-----------------------------------------------------------------------------
   412                          ;
   413                          ;  ARGUMENTS:    fastcall16 void EnableAutoTrigger(passed in A)
   414                          ;  RETURNS:    None
   415                          ;  SIDE EFFECTS: 
   416                          ;    The A and X registers may be modified by this or future implementations
   417                          ;    of this function.  The same is true for all RAM page pointer registers in
   418                          ;    the Large Memory Model.  When necessary, it is the calling function's
   419                          ;    responsibility to perserve their values across calls to fastcall16 
   420                          ;    functions.
   421                          ;
   422  2D3E                     SAR10_EnableAutoTrigger:
   423  2D3E                    _SAR10_EnableAutoTrigger:
   424  2D3E  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   425  2D40  21 01                and   A, SAR10_ALIGN_EN_MASK
   426  2D42  4F                   mov   X, SP
   427  2D43  08                   push  A                                    ; store value in stack
   428  2D44  71 10                M8C_SetBank1
   429  2D46  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   430  2D48  21 FE                and   A, ~SAR10_ALIGN_EN_MASK    ; clear ALIGN_EN bits
   431  2D4A  2B 00                or    A, [X]                                ; set ALIGN_EN bits
   432  2D4C  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   433  2D4E  70 EF                M8C_SetBank0
   434  2D50  18                   pop   A
   435                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D51  70 3F             	and	f, 0x3F
      + 2D53  71 80             	or	f, 0x80
   436  2D55  7F                   ret
   437                          
   438                          .ENDSECTION
   439                          
   440                          .SECTION
   441                          ;-----------------------------------------------------------------------------
   442                          ;  FUNCTION NAME: SAR10_SetClk
   443                          ;
   444                          ;  DESCRIPTION:
   445                          ;    Set SAR Sample Rate and Clock Selection 
   446                          ;    by setting CLKSEL bits in SAR_CR1
   447                          ;
   448                          ;-----------------------------------------------------------------------------
   449                          ;
   450                          ;  ARGUMENTS:    fastcall16 void SetClk(passed in A)
   451                          ;  RETURNS:    None
   452                          ;  SIDE EFFECTS: 
   453                          ;    The A and X registers may be modified by this or future implementations
   454                          ;    of this function.  The same is true for all RAM page pointer registers in
   455                          ;    the Large Memory Model.  When necessary, it is the calling function's
   456                          ;    responsibility to perserve their values across calls to fastcall16 
   457                          ;    functions.
   458                          ;
   459  2D56                     SAR10_SetClk:
   460  2D56                    _SAR10_SetClk:
   461  2D56  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   462  2D58  21 0E                and   A, SAR10_CLK_SEL_MASK
   463  2D5A  4F                   mov   X, SP
   464  2D5B  08                   push  A                                    ; store value in stack
   465  2D5C  71 10                M8C_SetBank1
   466  2D5E  5D A9                mov   A, reg[SAR10_SAR_CR1_REG]  ; get register value
   467  2D60  21 F1                and   A, ~SAR10_CLK_SEL_MASK     ; clear CLKSEL bits
   468  2D62  2B 00                or    A, [X]                                ; set CLKSEL bits
   469  2D64  60 A9                mov   reg[SAR10_SAR_CR1_REG], A  ; set new register value
   470  2D66  70 EF                M8C_SetBank0
   471  2D68  18                   pop   A
   472                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D69  70 3F             	and	f, 0x3F
      + 2D6B  71 80             	or	f, 0x80
   473  2D6D  7F                   ret
   474                          
   475                          .ENDSECTION
   476                          
   477                          .SECTION
   478                          ;-----------------------------------------------------------------------------
   479                          ;  FUNCTION NAME: SAR10_SetRunMode
   480                          ;
   481                          ;  DESCRIPTION:
   482                          ;    Set free-running mode for SAR
   483                          ;    by setting FREERUN bits in SAR_CR2
   484                          ;
   485                          ;-----------------------------------------------------------------------------
   486                          ;
   487                          ;  ARGUMENTS:    fastcall16 void SetRunMode(passed in A)
   488                          ;  RETURNS:    None
   489                          ;  SIDE EFFECTS: 
   490                          ;    The A and X registers may be modified by this or future implementations
   491                          ;    of this function.  The same is true for all RAM page pointer registers in
   492                          ;    the Large Memory Model.  When necessary, it is the calling function's
   493                          ;    responsibility to perserve their values across calls to fastcall16 
   494                          ;    functions.
   495                          ;
   496  2D6E                     SAR10_SetRunMode:
   497  2D6E                    _SAR10_SetRunMode:
   498  2D6E  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   499  2D70  21 08                and   A, SAR10_FREE_RUN_MASK
   500  2D72  4F                   mov   X, SP
   501  2D73  08                   push  A                                    ; store value in stack
   502  2D74  71 10                M8C_SetBank1
   503  2D76  5D AA                mov   A, reg[SAR10_SAR_CR2_REG]  ; get register value
   504  2D78  21 F7                and   A, ~SAR10_FREE_RUN_MASK    ; clear FREERUN bits
   505  2D7A  2B 00                or    A, [X]                                ; set FREERUN bits
   506  2D7C  60 AA                mov reg[SAR10_SAR_CR2_REG], A   ; set new register value   
   507  2D7E  70 EF                M8C_SetBank0
   508  2D80  18                   pop   A
   509                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2D81  70 3F             	and	f, 0x3F
      + 2D83  71 80             	or	f, 0x80
   510  2D85  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
                    Temp_offs FFFFFFFE       _SAR10_EnableAutoTrigger 2D3E            SAR10_FREE_RUN_MASK 0008  
          SAR10_ALIGN_EN_MASK 0001               SAR10_READY_MASK 0004             SAR10_TRG_SEL_MASK 0030  
          SAR10_SetADCChannel 2D0E               SAR10_SetRunMode 2D6E                 SAR10_bGetData 2D0B  
                       HITECH 0002                FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080  
             SAR10_SAR_DH_REG 006A               SAR10_SAR_DL_REG 006B                 _SAR10_Trigger 2CE0  
                 SAR10_SetClk 2D56              _SAR10_SetRunMode 2D6E                 SAR10_iGetData 2CF1  
       SAR10_fIsDataAvailable 2CE8                SAR10_EnableInt 2CC8      SYSTEM_LARGE_MEMORY_MODEL 0001  
      _SAR10_fIsDataAvailable 2CE8                  SAR10_INT_REG 00DF                _SAR10_bGetData 2D0B  
           SAR10_CHN_SEL_MASK 0078                    DL_REG_offs FFFFFFFF                      TOOLCHAIN 0002  
            SAR10_SAR_CR0_REG 00A8              SAR10_SAR_CR1_REG 00A9              SAR10_SAR_CR2_REG 00AA  
SAR10_SAR_CR0_REG_SW_TRIG_BIT 0002               FLAG_PGMODE_MASK 00C0                _SAR10_iGetData 2CF1  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008                  _SAR10_SetClk 2D56                  SAR10_Justify 0000  
                  SAR10_Start 2CD0                  SAR10_Trigger 2CE0    SAR10_SAR_CR0_REG_START_BIT 0001  
           SAR10_CLK_SEL_MASK 000E           _SAR10_SetTriggerSrc 2D26        SAR10_EnableAutoTrigger 2D3E  
                 _SAR10_Start 2CD0                     SAR10_Stop 2CD8               SAR10_DisableInt 2CCC  
           SAR10_INT_SAR_MASK 0010                    _SAR10_Stop 2CD8                  FLAG_XIO_MASK 0010  
            _SAR10_DisableInt 2CCC     SYSTEM_IDXPG_TRACKS_IDX_PP 0001               _SAR10_EnableInt 2CC8  
         _SAR10_SetADCChannel 2D0E     SYSTEM_IDXPG_TRACKS_STK_PP 0000            SAR10_SetTriggerSrc 2D26  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187+                         
   188+                         ; Continuous Time PSoC block Type E Row 0 Col 0
   189+ 0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190+ 0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
      + 3C8E                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: SAR10.inc
;;   Version: 2.
      +                         00, Updated on 2013/5/19 at 10:39:9
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Asse
      +                         mbler declarations for the SAR10 user module interface
;;-------------------------------------------
      +                         ----------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved
      +                         .
;;*****************************************************************************
;;****************
      +                         *************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10.inc
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the SAR10 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for SAR10 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    SAR10_SAR_CR0_REG_START_BIT:                               equ 0x01    ; Control register start bit
    21  0078                    SAR10_CHN_SEL_MASK:                                        equ 0x78
    22  0030                    SAR10_TRG_SEL_MASK:                                        equ 0x30
    23  0001                    SAR10_ALIGN_EN_MASK:                                       equ 0x01
    24  000E                    SAR10_CLK_SEL_MASK:                                        equ 0x0E
    25  0008                    SAR10_FREE_RUN_MASK:                                       equ 0x08
    26  0004                    SAR10_READY_MASK:                                          equ 0x04
    27  0002                    SAR10_SAR_CR0_REG_SW_TRIG_BIT:                             equ 0x02
    28                          
    29  00DF                    SAR10_INT_REG:                                             equ 0x0df
    30  0010                    SAR10_INT_SAR_MASK:                                        equ 0x10
    31                          ;--------------------------------------------------
    32                          ; SAR10 channel selection definitions
    33                          ;--------------------------------------------------
    34  0000                    SAR10_CHS_P00:                                             equ   (00h)
    35  0008                    SAR10_CHS_P01:                                             equ   (08h)
    36  0010                    SAR10_CHS_P02:                                             equ   (10h)
    37  0018                    SAR10_CHS_P03:                                             equ   (18h)
    38  0020                    SAR10_CHS_P04:                                             equ   (20h)
    39  0028                    SAR10_CHS_P05:                                             equ   (28h)
    40  0030                    SAR10_CHS_P06:                                             equ   (30h)
    41  0038                    SAR10_CHS_P07:                                             equ   (38h)
    42  0060                    SAR10_CHS_AMUX0:                                           equ   (60h)
    43  0068                    SAR10_CHS_AMUX1:                                           equ   (68h)
    44                          ;for compatibly with olds projects
    45  0060                    SAR10_CHS_AMUXL:                                           equ   (60h)
    46  0068                    SAR10_CHS_AMUXR:                                           equ   (68h)
    47                          
    48                          ;--------------------------------------------------
    49                          ; SAR10 trigger source definitions
    50                          ;--------------------------------------------------
    51  0000                    SAR10_SRC_TGRL:                                            equ   (00h)
    52  0010                    SAR10_SRC_TGRH:                                            equ   (10h)
    53  0020                    SAR10_SRC_TGR16:                                           equ   (20h)
    54  0030                    SAR10_SRC_TGRINCMP:                                        equ   (30h)
    55                          
    56                          ;--------------------------------------------------
    57                          ; SAR10 auto trigger definitions
    58                          ;--------------------------------------------------
    59  0001                    SAR10_AUTOTGR_ENABLE:                                      equ   (01h)
    60  0000                    SAR10_AUTOTGR_DISABLE:                                     equ   (00h)
    61                          
    62                          ;--------------------------------------------------
    63                          ; SAR10 clock selection definitions
    64                          ;--------------------------------------------------
    65  0000                    SAR10_SYSCLK_2:                                            equ   (00h)
    66  0002                    SAR10_SYSCLK_4:                                            equ   (02h)
    67  0004                    SAR10_SYSCLK_6:                                            equ   (04h)
    68  0006                    SAR10_SYSCLK_8:                                            equ   (06h)
    69  0008                    SAR10_SYSCLK_12:                                           equ   (08h)
    70  000A                    SAR10_SYSCLK_16:                                           equ   (0Ah)
    71  000C                    SAR10_SYSCLK_32:                                           equ   (0Ch)
    72  000E                    SAR10_SYSCLK_64:                                           equ   (0Eh)
    73                          
    74                          ;--------------------------------------------------
    75                          ; SAR10 run mode selection definitions
    76                          ;--------------------------------------------------
    77  0000                    SAR10_ONESHOT:                                             equ   (00h)
    78  0008                    SAR10_FREERUN:                                             equ   (08h)
    79                          
    80                          ;--------------------------------------------------
    81                          ; SAR10 definitions
    82                          ;--------------------------------------------------
    83  0000                    SAR10_Justify:                                             equ 0h
    84                          
    85                          ;--------------------------------------------------
    86                          ; Register Address Constants for SAR10
    87                          ;--------------------------------------------------
    88                          
    89  00A8                    SAR10_SAR_CR0_REG:                             equ 0xa8   ; SAR Control_0 register
    90  00A9                    SAR10_SAR_CR1_REG:                             equ 0xa9   ; SAR Control_1 register
    91  00AA                    SAR10_SAR_CR2_REG:                             equ 0xaa   ; SAR Control_2 register
    92  006A                    SAR10_SAR_DH_REG:                              equ 0x6a    ; SAR Data (MSB) register
    93  006B                    SAR10_SAR_DL_REG:                              equ 0x6b    ; SAR Data (LSB) register
    94                          
    95                          ;--------------------------------------------------
    96                          ; SAR10 Macro 'Functions'
    97                          ;--------------------------------------------------
    98                          
    99                             macro SAR10_Start_M
   100                             or    reg[SAR10_SAR_CR0_REG],  SAR10_SAR_CR0_REG_START_BIT
   101  3C8E                       endm
   102                          
   103                             macro SAR10_Stop_M
   104                             and   reg[SAR10_SAR_CR0_REG], ~SAR10_SAR_CR0_REG_START_BIT
   105  3C8E                       endm
   106                          
   107                             macro SAR10_EnableInt_M
   108                             M8C_EnableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   109  3C8E                       endm
   110                          
   111                             macro SAR10_DisableInt_M
   112                             M8C_DisableIntMask SAR10_INT_REG, SAR10_INT_SAR_MASK
   113  3C8E                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: SAR10INT.asm
     4                          ;;   Version: 2.00, Updated on 2013/5/19 at 10:39:9
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: SAR10 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "SAR10.inc"
    16                          
    17                          ;-----------------------------------------------
    18                          ;  Global Symbols
    19                          ;-----------------------------------------------
    20                          export  _SAR10_ISR
    21                          
    22                          
    23                          AREA InterruptRAM (RAM,REL,CON)
    24                             
    25                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    26                          ;---------------------------------------------------
    27                          ; Insert your custom declarations below this banner
    28                          ;---------------------------------------------------
    29                          
    30                          ;------------------------
    31                          ; Includes
    32                          ;------------------------
    33                          
    34                          	
    35                          ;------------------------
    36                          ;  Constant Definitions
    37                          ;------------------------
    38                          
    39                          
    40                          ;------------------------
    41                          ; Variable Allocation
    42                          ;------------------------
    43                          
    44                          ;---------------------------------------------------
    45                          ; Insert your custom declarations above this banner
    46                          ;---------------------------------------------------
    47                          ;@PSoC_UserCode_END@ (Do not change this line.)
    48                          
    49                          
    50                          AREA UserModules (ROM, REL)
    51                          
    52                          ;-----------------------------------------------------------------------------
    53                          ;  FUNCTION NAME: _SAR10_ISR
    54                          ;
    55                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    56                          ;
    57                          ;-----------------------------------------------------------------------------
    58                          ;
    59                          
    60  2D86                    _SAR10_ISR:
    61                          
    62                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    63                             ;---------------------------------------------------
    64                             ; Insert your custom assembly code below this banner
    65                             ;---------------------------------------------------
    66                             ;   NOTE: interrupt service routines must preserve
    67                             ;   the values of the A and X CPU registers.
    68                             
    69                             ;---------------------------------------------------
    70                             ; Insert your custom assembly code above this banner
    71                             ;---------------------------------------------------
    72                             
    73                             ;---------------------------------------------------
    74                             ; Insert a lcall to a C function below this banner
    75                             ; and un-comment the lines between these banners
    76                             ;---------------------------------------------------
    77                             
    78                             ;PRESERVE_CPU_CONTEXT
    79                             ;lcall _My_C_Function
    80                             ;RESTORE_CPU_CONTEXT
    81                             
    82                             ;---------------------------------------------------
    83                             ; Insert a lcall to a C function above this banner
    84                             ; and un-comment the lines between these banners
    85                             ;---------------------------------------------------
    86                             ;@PSoC_UserCode_END@ (Do not change this line.)
    87                          
    88  2D86  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
                       HITECH 0002                     _SAR10_ISR 2D86                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305+ 0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329+ 00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
      + 3C8E                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  009F                    Timer16_PERIOD:                            equ 0x9f
    30  0050                    Timer16_COMPARE_VALUE:                     equ 0x50
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  3C8E                       endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  3C8E                       endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  3C8E                       endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  3C8E                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "Timer16.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  Timer16_EnableInt
    30                          export _Timer16_EnableInt
    31                          export  Timer16_DisableInt
    32                          export _Timer16_DisableInt
    33                          export  Timer16_Start
    34                          export _Timer16_Start
    35                          export  Timer16_Stop
    36                          export _Timer16_Stop
    37                          export  Timer16_WritePeriod
    38                          export _Timer16_WritePeriod
    39                          export  Timer16_WriteCompareValue
    40                          export _Timer16_WriteCompareValue
    41                          export  Timer16_wReadCompareValue
    42                          export _Timer16_wReadCompareValue
    43                          export  Timer16_wReadTimer
    44                          export _Timer16_wReadTimer
    45                          export  Timer16_wReadTimerSaveCV
    46                          export _Timer16_wReadTimerSaveCV
    47                          
    48                          ; The following functions are deprecated and subject to omission in future releases
    49                          ;
    50                          export  wTimer16_ReadCompareValue  ; deprecated
    51                          export _wTimer16_ReadCompareValue  ; deprecated
    52                          export  wTimer16_ReadTimer         ; deprecated
    53                          export _wTimer16_ReadTimer         ; deprecated
    54                          export  wTimer16_ReadTimerSaveCV   ; deprecated
    55                          export _wTimer16_ReadTimerSaveCV   ; deprecated
    56                          
    57                          export  wTimer16_ReadCounter       ; obsolete
    58                          export _wTimer16_ReadCounter       ; obsolete
    59                          export  wTimer16_CaptureCounter    ; obsolete
    60                          export _wTimer16_CaptureCounter    ; obsolete
    61                          
    62                          
    63                          AREA led_display_RAM (RAM,REL)
    64                          
    65                          ;-----------------------------------------------
    66                          ;  Constant Definitions
    67                          ;-----------------------------------------------
    68                          
    69                          
    70                          ;-----------------------------------------------
    71                          ; Variable Allocation
    72                          ;-----------------------------------------------
    73                          
    74                          
    75                          AREA UserModules (ROM, REL)
    76                          
    77                          .SECTION
    78                          ;-----------------------------------------------------------------------------
    79                          ;  FUNCTION NAME: Timer16_EnableInt
    80                          ;
    81                          ;  DESCRIPTION:
    82                          ;     Enables this timer's interrupt by setting the interrupt enable mask bit
    83                          ;     associated with this User Module. This function has no effect until and
    84                          ;     unless the global interrupts are enabled (for example by using the
    85                          ;     macro M8C_EnableGInt).
    86                          ;-----------------------------------------------------------------------------
    87                          ;
    88                          ;  ARGUMENTS:    None.
    89                          ;  RETURNS:      Nothing.
    90                          ;  SIDE EFFECTS: 
    91                          ;    The A and X registers may be modified by this or future implementations
    92                          ;    of this function.  The same is true for all RAM page pointer registers in
    93                          ;    the Large Memory Model.  When necessary, it is the calling function's
    94                          ;    responsibility to perserve their values across calls to fastcall16 
    95                          ;    functions.
    96                          ;
    97  2D87                     Timer16_EnableInt:
    98  2D87                    _Timer16_EnableInt:
    99                             RAM_PROLOGUE RAM_USE_CLASS_1
   100  2D87  43 E1 02             Timer16_EnableInt_M
   101                             RAM_EPILOGUE RAM_USE_CLASS_1
   102  2D8A  7F                   ret
   103                          
   104                          .ENDSECTION
   105                          
   106                          
   107                          .SECTION
   108                          ;-----------------------------------------------------------------------------
   109                          ;  FUNCTION NAME: Timer16_DisableInt
   110                          ;
   111                          ;  DESCRIPTION:
   112                          ;     Disables this timer's interrupt by clearing the interrupt enable
   113                          ;     mask bit associated with this User Module.
   114                          ;-----------------------------------------------------------------------------
   115                          ;
   116                          ;  ARGUMENTS:    None
   117                          ;  RETURNS:      Nothing
   118                          ;  SIDE EFFECTS: 
   119                          ;    The A and X registers may be modified by this or future implementations
   120                          ;    of this function.  The same is true for all RAM page pointer registers in
   121                          ;    the Large Memory Model.  When necessary, it is the calling function's
   122                          ;    responsibility to perserve their values across calls to fastcall16 
   123                          ;    functions.
   124                          ;
   125  2D8B                     Timer16_DisableInt:
   126  2D8B                    _Timer16_DisableInt:
   127                             RAM_PROLOGUE RAM_USE_CLASS_1
   128  2D8B  41 E1 FD             Timer16_DisableInt_M
   129                             RAM_EPILOGUE RAM_USE_CLASS_1
   130  2D8E  7F                   ret
   131                          
   132                          .ENDSECTION
   133                          
   134                          
   135                          .SECTION
   136                          ;-----------------------------------------------------------------------------
   137                          ;  FUNCTION NAME: Timer16_Start
   138                          ;
   139                          ;  DESCRIPTION:
   140                          ;     Sets the start bit in the Control register of this user module.  The
   141                          ;     timer will begin counting on the next input clock.
   142                          ;-----------------------------------------------------------------------------
   143                          ;
   144                          ;  ARGUMENTS:    None
   145                          ;  RETURNS:      Nothing
   146                          ;  SIDE EFFECTS: 
   147                          ;    The A and X registers may be modified by this or future implementations
   148                          ;    of this function.  The same is true for all RAM page pointer registers in
   149                          ;    the Large Memory Model.  When necessary, it is the calling function's
   150                          ;    responsibility to perserve their values across calls to fastcall16 
   151                          ;    functions.
   152                          ;
   153  2D8F                     Timer16_Start:
   154  2D8F                    _Timer16_Start:
   155                             RAM_PROLOGUE RAM_USE_CLASS_1
   156  2D8F  43 23 01             Timer16_Start_M
   157                             RAM_EPILOGUE RAM_USE_CLASS_1
   158  2D92  7F                   ret
   159                          
   160                          .ENDSECTION
   161                          
   162                          
   163                          .SECTION
   164                          ;-----------------------------------------------------------------------------
   165                          ;  FUNCTION NAME: Timer16_Stop
   166                          ;
   167                          ;  DESCRIPTION:
   168                          ;     Disables timer operation by clearing the start bit in the Control
   169                          ;     register of the LSB block.
   170                          ;-----------------------------------------------------------------------------
   171                          ;
   172                          ;  ARGUMENTS:    None
   173                          ;  RETURNS:      Nothing
   174                          ;  SIDE EFFECTS: 
   175                          ;    The A and X registers may be modified by this or future implementations
   176                          ;    of this function.  The same is true for all RAM page pointer registers in
   177                          ;    the Large Memory Model.  When necessary, it is the calling function's
   178                          ;    responsibility to perserve their values across calls to fastcall16 
   179                          ;    functions.
   180                          ;
   181  2D93                     Timer16_Stop:
   182  2D93                    _Timer16_Stop:
   183                             RAM_PROLOGUE RAM_USE_CLASS_1
   184  2D93  41 23 FE             Timer16_Stop_M
   185                             RAM_EPILOGUE RAM_USE_CLASS_1
   186  2D96  7F                   ret
   187                          
   188                          .ENDSECTION
   189                          
   190                          
   191                          .SECTION
   192                          ;-----------------------------------------------------------------------------
   193                          ;  FUNCTION NAME: Timer16_WritePeriod
   194                          ;
   195                          ;  DESCRIPTION:
   196                          ;     Write the 16-bit period value into the Period register (DR1). If the
   197                          ;     Timer user module is stopped, then this value will also be latched
   198                          ;     into the Count register (DR0).
   199                          ;-----------------------------------------------------------------------------
   200                          ;
   201                          ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
   202                          ;  RETURNS:   Nothing
   203                          ;  SIDE EFFECTS:
   204                          ;    The A and X registers may be modified by this or future implementations
   205                          ;    of this function.  The same is true for all RAM page pointer registers in
   206                          ;    the Large Memory Model.  When necessary, it is the calling function's
   207                          ;    responsibility to perserve their values across calls to fastcall16 
   208                          ;    functions.
   209                          ;
   210  2D97                     Timer16_WritePeriod:
   211  2D97                    _Timer16_WritePeriod:
   212                             RAM_PROLOGUE RAM_USE_CLASS_1
   213  2D97  60 21                mov   reg[Timer16_PERIOD_LSB_REG], A
   214  2D99  5B                   mov   A, X
   215  2D9A  60 25                mov   reg[Timer16_PERIOD_MSB_REG], A
   216                             RAM_EPILOGUE RAM_USE_CLASS_1
   217  2D9C  7F                   ret
   218                          
   219                          .ENDSECTION
   220                          
   221                          
   222                          .SECTION
   223                          ;-----------------------------------------------------------------------------
   224                          ;  FUNCTION NAME: Timer16_WriteCompareValue
   225                          ;
   226                          ;  DESCRIPTION:
   227                          ;     Writes compare value into the Compare register (DR2).
   228                          ;
   229                          ;     NOTE! The Timer user module must be STOPPED in order to write the
   230                          ;           Compare register. (Call Timer16_Stop to disable).
   231                          ;-----------------------------------------------------------------------------
   232                          ;
   233                          ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
   234                          ;  RETURNS:      Nothing
   235                          ;  SIDE EFFECTS: 
   236                          ;    The A and X registers may be modified by this or future implementations
   237                          ;    of this function.  The same is true for all RAM page pointer registers in
   238                          ;    the Large Memory Model.  When necessary, it is the calling function's
   239                          ;    responsibility to perserve their values across calls to fastcall16 
   240                          ;    functions.
   241                          ;
   242  2D9D                     Timer16_WriteCompareValue:
   243  2D9D                    _Timer16_WriteCompareValue:
   244                             RAM_PROLOGUE RAM_USE_CLASS_1
   245  2D9D  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   246  2D9F  5B                   mov   A, X
   247  2DA0  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   248                             RAM_EPILOGUE RAM_USE_CLASS_1
   249  2DA2  7F                   ret
   250                          
   251                          .ENDSECTION
   252                          
   253                          
   254                          .SECTION
   255                          ;-----------------------------------------------------------------------------
   256                          ;  FUNCTION NAME: Timer16_wReadCompareValue
   257                          ;
   258                          ;  DESCRIPTION:
   259                          ;     Reads the Compare registers.
   260                          ;-----------------------------------------------------------------------------
   261                          ;
   262                          ;  ARGUMENTS:    None
   263                          ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
   264                          ;  SIDE EFFECTS: 
   265                          ;    The A and X registers may be modified by this or future implementations
   266                          ;    of this function.  The same is true for all RAM page pointer registers in
   267                          ;    the Large Memory Model.  When necessary, it is the calling function's
   268                          ;    responsibility to perserve their values across calls to fastcall16 
   269                          ;    functions.
   270                          ;
   271  2DA3                     Timer16_wReadCompareValue:
   272  2DA3                    _Timer16_wReadCompareValue:
   273  2DA3                     wTimer16_ReadCompareValue:                      ; this name deprecated
   274  2DA3                    _wTimer16_ReadCompareValue:                      ; this name deprecated
   275                             RAM_PROLOGUE RAM_USE_CLASS_1
   276  2DA3  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   277  2DA5  5C                   mov   X, A
   278  2DA6  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   279                             RAM_EPILOGUE RAM_USE_CLASS_1
   280  2DA8  7F                   ret
   281                          
   282                          .ENDSECTION
   283                          
   284                          
   285                          .SECTION
   286                          ;-----------------------------------------------------------------------------
   287                          ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
   288                          ;
   289                          ;  DESCRIPTION:
   290                          ;     Returns the value in the Count register (DR0), preserving the
   291                          ;     value in the compare register (DR2).
   292                          ;-----------------------------------------------------------------------------
   293                          ;
   294                          ;  ARGUMENTS: None
   295                          ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
   296                          ;  SIDE EFFECTS:
   297                          ;     1) May cause an interrupt, if interrupt on Compare is enabled.
   298                          ;     2) If enabled, Global interrupts are momentarily disabled.
   299                          ;     3) The user module is stopped momentarily while the compare value is
   300                          ;        restored.  This may cause the Count register to miss one or more
   301                          ;        counts depending on the input clock speed.
   302                          ;     4) The A and X registers may be modified by this or future implementations
   303                          ;        of this function.  The same is true for all RAM page pointer registers in
   304                          ;        the Large Memory Model.  When necessary, it is the calling function's
   305                          ;        responsibility to perserve their values across calls to fastcall16 
   306                          ;        functions.
   307                          ;
   308                          ;  THEORY of OPERATION:
   309                          ;     1) Read and save the Compare register.
   310                          ;     2) Read the Count register, causing its data to be latched into
   311                          ;        the Compare register.
   312                          ;     3) Read and save the Counter value, now in the Compare register,
   313                          ;        to the buffer.
   314                          ;     4) Disable global interrupts
   315                          ;     5) Halt the timer
   316                          ;     6) Restore the Compare register values
   317                          ;     7) Start the Timer again
   318                          ;     8) Restore global interrupt state
   319                          ;
   320  2DA9                     Timer16_wReadTimerSaveCV:
   321  2DA9                    _Timer16_wReadTimerSaveCV:
   322  2DA9                     wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   323  2DA9                    _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
   324  2DA9                     wTimer16_ReadCounter:                           ; this name deprecated
   325  2DA9                    _wTimer16_ReadCounter:                           ; this name deprecated
   326                          
   327  0000                    CpuFlags:      equ   0
   328  0001                    wCount_MSB:    equ   1
   329  0002                    wCount_LSB:    equ   2
   330                          
   331  2DA9  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   332  2DAB  4F                   mov   X, SP                                   ; X <- stack frame pointer
   333  2DAC  38 03                add   SP, 3                                   ; Reserve space for flags, count
   334  2DAE  5D 23                mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
   335  2DB0  08                   push  A
   336  2DB1  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
   337  2DB3  08                   push  A
   338  2DB4  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]
   339  2DB6  08                   push  A
   340  2DB7  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   341                                                                           ; This may cause an interrupt!
   342  2DB9  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
   343  2DBB  54 01                mov   [X+wCount_MSB], A
   344  2DBD  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   345  2DBF  54 02                mov   [X+wCount_LSB], A
   346  2DC1  50 00                mov   A, 0                                    ; Guess the global interrupt state
   347  2DC3  49 F7 01             tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
   348  2DC6  A003                 jz    .SetupStatusFlag                        ;   Yes, guess was correct
   349  2DC8  50 01                mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
   350  2DCA                    .SetupStatusFlag:                                ; and ...
   351  2DCA  54 00                mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
   352  2DCC  70 FE                M8C_DisableGInt                               ; Disable interrupts globally
   353  2DCE  41 23 FE             Timer16_Stop_M                                ; Disable (stop) the timer
   354  2DD1  18                   pop   A                                       ; Restore the Compare register
   355  2DD2  60 26                mov   reg[Timer16_COMPARE_MSB_REG], A
   356  2DD4  18                   pop   A
   357  2DD5  60 22                mov   reg[Timer16_COMPARE_LSB_REG], A
   358  2DD7  18                   pop   A                                       ; restore start state of the timer
   359  2DD8  60 23                mov   reg[Timer16_CONTROL_LSB_REG], A
   360  2DDA  18                   pop   A                                       ; Return result stored in stack frame
   361  2DDB  20                   pop   X
   362                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2DDC  70 3F             	and	f, 0x3F
      + 2DDE  71 80             	or	f, 0x80
   363  2DE0  7E                   reti                                          ; Flag Reg <- StackFrame[0]
   364                          
   365                          .ENDSECTION
   366                          
   367                          
   368                          .SECTION
   369                          ;-----------------------------------------------------------------------------
   370                          ;  FUNCTION NAME: Timer16_wReadTimer
   371                          ;
   372                          ;  DESCRIPTION:
   373                          ;     Performs a software capture of the Count register.  A synchronous
   374                          ;     read of the Count register is performed.  The timer is NOT stopped.
   375                          ;
   376                          ;     WARNING - this will cause loss of data in the Compare register.
   377                          ;-----------------------------------------------------------------------------
   378                          ;
   379                          ;  ARGUMENTS:    None
   380                          ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
   381                          ;  SIDE EFFECTS:
   382                          ;    May cause an interrupt.
   383                          ;
   384                          ;    The A and X registers may be modified by this or future implementations
   385                          ;    of this function.  The same is true for all RAM page pointer registers in
   386                          ;    the Large Memory Model.  When necessary, it is the calling function's
   387                          ;    responsibility to perserve their values across calls to fastcall16 
   388                          ;    functions.
   389                          ;
   390                          ;  THEORY of OPERATION:
   391                          ;     1) Read the Count register - this causes the count value to be
   392                          ;        latched into the Compare registers.
   393                          ;     2) Read and return the Count register values from the Compare
   394                          ;        registers into the return buffer.
   395                          ;
   396  2DE1                     Timer16_wReadTimer:
   397  2DE1                    _Timer16_wReadTimer:
   398  2DE1                     wTimer16_ReadTimer:                             ; this name deprecated
   399  2DE1                    _wTimer16_ReadTimer:                             ; this name deprecated
   400  2DE1                     wTimer16_CaptureCounter:                        ; this name deprecated
   401  2DE1                    _wTimer16_CaptureCounter:                        ; this name deprecated
   402                          
   403                             RAM_PROLOGUE RAM_USE_CLASS_1
   404  2DE1  5D 20                mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
   405                                                                           ; This may cause an interrupt!
   406                          
   407  2DE3  5D 26                mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
   408  2DE5  5C                   mov   X, A
   409  2DE6  5D 22                mov   A, reg[Timer16_COMPARE_LSB_REG]
   410                             RAM_EPILOGUE RAM_USE_CLASS_1
   411  2DE8  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
           wTimer16_ReadTimer 2DE1           wTimer16_ReadCounter 2DA9              Timer16_EnableInt 2D87  
     Timer16_wReadTimerSaveCV 2DA9                          CPU_F 00F7       _wTimer16_CaptureCounter 2DE1  
    Timer16_WriteCompareValue 2D9D             Timer16_DisableInt 2D8B     _wTimer16_ReadCompareValue 2DA3  
                       HITECH 0002             _Timer16_EnableInt 2D87                  _Timer16_Stop 2D93  
              FLAG_PGMODE_01b 0040                FLAG_PGMODE_10b 0080       wTimer16_ReadTimerSaveCV 2DA9  
           Timer16_wReadTimer 2DE1                       CpuFlags 0000               Timer16_INT_MASK 0002  
          _wTimer16_ReadTimer 2DE1      SYSTEM_LARGE_MEMORY_MODEL 0001     _Timer16_WriteCompareValue 2D9D  
               FLAG_GLOBAL_IE 0001         Timer16_PERIOD_LSB_REG 0021         Timer16_PERIOD_MSB_REG 0025  
        _wTimer16_ReadCounter 2DA9                      TOOLCHAIN 0002        Timer16_COUNTER_LSB_REG 0020  
               _Timer16_Start 2D8F               FLAG_PGMODE_MASK 00C0            _Timer16_DisableInt 2D8B  
              RAM_USE_CLASS_1 0001                RAM_USE_CLASS_2 0002                RAM_USE_CLASS_3 0004  
              RAM_USE_CLASS_4 0008      _Timer16_wReadTimerSaveCV 2DA9      Timer16_wReadCompareValue 2DA3  
                   wCount_LSB 0002                     wCount_MSB 0001        Timer16_CONTROL_LSB_REG 0023  
              Timer16_INT_REG 00E1           _Timer16_WritePeriod 2D97            _Timer16_wReadTimer 2DE1  
      Timer16_COMPARE_LSB_REG 0022        Timer16_COMPARE_MSB_REG 0026      _wTimer16_ReadTimerSaveCV 2DA9  
Timer16_CONTROL_REG_START_BIT 0001        wTimer16_CaptureCounter 2DE1     SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
          Timer16_WritePeriod 2D97     _Timer16_wReadCompareValue 2DA3                  Timer16_Start 2D8F  
    wTimer16_ReadCompareValue 2DA3     SYSTEM_IDXPG_TRACKS_STK_PP 0000                   Timer16_Stop 2D93  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 0000'                   
      + 0000'                   ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  0000'                      endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  0000'                      endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  0000'                      endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  0000'                      endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  0000'                      endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  0000'                      endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  0000'                      endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  0000'                      endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  0000'                      endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  0000'                      endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  0000'                      endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  0000'                      endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  0000'                      endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  0000'                      endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  0000'                      endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  0000'                      endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 0000'                   
      + 0000'                   ; end of file Memory.inc
      + 0000'                   ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer16.inc
;;   Version: 
      +                         2.6, Updated on 2013/5/19 at 10:44:39
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer16 user module interface
;;---------------------------------------
      +                         --------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Rese
      +                         rved.
;;*****************************************************************************
;;************
      +                         *****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16.inc
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer16 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer16 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer16_CONTROL_REG_START_BIT:             equ 0x01    ; Control register start bit
    21  00E1                    Timer16_INT_REG:                           equ 0x0e1
    22  0002                    Timer16_INT_MASK:                          equ 0x02
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer16 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  009F                    Timer16_PERIOD:                            equ 0x9f
    30  0050                    Timer16_COMPARE_VALUE:                     equ 0x50
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer16
    35                          ;--------------------------------------------------
    36                          
    37  0020                    Timer16_COUNTER_LSB_REG:               equ 0x20   ; DR0 Counter register
    38  0024                    Timer16_COUNTER_MSB_REG:               equ 0x24
    39  0021                    Timer16_PERIOD_LSB_REG:                equ 0x21   ; DR1 Period register
    40  0025                    Timer16_PERIOD_MSB_REG:                equ 0x25
    41  0022                    Timer16_COMPARE_LSB_REG:               equ 0x22   ; DR2 CompareValue register
    42  0026                    Timer16_COMPARE_MSB_REG:               equ 0x26
    43  0023                    Timer16_CONTROL_LSB_REG:               equ 0x23   ; Control register
    44  0027                    Timer16_CONTROL_MSB_REG:               equ 0x27
    45  0020                    Timer16_FUNC_LSB_REG:                  equ 0x20   ; Function register
    46  0024                    Timer16_FUNC_MSB_REG:                  equ 0x24
    47  0021                    Timer16_INPUT_LSB_REG:                 equ 0x21   ; Input register
    48  0025                    Timer16_INPUT_MSB_REG:                 equ 0x25
    49  0022                    Timer16_OUTPUT_LSB_REG:                equ 0x22   ; Output register
    50  0026                    Timer16_OUTPUT_MSB_REG:                equ 0x26
    51                          
    52                          
    53                          ;--------------------------------------------------
    54                          ; Timer16 Macro 'Functions'
    55                          ;--------------------------------------------------
    56                          
    57                             macro Timer16_Start_M
    58                             or    reg[Timer16_CONTROL_LSB_REG],  Timer16_CONTROL_REG_START_BIT
    59  0000'                      endm
    60                          
    61                             macro Timer16_Stop_M
    62                             and   reg[Timer16_CONTROL_LSB_REG], ~Timer16_CONTROL_REG_START_BIT
    63  0000'                      endm
    64                          
    65                             macro Timer16_EnableInt_M
    66                             M8C_EnableIntMask Timer16_INT_REG, Timer16_INT_MASK
    67  0000'                      endm
    68                          
    69                             macro Timer16_DisableInt_M
    70                             M8C_DisableIntMask Timer16_INT_REG, Timer16_INT_MASK
    71  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer16INT.asm
     4                          ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer16 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Timer16.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Timer16_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Timer16_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Timer16_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
                 _Timer16_ISR 0000                         HITECH 0002                      TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:48 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306+ 0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330+ 00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331+ 00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
      + 3C8E                    ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer8.inc
;;   Version: 2
      +                         .70, Updated on 2013/5/19 at 10:44:42
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer8 user module interface
;;----------------------------------------
      +                         -------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reser
      +                         ved.
;;*****************************************************************************
;;*************
      +                         ****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer8.inc
     4                          ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer8 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer8_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    21  00E1                    Timer8_INT_REG:                            equ 0x0e1
    22  0010                    Timer8_INT_MASK:                           equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer8 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  009F                    Timer8_PERIOD:                             equ 0x9f
    30  0050                    Timer8_COMPARE_VALUE:                      equ 0x50
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer8
    35                          ;--------------------------------------------------
    36                          
    37  0030                    Timer8_COUNTER_REG:                    equ 0x30   ; DR0 Counter register
    38  0031                    Timer8_PERIOD_REG:                     equ 0x31   ; DR1 Period register
    39  0032                    Timer8_COMPARE_REG:                    equ 0x32   ; DR2 CompareValue register
    40  0033                    Timer8_CONTROL_REG:                    equ 0x33   ; Control register
    41  0030                    Timer8_FUNC_REG:                       equ 0x30   ; Function register
    42  0031                    Timer8_INPUT_REG:                      equ 0x31   ; Input register
    43  0032                    Timer8_OUTPUT_REG:                     equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; Timer8 Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro Timer8_Start_M
    51                             or    reg[Timer8_CONTROL_REG],  Timer8_CONTROL_REG_START_BIT
    52  3C8E                       endm
    53                          
    54                             macro Timer8_Stop_M
    55                             and   reg[Timer8_CONTROL_REG], ~Timer8_CONTROL_REG_START_BIT
    56  3C8E                       endm
    57                          
    58                             macro Timer8_EnableInt_M
    59                             M8C_EnableIntMask Timer8_INT_REG, Timer8_INT_MASK
    60  3C8E                       endm
    61                          
    62                             macro Timer8_DisableInt_M
    63                             M8C_DisableIntMask Timer8_INT_REG, Timer8_INT_MASK
    64  3C8E                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer8.asm
     4                          ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer8 User Module software implementation file
     8                          ;;
     9                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    10                          ;;        arguments and observe the associated "Registers are volatile" policy.
    11                          ;;        This means it is the caller's responsibility to preserve any values
    12                          ;;        in the X and A registers that are still needed after the API functions
    13                          ;;        returns. For Large Memory Model devices it is also the caller's 
    14                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    15                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    16                          ;;        now, there is no guarantee that will remain the case in future releases.
    17                          ;;-----------------------------------------------------------------------------
    18                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    19                          ;;*****************************************************************************
    20                          ;;*****************************************************************************
    21                          
    22                          include "m8c.inc"
    23                          include "memory.inc"
    24                          include "Timer8.inc"
    25                          
    26                          ;-----------------------------------------------
    27                          ;  Global Symbols
    28                          ;-----------------------------------------------
    29                          export  Timer8_EnableInt
    30                          export _Timer8_EnableInt
    31                          export  Timer8_DisableInt
    32                          export _Timer8_DisableInt
    33                          export  Timer8_Start
    34                          export _Timer8_Start
    35                          export  Timer8_Stop
    36                          export _Timer8_Stop
    37                          export  Timer8_WritePeriod
    38                          export _Timer8_WritePeriod
    39                          export  Timer8_WriteCompareValue
    40                          export _Timer8_WriteCompareValue
    41                          export  Timer8_bReadCompareValue
    42                          export _Timer8_bReadCompareValue
    43                          export  Timer8_bReadTimer
    44                          export _Timer8_bReadTimer
    45                          export  Timer8_bReadTimerSaveCV
    46                          export _Timer8_bReadTimerSaveCV
    47                          
    48                          ; The following functions are deprecated and subject to omission in future releases
    49                          ;
    50                          export  bTimer8_ReadCompareValue  ; deprecated
    51                          export _bTimer8_ReadCompareValue  ; deprecated
    52                          export  bTimer8_ReadTimer         ; deprecated
    53                          export _bTimer8_ReadTimer         ; deprecated
    54                          export  bTimer8_ReadTimerSaveCV   ; deprecated
    55                          export _bTimer8_ReadTimerSaveCV   ; deprecated
    56                          
    57                          export  bTimer8_ReadCounter       ; obsolete
    58                          export _bTimer8_ReadCounter       ; obsolete
    59                          export  bTimer8_CaptureCounter    ; obsolete
    60                          export _bTimer8_CaptureCounter    ; obsolete
    61                          
    62                          
    63                          AREA led_display_RAM (RAM,REL)
    64                          
    65                          ;-----------------------------------------------
    66                          ;  Constant Definitions
    67                          ;-----------------------------------------------
    68                          
    69                          
    70                          ;-----------------------------------------------
    71                          ; Variable Allocation
    72                          ;-----------------------------------------------
    73                          
    74                          
    75                          AREA UserModules (ROM, REL)
    76                          
    77                          .SECTION
    78                          ;-----------------------------------------------------------------------------
    79                          ;  FUNCTION NAME: Timer8_EnableInt
    80                          ;
    81                          ;  DESCRIPTION:
    82                          ;     Enables this timer's interrupt by setting the interrupt enable mask bit
    83                          ;     associated with this User Module. This function has no effect until and
    84                          ;     unless the global interrupts are enabled (for example by using the
    85                          ;     macro M8C_EnableGInt).
    86                          ;-----------------------------------------------------------------------------
    87                          ;
    88                          ;  ARGUMENTS:    None.
    89                          ;  RETURNS:      Nothing.
    90                          ;  SIDE EFFECTS: 
    91                          ;    The A and X registers may be modified by this or future implementations
    92                          ;    of this function.  The same is true for all RAM page pointer registers in
    93                          ;    the Large Memory Model.  When necessary, it is the calling function's
    94                          ;    responsibility to perserve their values across calls to fastcall16 
    95                          ;    functions.
    96                          ;
    97  2DE9                     Timer8_EnableInt:
    98  2DE9                    _Timer8_EnableInt:
    99                             RAM_PROLOGUE RAM_USE_CLASS_1
   100  2DE9  43 E1 10             Timer8_EnableInt_M
   101                             RAM_EPILOGUE RAM_USE_CLASS_1
   102  2DEC  7F                   ret
   103                          
   104                          .ENDSECTION
   105                          
   106                          
   107                          .SECTION
   108                          ;-----------------------------------------------------------------------------
   109                          ;  FUNCTION NAME: Timer8_DisableInt
   110                          ;
   111                          ;  DESCRIPTION:
   112                          ;     Disables this timer's interrupt by clearing the interrupt enable
   113                          ;     mask bit associated with this User Module.
   114                          ;-----------------------------------------------------------------------------
   115                          ;
   116                          ;  ARGUMENTS:    None
   117                          ;  RETURNS:      Nothing
   118                          ;  SIDE EFFECTS: 
   119                          ;    The A and X registers may be modified by this or future implementations
   120                          ;    of this function.  The same is true for all RAM page pointer registers in
   121                          ;    the Large Memory Model.  When necessary, it is the calling function's
   122                          ;    responsibility to perserve their values across calls to fastcall16 
   123                          ;    functions.
   124                          ;
   125  2DED                     Timer8_DisableInt:
   126  2DED                    _Timer8_DisableInt:
   127                             RAM_PROLOGUE RAM_USE_CLASS_1
   128  2DED  41 E1 EF             Timer8_DisableInt_M
   129                             RAM_EPILOGUE RAM_USE_CLASS_1
   130  2DF0  7F                   ret
   131                          
   132                          .ENDSECTION
   133                          
   134                          
   135                          .SECTION
   136                          ;-----------------------------------------------------------------------------
   137                          ;  FUNCTION NAME: Timer8_Start
   138                          ;
   139                          ;  DESCRIPTION:
   140                          ;     Sets the start bit in the Control register of this user module.  The
   141                          ;     timer will begin counting on the next input clock.
   142                          ;-----------------------------------------------------------------------------
   143                          ;
   144                          ;  ARGUMENTS:    None
   145                          ;  RETURNS:      Nothing
   146                          ;  SIDE EFFECTS: 
   147                          ;    The A and X registers may be modified by this or future implementations
   148                          ;    of this function.  The same is true for all RAM page pointer registers in
   149                          ;    the Large Memory Model.  When necessary, it is the calling function's
   150                          ;    responsibility to perserve their values across calls to fastcall16 
   151                          ;    functions.
   152                          ;
   153  2DF1                     Timer8_Start:
   154  2DF1                    _Timer8_Start:
   155                             RAM_PROLOGUE RAM_USE_CLASS_1
   156  2DF1  43 33 01             Timer8_Start_M
   157                             RAM_EPILOGUE RAM_USE_CLASS_1
   158  2DF4  7F                   ret
   159                          
   160                          .ENDSECTION
   161                          
   162                          
   163                          .SECTION
   164                          ;-----------------------------------------------------------------------------
   165                          ;  FUNCTION NAME: Timer8_Stop
   166                          ;
   167                          ;  DESCRIPTION:
   168                          ;     Disables timer operation by clearing the start bit in the Control
   169                          ;     register.
   170                          ;-----------------------------------------------------------------------------
   171                          ;
   172                          ;  ARGUMENTS:    None
   173                          ;  RETURNS:      Nothing
   174                          ;  SIDE EFFECTS: 
   175                          ;    The A and X registers may be modified by this or future implementations
   176                          ;    of this function.  The same is true for all RAM page pointer registers in
   177                          ;    the Large Memory Model.  When necessary, it is the calling function's
   178                          ;    responsibility to perserve their values across calls to fastcall16 
   179                          ;    functions.
   180                          ;
   181  2DF5                     Timer8_Stop:
   182  2DF5                    _Timer8_Stop:
   183                             RAM_PROLOGUE RAM_USE_CLASS_1
   184  2DF5  41 33 FE             Timer8_Stop_M
   185                             RAM_EPILOGUE RAM_USE_CLASS_1
   186  2DF8  7F                   ret
   187                          
   188                          .ENDSECTION
   189                          
   190                          
   191                          .SECTION
   192                          ;-----------------------------------------------------------------------------
   193                          ;  FUNCTION NAME: Timer8_WritePeriod
   194                          ;
   195                          ;  DESCRIPTION:
   196                          ;     Write the 8-bit period value into the Period register (DR1). If the
   197                          ;     Timer user module is stopped, then this value will also be latched
   198                          ;     into the Count register (DR0).
   199                          ;-----------------------------------------------------------------------------
   200                          ;
   201                          ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
   202                          ;  RETURNS:   Nothing
   203                          ;  SIDE EFFECTS: 
   204                          ;    The A and X registers may be modified by this or future implementations
   205                          ;    of this function.  The same is true for all RAM page pointer registers in
   206                          ;    the Large Memory Model.  When necessary, it is the calling function's
   207                          ;    responsibility to perserve their values across calls to fastcall16 
   208                          ;    functions.
   209                          ;
   210  2DF9                     Timer8_WritePeriod:
   211  2DF9                    _Timer8_WritePeriod:
   212                             RAM_PROLOGUE RAM_USE_CLASS_1
   213  2DF9  60 31                mov   reg[Timer8_PERIOD_REG], A
   214                             RAM_EPILOGUE RAM_USE_CLASS_1
   215  2DFB  7F                   ret
   216                          
   217                          .ENDSECTION
   218                          
   219                          
   220                          .SECTION
   221                          ;-----------------------------------------------------------------------------
   222                          ;  FUNCTION NAME: Timer8_WriteCompareValue
   223                          ;
   224                          ;  DESCRIPTION:
   225                          ;     Writes compare value into the Compare register (DR2).
   226                          ;
   227                          ;     NOTE! The Timer user module must be STOPPED in order to write the
   228                          ;           Compare register. (Call Timer8_Stop to disable).
   229                          ;-----------------------------------------------------------------------------
   230                          ;
   231                          ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
   232                          ;  RETURNS:      Nothing
   233                          ;  SIDE EFFECTS: 
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240  2DFC                     Timer8_WriteCompareValue:
   241  2DFC                    _Timer8_WriteCompareValue:
   242                             RAM_PROLOGUE RAM_USE_CLASS_1
   243  2DFC  60 32                mov   reg[Timer8_COMPARE_REG], A
   244                             RAM_EPILOGUE RAM_USE_CLASS_1
   245  2DFE  7F                   ret
   246                          
   247                          .ENDSECTION
   248                          
   249                          
   250                          .SECTION
   251                          ;-----------------------------------------------------------------------------
   252                          ;  FUNCTION NAME: Timer8_bReadCompareValue
   253                          ;
   254                          ;  DESCRIPTION:
   255                          ;     Reads the Compare register.
   256                          ;-----------------------------------------------------------------------------
   257                          ;
   258                          ;  ARGUMENTS:    None
   259                          ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
   260                          ;  SIDE EFFECTS: 
   261                          ;    The A and X registers may be modified by this or future implementations
   262                          ;    of this function.  The same is true for all RAM page pointer registers in
   263                          ;    the Large Memory Model.  When necessary, it is the calling function's
   264                          ;    responsibility to perserve their values across calls to fastcall16 
   265                          ;    functions.
   266                          ;
   267  2DFF                     Timer8_bReadCompareValue:
   268  2DFF                    _Timer8_bReadCompareValue:
   269  2DFF                     bTimer8_ReadCompareValue:                       ; this name deprecated
   270  2DFF                    _bTimer8_ReadCompareValue:                       ; this name deprecated
   271                             RAM_PROLOGUE RAM_USE_CLASS_1
   272  2DFF  5D 32                mov   A, reg[Timer8_COMPARE_REG]
   273                             RAM_EPILOGUE RAM_USE_CLASS_1
   274  2E01  7F                   ret
   275                          
   276                          .ENDSECTION
   277                          
   278                          
   279                          .SECTION
   280                          ;-----------------------------------------------------------------------------
   281                          ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
   282                          ;
   283                          ;  DESCRIPTION:
   284                          ;     Returns the value in the Count register (DR0), preserving the
   285                          ;     value in the compare register (DR2).
   286                          ;-----------------------------------------------------------------------------
   287                          ;
   288                          ;  ARGUMENTS: None
   289                          ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
   290                          ;  SIDE EFFECTS:
   291                          ;     1) May cause an interrupt, if interrupt on Compare is enabled.
   292                          ;     2) If enabled, Global interrupts are momentarily disabled.
   293                          ;     3) The user module is stopped momentarily while the compare value is
   294                          ;        restored.  This may cause the Count register to miss one or more
   295                          ;        counts depending on the input clock speed.
   296                          ;     4) The A and X registers may be modified by this or future implementations
   297                          ;        of this function.  The same is true for all RAM page pointer registers in
   298                          ;        the Large Memory Model.  When necessary, it is the calling function's
   299                          ;        responsibility to perserve their values across calls to fastcall16 
   300                          ;        functions.
   301                          ;
   302                          ;  THEORY of OPERATION:
   303                          ;     1) Read and save the Compare register.
   304                          ;     2) Read the Count register, causing its data to be latched into
   305                          ;        the Compare register.
   306                          ;     3) Read and save the Counter value, now in the Compare register,
   307                          ;        to the buffer.
   308                          ;     4) Disable global interrupts
   309                          ;     5) Halt the timer
   310                          ;     6) Restore the Compare register values
   311                          ;     7) Start the Timer again
   312                          ;     8) Restore global interrupt state
   313                          ;
   314  2E02                     Timer8_bReadTimerSaveCV:
   315  2E02                    _Timer8_bReadTimerSaveCV:
   316  2E02                     bTimer8_ReadTimerSaveCV:                        ; this name deprecated
   317  2E02                    _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
   318  2E02                     bTimer8_ReadCounter:                            ; this name deprecated
   319  2E02                    _bTimer8_ReadCounter:                            ; this name deprecated
   320                          
   321  0000                    CpuFlags:      equ   0
   322  0001                    bCount:        equ   1
   323                          
   324  2E02  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   325  2E04  4F                   mov   X, SP                                   ; X <- stack frame pointer
   326  2E05  38 02                add   SP, 2                                   ; Reserve space for flags, count
   327  2E07  5D 33                mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
   328  2E09  08                   push  A
   329  2E0A  5D 32                mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
   330  2E0C  08                   push  A
   331  2E0D  5D 30                mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
   332                                                                           ; This may cause an interrupt!
   333  2E0F  5D 32                mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
   334  2E11  54 01                mov   [X+bCount], A
   335  2E13  50 00                mov   A, 0                                    ; Guess the global interrupt state
   336  2E15  49 F7 01             tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
   337  2E18  A003                 jz    .SetupStatusFlag                        ;   Yes, guess was correct
   338  2E1A  50 01                mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
   339  2E1C                    .SetupStatusFlag:                                ; and ...
   340  2E1C  54 00                mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
   341  2E1E  70 FE                M8C_DisableGInt                               ; Disable interrupts globally
   342  2E20  41 33 FE             Timer8_Stop_M                                 ; Stop the timer
   343  2E23  18                   pop   A                                       ; Restore the Compare register
   344  2E24  60 32                mov   reg[Timer8_COMPARE_REG], A
   345  2E26  18                   pop   A                                       ; restore start state of the timer
   346  2E27  60 33                mov   reg[Timer8_CONTROL_REG], A
   347  2E29  18                   pop   A                                       ; Return result stored in stack frame
   348                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2E2A  70 3F             	and	f, 0x3F
      + 2E2C  71 80             	or	f, 0x80
   349  2E2E  7E                   reti                                          ; Flag Reg <- StackFrame[0]
   350                          
   351                          .ENDSECTION
   352                          
   353                          
   354                          .SECTION
   355                          ;-----------------------------------------------------------------------------
   356                          ;  FUNCTION NAME: Timer8_bReadTimer
   357                          ;
   358                          ;  DESCRIPTION:
   359                          ;     Performs a software capture of the Count register.  A synchronous
   360                          ;     read of the Count register is performed.  The timer is NOT stopped.
   361                          ;
   362                          ;     WARNING - this will cause loss of data in the Compare register.
   363                          ;-----------------------------------------------------------------------------
   364                          ;
   365                          ;  ARGUMENTS:    None
   366                          ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
   367                          ;  SIDE EFFECTS:
   368                          ;    May cause an interrupt.
   369                          ;
   370                          ;    The A and X registers may be modified by this or future implementations
   371                          ;    of this function.  The same is true for all RAM page pointer registers in
   372                          ;    the Large Memory Model.  When necessary, it is the calling function's
   373                          ;    responsibility to perserve their values across calls to fastcall16 
   374                          ;    functions.
   375                          ;
   376                          ;  THEORY of OPERATION:
   377                          ;     1) Read the Count register - this causes the count value to be
   378                          ;        latched into the Compare register.
   379                          ;     2) Read and return the Count register values from the Compare
   380                          ;        registers into the return buffer.
   381                          ;
   382  2E2F                     Timer8_bReadTimer:
   383  2E2F                    _Timer8_bReadTimer:
   384  2E2F                     bTimer8_ReadTimer:                              ; this name deprecated
   385  2E2F                    _bTimer8_ReadTimer:                              ; this name deprecated
   386  2E2F                     bTimer8_CaptureCounter:                         ; this name deprecated
   387  2E2F                    _bTimer8_CaptureCounter:                         ; this name deprecated
   388                          
   389                             RAM_PROLOGUE RAM_USE_CLASS_1
   390  2E2F  5D 30                mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
   391                                                                           ; This may cause an interrupt!
   392  2E31  5D 32                mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
   393                             RAM_EPILOGUE RAM_USE_CLASS_1
   394  2E33  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:48 2015
          Timer8_CONTROL_REG 0033       bTimer8_ReadTimerSaveCV 2E02      Timer8_bReadCompareValue 2DFF  
          _Timer8_bReadTimer 2E2F                   Timer8_Stop 2DF5            Timer8_COUNTER_REG 0030  
   _Timer8_WriteCompareValue 2DFC                  Timer8_Start 2DF1                         CPU_F 00F7  
            Timer8_EnableInt 2DE9                  _Timer8_Stop 2DF5                Timer8_INT_REG 00E1  
          Timer8_WritePeriod 2DF9             _Timer8_EnableInt 2DE9      _bTimer8_ReadTimerSaveCV 2E02  
                      HITECH 0002        bTimer8_CaptureCounter 2E2F               FLAG_PGMODE_01b 0040  
             FLAG_PGMODE_10b 0080       Timer8_bReadTimerSaveCV 2E02  Timer8_CONTROL_REG_START_BIT 0001  
                      bCount 0001             Timer8_DisableInt 2DED                      CpuFlags 0000  
               _Timer8_Start 2DF1       _bTimer8_CaptureCounter 2E2F      bTimer8_ReadCompareValue 2DFF  
             Timer8_INT_MASK 0010          _bTimer8_ReadCounter 2E02     SYSTEM_LARGE_MEMORY_MODEL 0001  
              FLAG_GLOBAL_IE 0001     _Timer8_bReadCompareValue 2DFF            _Timer8_DisableInt 2DED  
                   TOOLCHAIN 0002      _Timer8_bReadTimerSaveCV 2E02      Timer8_WriteCompareValue 2DFC  
         _Timer8_WritePeriod 2DF9              FLAG_PGMODE_MASK 00C0               RAM_USE_CLASS_1 0001  
             RAM_USE_CLASS_2 0002               RAM_USE_CLASS_3 0004               RAM_USE_CLASS_4 0008  
           bTimer8_ReadTimer 2E2F           bTimer8_ReadCounter 2E02             Timer8_PERIOD_REG 0031  
           Timer8_bReadTimer 2E2F            _bTimer8_ReadTimer 2E2F            Timer8_COMPARE_REG 0032  
   _bTimer8_ReadCompareValue 2DFF    SYSTEM_IDXPG_TRACKS_IDX_PP 0001    SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:49 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 0000'                   
      + 0000'                   ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  0000'                      endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  0000'                      endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  0000'                      endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  0000'                      endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  0000'                      endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  0000'                      endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  0000'                      endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  0000'                      endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  0000'                      endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  0000'                      endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  0000'                      endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  0000'                      endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  0000'                      endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  0000'                      endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  0000'                      endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  0000'                      endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 0000'                   
      + 0000'                   ; end of file Memory.inc
      + 0000'                   ;;*****************************************************************************
;;******************
      +                         ***********************************************************
;;  FILENAME: Timer8.inc
;;   Version: 2
      +                         .70, Updated on 2013/5/19 at 10:44:42
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: As
      +                         sembler declarations for the Timer8 user module interface
;;----------------------------------------
      +                         -------------------------------------
;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reser
      +                         ved.
;;*****************************************************************************
;;*************
      +                         ****************************************************************
   824                          
   825                          ; end of file m8c.inc
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  0000'                       endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  0000'                       endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  0000'                       endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  0000'                       endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  0000'                       endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  0000'                       endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  0000'                       endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  0000'                       endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  0000'                       endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  0000'                       endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  0000'                       endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  0000'                       endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  0000'                       endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  0000'                       endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  0000'                       endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer8.inc
     4                          ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Assembler declarations for the Timer8 user module interface
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          
    15                          
    16                          ;--------------------------------------------------
    17                          ; Constants for Timer8 API's.
    18                          ;--------------------------------------------------
    19                          
    20  0001                    Timer8_CONTROL_REG_START_BIT:              equ 0x01    ; Control register start bit
    21  00E1                    Timer8_INT_REG:                            equ 0x0e1
    22  0010                    Timer8_INT_MASK:                           equ 0x10
    23                          
    24                          
    25                          ;--------------------------------------------------
    26                          ; Constants for Timer8 user defined values
    27                          ;--------------------------------------------------
    28                          
    29  009F                    Timer8_PERIOD:                             equ 0x9f
    30  0050                    Timer8_COMPARE_VALUE:                      equ 0x50
    31                          
    32                          
    33                          ;--------------------------------------------------
    34                          ; Register Address Constants for Timer8
    35                          ;--------------------------------------------------
    36                          
    37  0030                    Timer8_COUNTER_REG:                    equ 0x30   ; DR0 Counter register
    38  0031                    Timer8_PERIOD_REG:                     equ 0x31   ; DR1 Period register
    39  0032                    Timer8_COMPARE_REG:                    equ 0x32   ; DR2 CompareValue register
    40  0033                    Timer8_CONTROL_REG:                    equ 0x33   ; Control register
    41  0030                    Timer8_FUNC_REG:                       equ 0x30   ; Function register
    42  0031                    Timer8_INPUT_REG:                      equ 0x31   ; Input register
    43  0032                    Timer8_OUTPUT_REG:                     equ 0x32   ; Output register
    44                          
    45                          
    46                          ;--------------------------------------------------
    47                          ; Timer8 Macro 'Functions'
    48                          ;--------------------------------------------------
    49                          
    50                             macro Timer8_Start_M
    51                             or    reg[Timer8_CONTROL_REG],  Timer8_CONTROL_REG_START_BIT
    52  0000'                      endm
    53                          
    54                             macro Timer8_Stop_M
    55                             and   reg[Timer8_CONTROL_REG], ~Timer8_CONTROL_REG_START_BIT
    56  0000'                      endm
    57                          
    58                             macro Timer8_EnableInt_M
    59                             M8C_EnableIntMask Timer8_INT_REG, Timer8_INT_MASK
    60  0000'                      endm
    61                          
    62                             macro Timer8_DisableInt_M
    63                             M8C_DisableIntMask Timer8_INT_REG, Timer8_INT_MASK
    64  0000'                      endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME: Timer8INT.asm
     4                          ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION: Timer8 Interrupt Service Routine
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          include "m8c.inc"
    14                          include "memory.inc"
    15                          include "Timer8.inc"
    16                          
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _Timer8_ISR
    22                          
    23                          
    24                          AREA InterruptRAM (RAM,REL,CON)
    25                          
    26                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    27                          ;---------------------------------------------------
    28                          ; Insert your custom declarations below this banner
    29                          ;---------------------------------------------------
    30                          
    31                          ;------------------------
    32                          ; Includes
    33                          ;------------------------
    34                          
    35                          	
    36                          ;------------------------
    37                          ;  Constant Definitions
    38                          ;------------------------
    39                          
    40                          
    41                          ;------------------------
    42                          ; Variable Allocation
    43                          ;------------------------
    44                          
    45                          
    46                          ;---------------------------------------------------
    47                          ; Insert your custom declarations above this banner
    48                          ;---------------------------------------------------
    49                          ;@PSoC_UserCode_END@ (Do not change this line.)
    50                          
    51                          
    52                          AREA UserModules (ROM, REL)
    53                          
    54                          ;-----------------------------------------------------------------------------
    55                          ;  FUNCTION NAME: _Timer8_ISR
    56                          ;
    57                          ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
    58                          ;
    59                          ;-----------------------------------------------------------------------------
    60                          ;
    61                          
    62  0000'                   _Timer8_ISR:
    63                          
    64                             ;@PSoC_UserCode_BODY@ (Do not change this line.)
    65                             ;---------------------------------------------------
    66                             ; Insert your custom assembly code below this banner
    67                             ;---------------------------------------------------
    68                             ;   NOTE: interrupt service routines must preserve
    69                             ;   the values of the A and X CPU registers.
    70                             
    71                             ;---------------------------------------------------
    72                             ; Insert your custom assembly code above this banner
    73                             ;---------------------------------------------------
    74                             
    75                             ;---------------------------------------------------
    76                             ; Insert a lcall to a C function below this banner
    77                             ; and un-comment the lines between these banners
    78                             ;---------------------------------------------------
    79                             
    80                             ;PRESERVE_CPU_CONTEXT
    81                             ;lcall _My_C_Function
    82                             ;RESTORE_CPU_CONTEXT
    83                             
    84                             ;---------------------------------------------------
    85                             ; Insert a lcall to a C function above this banner
    86                             ; and un-comment the lines between these banners
    87                             ;---------------------------------------------------
    88                             ;@PSoC_UserCode_END@ (Do not change this line.)
    89                          
    90  0000' 7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:49 2015
                 _Timer8_ISR 0000                        HITECH 0002                     TOOLCHAIN 0002  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:49 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130  003E                    UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Board.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Board.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Board_SetTxIntMode
    41                          export _UART_Board_SetTxIntMode
    42                          export  UART_Board_EnableInt
    43                          export _UART_Board_EnableInt
    44                          export  UART_Board_DisableInt
    45                          export _UART_Board_DisableInt
    46                          
    47                          export  UART_Board_Start
    48                          export _UART_Board_Start
    49                          export  UART_Board_Stop
    50                          export _UART_Board_Stop
    51                          export  UART_Board_SendData
    52                          export _UART_Board_SendData
    53                          export  UART_Board_bReadTxStatus
    54                          export _UART_Board_bReadTxStatus
    55                          export  UART_Board_bReadRxData
    56                          export _UART_Board_bReadRxData
    57                          export  UART_Board_bReadRxStatus
    58                          export _UART_Board_bReadRxStatus
    59                          
    60                          export  UART_Board_IntCntl
    61                          export _UART_Board_IntCntl
    62                          
    63                          export  UART_Board_TxIntMode
    64                          export _UART_Board_TxIntMode
    65                          
    66                          export  UART_Board_PutSHexByte
    67                          export _UART_Board_PutSHexByte
    68                          export  UART_Board_PutSHexInt
    69                          export _UART_Board_PutSHexInt
    70                          
    71                          export  UART_Board_CPutString
    72                          export _UART_Board_CPutString
    73                          export  UART_Board_PutString
    74                          export _UART_Board_PutString
    75                          export  UART_Board_PutChar
    76                          export _UART_Board_PutChar
    77                          export  UART_Board_Write
    78                          export _UART_Board_Write
    79                          export  UART_Board_CWrite
    80                          export _UART_Board_CWrite
    81                          
    82                          export  UART_Board_cGetChar
    83                          export _UART_Board_cGetChar
    84                          export  UART_Board_cReadChar
    85                          export _UART_Board_cReadChar
    86                          export  UART_Board_iReadChar
    87                          export _UART_Board_iReadChar
    88                          export  UART_Board_PutCRLF
    89                          export _UART_Board_PutCRLF
    90                          
    91                          IF (UART_Board_RXBUF_ENABLE)
    92                          export  UART_Board_CmdReset
    93                          export _UART_Board_CmdReset
    94                          export  UART_Board_bCmdCheck
    95                          export _UART_Board_bCmdCheck
    96                          export  UART_Board_bCmdLength
    97                          export _UART_Board_bCmdLength
    98                          export  UART_Board_bErrCheck
    99                          export _UART_Board_bErrCheck
   100                          
   101                          export  UART_Board_szGetParam
   102                          export _UART_Board_szGetParam
   103                          export  UART_Board_szGetRestOfParams
   104                          export _UART_Board_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Board_ReadTxStatus
   114                          export _bUART_Board_ReadTxStatus
   115                          export  bUART_Board_ReadRxData
   116                          export _bUART_Board_ReadRxData
   117                          export  bUART_Board_ReadRxStatus
   118                          export _bUART_Board_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Board_RXBUF_ENABLE)
   128                              
   129                          area UART_Board_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Board_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2E34                     UART_Board_EnableInt:
   177  2E34                    _UART_Board_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2E34  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   180  2E37  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2E3A  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Board_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2E3B                     UART_Board_DisableInt:
   209  2E3B                    _UART_Board_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2E3B  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   212  2E3E  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2E41  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Board_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2E42                     UART_Board_SetTxIntMode:
   245  2E42                    _UART_Board_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2E42  71 10                M8C_SetBank1
   248  2E44  21 01                and   A, UART_Board_INT_MODE_TX_COMPLETE
   249  2E46  A007                 jz    .SetModeRegEmpty
   250  2E48  43 38 10             or    REG[UART_Board_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2E4B  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2E4D  7F                   ret
   254                          
   255  2E4E                    .SetModeRegEmpty:
   256  2E4E  41 38 EF             and   REG[UART_Board_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2E51  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2E53  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Board_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2E54                     UART_Board_Start:
   286  2E54                    _UART_Board_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2E54  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2E56  60 3B                mov   REG[UART_Board_TX_CONTROL_REG], A
   292  2E58  60 3F                mov   REG[UART_Board_RX_CONTROL_REG], A
   293                          IF ( UART_Board_RXBUF_ENABLE )
   294                             call  _UART_Board_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2E5A  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Board_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2E5B                     UART_Board_Stop:
   323  2E5B                    _UART_Board_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2E5B  41 3B FE             and   REG[UART_Board_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2E5E  41 3F FE             and   REG[UART_Board_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2E61  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Board_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2E62                     UART_Board_SendData:
   354  2E62                    _UART_Board_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2E62  60 39                mov REG[UART_Board_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2E64  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Board_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2E65                     UART_Board_bReadTxStatus:
   385  2E65                    _UART_Board_bReadTxStatus:
   386  2E65                     bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   387  2E65                    _bUART_Board_ReadTxStatus:                       ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2E65  5D 3B                mov A,  REG[UART_Board_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2E67  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Board_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2E68                     UART_Board_bReadRxData:
   418  2E68                    _UART_Board_bReadRxData:
   419  2E68                     bUART_Board_ReadRxData:                         ; For backwards compatibility only
   420  2E68                    _bUART_Board_ReadRxData:                         ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2E68  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2E6A  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Board_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2E6B                     UART_Board_bReadRxStatus:
   452  2E6B                    _UART_Board_bReadRxStatus:
   453  2E6B                     bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   454  2E6B                    _bUART_Board_ReadRxStatus:                       ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2E6B  5D 3F                mov A,  REG[UART_Board_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2E6D  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Board_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2E6E                     UART_Board_TxIntMode:
   486  2E6E                    _UART_Board_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2E6E  21 01                and  A,UART_Board_INT_MODE_TX_COMPLETE
   490  2E70  71 10                M8C_SetBank1
   491  2E72  39 01                cmp  A,UART_Board_INT_MODE_TX_COMPLETE
   492  2E74  A006                 jz   .SetTxCmpMode
   493                          
   494  2E76  41 38 EF             and  reg[UART_Board_TX_FUNC_REG],0xEF         ; Set Interrupt on Tx_Reg_Empty
   495  2E79  8004                 jmp  .TxIntMode_End
   496                          
   497  2E7B                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2E7B  43 38 10             or   reg[UART_Board_TX_FUNC_REG],0x10
   499                          
   500  2E7E                    .TxIntMode_End:
   501  2E7E  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2E80  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Board_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2E81                     UART_Board_IntCntl:
   533  2E81                    _UART_Board_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2E81  08                   push A
   537  2E82  21 01                and  A,UART_Board_ENABLE_RX_INT
   538  2E84  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2E86  43 E1 80             M8C_EnableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   541  2E89  8004                 jmp  .CheckTxInt
   542  2E8B                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2E8B  41 E1 7F             M8C_DisableIntMask UART_Board_RX_INT_REG, UART_Board_RX_INT_MASK
   545                          
   546  2E8E                    .CheckTxInt:
   547  2E8E  18                   pop  A
   548  2E8F  21 02                and  A,UART_Board_ENABLE_TX_INT
   549  2E91  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2E93  43 E1 40             M8C_EnableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   552  2E96  8004                 jmp  .End_IntCntl
   553  2E98                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2E98  41 E1 BF             M8C_DisableIntMask UART_Board_TX_INT_REG, UART_Board_TX_INT_MASK
   556                          
   557  2E9B                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2E9B  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Board_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2E9C                    UART_Board_HEX_STR:
   594  2E9C  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2EAC                     UART_Board_PutSHexByte:
   599  2EAC                    _UART_Board_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2EAC  08                   push  A                             ; Save lower nibble
   602  2EAD  67                   asr   A                             ; Shift high nibble to right
   603  2EAE  67                   asr   A
   604  2EAF  67                   asr   A
   605  2EB0  67                   asr   A
   606  2EB1  21 0F                and   A,0Fh                         ; Mask off nibble
   607  2EB3  FFE7                 index UART_Board_HEX_STR            ; Get Hex value
   608  2EB5  900F                 call  UART_Board_PutChar            ; Write data to screen
   609  2EB7  18                   pop   A                             ; Restore value
   610  2EB8  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  2EBA  FFE0                 index UART_Board_HEX_STR            ; Get Hex value
   612  2EBC  9008                 call  UART_Board_PutChar            ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  2EBE  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Board_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  2EBF                     UART_Board_PutSHexInt:
   643  2EBF                    _UART_Board_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  2EBF  4B                   swap  A,X
   646  2EC0  9FEA                 call  UART_Board_PutSHexByte        ; Print MSB
   647  2EC2  5B                   mov   A,X                           ; Move LSB into position
   648  2EC3  9FE7                 call  UART_Board_PutSHexByte        ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  2EC5  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Board_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Board_TX_CONTROL_REG], UART_Board_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Board_TX_BUFFER_REG], @Source    ; Write data to Tx Port
   681  2EC6                       endm
   682                          
   683  2EC6                     UART_Board_PutChar:
   684  2EC6                    _UART_Board_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 2EC6                    ; Nothing to do
??0000:
      + 2EC6  49 3B 10          	tst	reg[59], 16
      + 2EC9  AFFC              	jz	??0000
      + 2ECB  60 39             	mov	reg[57], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  2ECD  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Board_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  2ECE                     UART_Board_cGetChar:
   718  2ECE                    _UART_Board_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  2ECE  49 3F 08             tst REG[UART_Board_RX_CONTROL_REG],UART_Board_RX_REG_FULL    ; Check if a character is ready
   721  2ED1  AFFC                 jz  UART_Board_cGetChar                              ; If not loop
   722  2ED3  5D 3E                mov A, REG[UART_Board_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  2ED5  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Board_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  2ED6                     UART_Board_cReadChar:
   753  2ED6                    _UART_Board_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  2ED6  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   756  2ED8  08                   push A
   757  2ED9  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   758  2EDB  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  2EDD  18                   pop  A
   760  2EDE  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  2EE0                    .RX_DATA_RDY:
   763  2EE0  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]          
   764  2EE2  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  2EE3  18                   pop  A                                                  ; Check for errors
   767  2EE4  21 A0                and  A,(UART_Board_RX_PARITY_ERROR | UART_Board_RX_FRAMING_ERROR)
   768  2EE6  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  2EE8  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  2EE9  7F                   ret
   772                          
   773  2EEA                    .RX_NO_VALID_CHAR:
   774  2EEA  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  2EEC                     End_UART_Board_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  2EEC  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Board_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  2EED                     UART_Board_iReadChar:
   814  2EED                    _UART_Board_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  2EED  5D 3F                mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  2EEF  21 E8                and  A,(UART_Board_RX_ERROR|UART_Board_RX_REG_FULL)
   819  2EF1  08                   push A
   820  2EF2  21 08                and  A,UART_Board_RX_COMPLETE                           ; Check if a character is ready
   821  2EF4  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  2EF6  18                   pop  A
   823  2EF7  29 01                or   A,UART_Board_RX_NO_DATA                            ; Add no data flag
   824  2EF9  4B                   swap A,X
   825  2EFA  8007                 jmp  End_UART_Board_iReadChar
   826                          
   827  2EFC                    .RX_GET_DATA:
   828  2EFC  18                   pop  A
   829  2EFD  21 E0                and  A,UART_Board_RX_ERROR
   830  2EFF  4B                   swap A,X
   831  2F00  5D 3E                mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  2F02                     End_UART_Board_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  2F02  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Board_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  2F03                     UART_Board_PutString:
   867  2F03                    _UART_Board_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  2F03  60 D3                RAM_SETPAGE_IDX A
   870  2F05                    .PutStringLoop:
   871  2F05  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  2F07  A006                 jz    End_PutString                           ; Check for end of string
   873  2F09  9FBB                 call  UART_Board_PutChar                      ; Send character to Tx port
   874  2F0B  75                   inc   X                                       ; Advance pointer to next character
   875  2F0C  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  2F0E                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2F0E  70 3F             	and	f, 0x3F
      + 2F10  71 80             	or	f, 0x80
   879  2F12  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Board_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  2F13                     UART_Board_Write:
   914  2F13                    _UART_Board_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  2F13  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  2F16  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  2F17                    .NextByteLoop:
   920  2F17  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  2F19  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  2F1B  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  2F1D  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  2F1F  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  2F21  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  2F23  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 2F25                    ??0001:
      + 2F25  49 3B 10          	tst	reg[59], 16
      + 2F28  AFFC              	jz	??0001
      + 2F2A  60 39             	mov	reg[57], a
   932  2F2C  4F                   mov   X, SP                                   ; Recover frame pointer
   933  2F2D  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  2F30  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  2F32  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  2F34                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 2F34  70 3F             	and	f, 0x3F
      + 2F36  71 80             	or	f, 0x80
   939  2F38  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Board_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  2F39                     UART_Board_CWrite:
   975  2F39                    _UART_Board_CWrite:
   976  2F39  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  2F3B  4F                   mov   X,SP
   978  2F3C                    .CW_Loop:
   979  2F3C  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  2F3F  B006                 jnz   .CW_WRITEIT
   981  2F41  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  2F44  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  2F46                    .CW_WRITEIT:                                
   985  2F46  10                   push  X                                  ; Save frame pointer
   986  2F47  52 FC                mov   A,[X+CSTR_MSB]
   987  2F49  59 FD                mov   X,[X+CSTR_LSB]
   988  2F4B  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 2F4C                    ??0002:
      + 2F4C  49 3B 10          	tst	reg[59], 16
      + 2F4F  AFFC              	jz	??0002
      + 2F51  60 39             	mov	reg[57], a
   990  2F53  20                   pop   X                                  ; Restore frame pointer
   991  2F54  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  2F57  0F FC 00             adc   [X+CSTR_MSB],0
   993  2F5A  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  2F5D  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  2F60  8FDB                 jmp   .CW_Loop
   996                          
   997  2F62                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 2F62  70 3F             	and	f, 0x3F
      + 2F64  71 80             	or	f, 0x80
   999  2F66  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Board_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  2F67                     UART_Board_CPutString:
  1027  2F67                    _UART_Board_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  2F67  08                   push  A                                       ; Store ROM pointer
  1030  2F68  10                   push  X
  1031  2F69  28                   romx                                          ; Get character from ROM
  1032  2F6A  A00B                 jz    .End_CPutString
  1033  2F6C  9F58                 call  UART_Board_PutChar                      ; Print character
  1034  2F6E  20                   pop   X
  1035  2F6F  18                   pop   A
  1036  2F70  75                   inc   X                                       ; Inc LSB of pointer
  1037  2F71  DFF5                 jnc   UART_Board_CPutString                   ; Check for carry
  1038  2F73  74                   inc   A                                       ; Inc MSB of pointer
  1039  2F74  8FF2                 jmp   UART_Board_CPutString
  1040                          
  1041                          
  1042  2F76                    .End_CPutString:
  1043  2F76  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  2F78  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Board_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  2F79                     UART_Board_PutCRLF:
  1071  2F79                    _UART_Board_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  2F79  50 0D                mov  A,0x0D                        ; Send CR
  1074  2F7B  9F49                 call UART_Board_PutChar
  1075  2F7D  50 0A                mov  A,0x0A                        ; Send LF
  1076  2F7F  9F45                 call UART_Board_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  2F81  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:49 2015
            _UART_Board_SendData 2E62         UART_Board_TX_CONTROL_REG 003B              _UART_Board_cGetChar 2ECE  
          UART_Board_RX_INT_MASK 0080        UART_Board_TX_BUFFER_EMPTY 0010            UART_Board_RX_REG_FULL 0008  
              UART_Board_IntCntl 2E81        UART_Board_RX_PARITY_ERROR 0080             _UART_Board_cReadChar 2ED6  
           _UART_Board_TxIntMode 2E6E               UART_Board_RX_ERROR 00E0                UART_Board_PutCRLF 2F79  
                        CLEN_LSB FFFFFFFB                          CLEN_MSB FFFFFFFA          End_UART_Board_cReadChar 2EEC  
              UART_Board_PutChar 2EC6            bUART_Board_ReadRxData 2E68             _UART_Board_PutString 2F03  
           UART_Board_PutSHexInt 2EBF            UART_Board_TX_FUNC_REG 0038         _bUART_Board_ReadRxStatus 2E6B  
          UART_Board_TX_INT_MASK 0040                  _UART_Board_Stop 2E5B         _bUART_Board_ReadTxStatus 2E65  
                        CSTR_LSB FFFFFFFD                          CSTR_MSB FFFFFFFC           bfCONTROL_REG_START_BIT 0001  
           _UART_Board_iReadChar 2EED            _UART_Board_PutSHexInt 2EBF                            ??0000 2EC6  
                          ??0001 2F25                            ??0002 2F4C          End_UART_Board_iReadChar 2F02  
        UART_Board_bReadRxStatus 2E6B                     End_PutString 2F0E               UART_Board_SendData 2E62  
             UART_Board_cGetChar 2ECE          UART_Board_bReadTxStatus 2E65   UART_Board_INT_MODE_TX_COMPLETE 0001  
         _bUART_Board_ReadRxData 2E68                  UART_Board_Start 2E54                  UART_Board_Write 2F13  
                          HITECH 0002            UART_Board_bReadRxData 2E68                   FLAG_PGMODE_01b 0040  
                 FLAG_PGMODE_10b 0080                            IDX_PP 00D3           UART_Board_SetTxIntMode 2E42  
         UART_Board_RXBUF_ENABLE 0000            UART_Board_PutSHexByte 2EAC              UART_Board_EnableInt 2E34  
           UART_Board_CPutString 2F67          UART_Board_ENABLE_RX_INT 0001          UART_Board_ENABLE_TX_INT 0002  
               _UART_Board_Start 2E54                 _UART_Board_Write 2F13            _UART_Board_CPutString 2F67  
         _UART_Board_bReadRxData 2E68          UART_Board_TX_BUFFER_REG 0039           _UART_Board_PutSHexByte 2EAC  
             _UART_Board_IntCntl 2E81         SYSTEM_LARGE_MEMORY_MODEL 0001               _UART_Board_PutCRLF 2F79  
               UART_Board_CWrite 2F39               _UART_Board_PutChar 2EC6             UART_Board_RX_INT_REG 00E1  
          SYSTEM_MULTIPAGE_STACK 0000             UART_Board_RX_NO_DATA 0001          _UART_Board_SetTxIntMode 2E42  
     UART_Board_RX_FRAMING_ERROR 0020                         TOOLCHAIN 0002              UART_Board_cReadChar 2ED6  
            UART_Board_TxIntMode 2E6E                           CNT_LEN FFFFFFFB             UART_Board_TX_INT_REG 00E1  
                FLAG_PGMODE_MASK 00C0              UART_Board_PutString 2F03                   RAM_USE_CLASS_1 0001  
                 RAM_USE_CLASS_2 0002                   RAM_USE_CLASS_3 0004                   RAM_USE_CLASS_4 0008  
                 UART_Board_Stop 2E5B                           STR_LSB FFFFFFFD                           STR_MSB FFFFFFFC  
            UART_Board_iReadChar 2EED             UART_Board_DisableInt 2E3B          bUART_Board_ReadRxStatus 2E6B  
  bfFUNCTION_REG_TX_INT_MODE_BIT 0010          bUART_Board_ReadTxStatus 2E65                _UART_Board_CWrite 2F39  
       _UART_Board_bReadRxStatus 2E6B            _UART_Board_DisableInt 2E3B         _UART_Board_bReadTxStatus 2E65  
           _UART_Board_EnableInt 2E34                 SYSTEM_STACK_PAGE 0003                     FLAG_XIO_MASK 0010  
        UART_Board_RX_BUFFER_REG 003E        SYSTEM_IDXPG_TRACKS_IDX_PP 0001        SYSTEM_IDXPG_TRACKS_STK_PP 0000  
          UART_Board_RX_COMPLETE 0008                UART_Board_HEX_STR 2E9C         UART_Board_RX_CONTROL_REG 003F  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:49 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Board.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Board API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0040                    UART_Board_TX_INT_MASK:                      equ 0x40
    19  00E1                    UART_Board_TX_INT_REG:                       equ 0x0e1  ;TX interrupt address
    20  0080                    UART_Board_RX_INT_MASK:                      equ 0x80  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Board_RX_INT_REG:                       equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Board_RXBUF_ENABLE:                     equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Board_ENABLE_RX_INT:                    equ 0x01
    27  0000                    UART_Board_DISABLE_RX_INT:                   equ 0x00
    28  0002                    UART_Board_ENABLE_TX_INT:                    equ 0x02
    29  0000                    UART_Board_DISABLE_TX_INT:                   equ 0x00
    30                          
    31  0000                    UART_Board_INT_MODE_TX_REG_EMPTY:            equ 0x00
    32  0001                    UART_Board_INT_MODE_TX_COMPLETE:             equ 0x01
    33                          
    34  0020                    UART_Board_RX_IGNORE_BELOW:                  equ 0x20
    35  0010                    UART_Board_RX_BUFFER_SIZE:                   equ 0x10
    36  000D                    UART_Board_CMD_TERM:                         equ 0xd
    37  0020                    UART_Board_DELIMITER:                        equ 0x20
    38  0000                    UART_Board_BACKSPACE_ENABLE:                 equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Board_PARITY_NONE:                 equ   00h
    79  0002                    UART_Board_PARITY_EVEN:                 equ   02h
    80  0006                    UART_Board_PARITY_ODD:                  equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Board_TX_COMPLETE:                 equ   20h
    86  0010                    UART_Board_TX_BUFFER_EMPTY:             equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Board_RX_ACTIVE:                   equ   10h
    92  0008                    UART_Board_RX_COMPLETE:                 equ   08h
    93  0008                    UART_Board_RX_REG_FULL:                 equ   08h
    94  0080                    UART_Board_RX_PARITY_ERROR:             equ   80h
    95  0040                    UART_Board_RX_OVERRUN_ERROR:            equ   40h
    96  0020                    UART_Board_RX_FRAMING_ERROR:            equ   20h
    97  00E0                    UART_Board_RX_ERROR:                    equ   E0h
    98  0001                    UART_Board_RX_ENABLE:                   equ   01h
    99                          
   100  00F0                    UART_Board_RX_BUF_ERROR:                equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Board_RX_BUF_OVERRUN:              equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Board_RX_BUF_CMDTERM:              equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Board_RX_NO_DATA:                  equ   01h
   106  00E0                    UART_Board_RX_NO_ERROR:                 equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Board
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  003B                    UART_Board_TX_CONTROL_REG:  equ 3bh            ; Control register
   116  0038                    UART_Board_TX_SHIFT_REG:    equ 38h               ; TX Shift Register register
   117  0039                    UART_Board_TX_BUFFER_REG:   equ 39h               ; TX Buffer Register
   118  0038                    UART_Board_TX_FUNC_REG: equ 38h         ; Function register
   119  0039                    UART_Board_TX_INPUT_REG:    equ 39h            ; Input register
   120  003A                    UART_Board_TX_OUTPUT_REG:   equ 3ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  003F                    UART_Board_RX_CONTROL_REG:  equ 3fh            ; Control register
   126  003C                    UART_Board_RX_SHIFT_REG:    equ 3ch               ; RX Shift Register register
   127  003E                    UART_Board_RX_BUFFER_REG:   equ 3eh               ; RX Buffer Register
   128  003C                    UART_Board_RX_FUNC_REG: equ 3ch         ; Function register
   129  003D                    UART_Board_RX_INPUT_REG:    equ 3dh            ; Input register
   130                          UART_Board_RX_OUTPUT_REG:   equ 3eh           ; Output register
      + 003E                    UART_Board_RX_OUTPUT_REG	equ	62
      + 3C8E                    ; end of file UART_Board.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169+ 0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170+ 0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_BoardINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Board.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Board_TX_ISR
    22                          export  _UART_Board_RX_ISR
    23                          
    24                          IF (UART_Board_RXBUF_ENABLE)
    25                          export  UART_Board_aRxBuffer
    26                          export _UART_Board_aRxBuffer
    27                          export  UART_Board_bRxCnt
    28                          export _UART_Board_bRxCnt
    29                          export  UART_Board_fStatus
    30                          export _UART_Board_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Board_RXBUF_ENABLE)
    40                           UART_Board_fStatus:
    41                          _UART_Board_fStatus:      BLK  1
    42                           UART_Board_bRxCnt:
    43                          _UART_Board_bRxCnt:       BLK  1
    44                          AREA UART_Board_RAM (RAM, REL, CON)
    45                           UART_Board_aRxBuffer:
    46                          _UART_Board_aRxBuffer:    BLK UART_Board_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Board_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Board.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  2F82                    _UART_Board_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  2F82  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Board_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Board.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  2F83                    _UART_Board_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Board_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Board_bRxCnt]                              ; Load X with byte counter
   188                             mov  A,REG[UART_Board_RX_CONTROL_REG]                   ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Board_RX_REG_FULL                           ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Board_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Board_fStatus],A                             ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Board_RX_BUFFER_REG], 0x00                ; Read the data buffer to clear it.
   205                             and  A,UART_Board_RX_FRAMING_ERROR                      ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Board_RX_CONTROL_REG], ~UART_Board_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Board_RX_CONTROL_REG],  UART_Board_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Board_RX_BUFFER_REG ]                   ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Board_CMD_TERM                              ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Board_fStatus],UART_Board_RX_BUF_CMDTERM     ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Board_BACKSPACE_ENABLE)                            ; Enable if backspace/delete mode
   236                             cmp  A,UART_Board_BACKSPACE_ENABLE                      ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Board_bRxCnt],00h                            ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Board_bRxCnt]                                ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Board_RX_IGNORE_BELOW)                             ; Ignore charaters below this value
   246                             cmp  A,UART_Board_RX_IGNORE_BELOW                       ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Board_aRxBuffer                   ;   using idexed address mode
   253                             cmp  [UART_Board_bRxCnt],(UART_Board_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Board_aRxBuffer],00h                     ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Board_fStatus],UART_Board_RX_BUF_OVERRUN     ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Board_aRxBuffer],A                         ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Board_bRxCnt],X                              ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  2F83                    UART_Board_RX_ISR_END:
   281  2F83  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:49 2015
                          HITECH 0002           UART_Board_RXBUF_ENABLE 0000             UART_Board_RX_ISR_END 2F83  
                       TOOLCHAIN 0002                _UART_Board_RX_ISR 2F83                _UART_Board_TX_ISR 2F82  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:49 2015
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130  002E                    UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  Filename:   UART_Sensor.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART User Module software implementation file for the
     8                          ;;                22/24/25/26/27xxx families.
     9                          ;;
    10                          ;;
    11                          ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
    12                          ;;        arguments and observe the associated "Registers are volatile" policy.
    13                          ;;        This means it is the caller's responsibility to preserve any values
    14                          ;;        in the X and A registers that are still needed after the API functions
    15                          ;;        returns. For Large Memory Model devices it is also the caller's 
    16                          ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
    17                          ;;        MVW_PP registers. Even though some of these registers may not be modified
    18                          ;;        now, there is no guarantee that will remain the case in future releases.
    19                          ;;-----------------------------------------------------------------------------
    20                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    21                          ;;*****************************************************************************
    22                          ;;*****************************************************************************
    23                          
    24                          
    25                          include "m8c.inc"
    26                          include "memory.inc"
    27                          include "UART_Sensor.inc"
    28                          
    29                          ;-----------------------------------------------
    30                          ;  Global Symbols
    31                          ;-----------------------------------------------
    32                          ;-------------------------------------------------------------------
    33                          ;  Declare the functions global for both assembler and C compiler.
    34                          ;
    35                          ;  Note that there are two names for each API. First name is
    36                          ;  assembler reference. Name with underscore is name refence for
    37                          ;  C compiler.  Calling function in C source code does not require
    38                          ;  the underscore.
    39                          ;-------------------------------------------------------------------
    40                          export  UART_Sensor_SetTxIntMode
    41                          export _UART_Sensor_SetTxIntMode
    42                          export  UART_Sensor_EnableInt
    43                          export _UART_Sensor_EnableInt
    44                          export  UART_Sensor_DisableInt
    45                          export _UART_Sensor_DisableInt
    46                          
    47                          export  UART_Sensor_Start
    48                          export _UART_Sensor_Start
    49                          export  UART_Sensor_Stop
    50                          export _UART_Sensor_Stop
    51                          export  UART_Sensor_SendData
    52                          export _UART_Sensor_SendData
    53                          export  UART_Sensor_bReadTxStatus
    54                          export _UART_Sensor_bReadTxStatus
    55                          export  UART_Sensor_bReadRxData
    56                          export _UART_Sensor_bReadRxData
    57                          export  UART_Sensor_bReadRxStatus
    58                          export _UART_Sensor_bReadRxStatus
    59                          
    60                          export  UART_Sensor_IntCntl
    61                          export _UART_Sensor_IntCntl
    62                          
    63                          export  UART_Sensor_TxIntMode
    64                          export _UART_Sensor_TxIntMode
    65                          
    66                          export  UART_Sensor_PutSHexByte
    67                          export _UART_Sensor_PutSHexByte
    68                          export  UART_Sensor_PutSHexInt
    69                          export _UART_Sensor_PutSHexInt
    70                          
    71                          export  UART_Sensor_CPutString
    72                          export _UART_Sensor_CPutString
    73                          export  UART_Sensor_PutString
    74                          export _UART_Sensor_PutString
    75                          export  UART_Sensor_PutChar
    76                          export _UART_Sensor_PutChar
    77                          export  UART_Sensor_Write
    78                          export _UART_Sensor_Write
    79                          export  UART_Sensor_CWrite
    80                          export _UART_Sensor_CWrite
    81                          
    82                          export  UART_Sensor_cGetChar
    83                          export _UART_Sensor_cGetChar
    84                          export  UART_Sensor_cReadChar
    85                          export _UART_Sensor_cReadChar
    86                          export  UART_Sensor_iReadChar
    87                          export _UART_Sensor_iReadChar
    88                          export  UART_Sensor_PutCRLF
    89                          export _UART_Sensor_PutCRLF
    90                          
    91                          IF (UART_Sensor_RXBUF_ENABLE)
    92                          export  UART_Sensor_CmdReset
    93                          export _UART_Sensor_CmdReset
    94                          export  UART_Sensor_bCmdCheck
    95                          export _UART_Sensor_bCmdCheck
    96                          export  UART_Sensor_bCmdLength
    97                          export _UART_Sensor_bCmdLength
    98                          export  UART_Sensor_bErrCheck
    99                          export _UART_Sensor_bErrCheck
   100                          
   101                          export  UART_Sensor_szGetParam
   102                          export _UART_Sensor_szGetParam
   103                          export  UART_Sensor_szGetRestOfParams
   104                          export _UART_Sensor_szGetRestOfParams
   105                          ENDIF
   106                          
   107                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108                          ; WARNING WARNING WARNING
   109                          ; The following exports are for backwards compatibility only and should
   110                          ; not be used for new designs. They may be eliminated in a future release.
   111                          ; Their status is "NO FURTHER MAINTENANCE". 
   112                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   113                          export  bUART_Sensor_ReadTxStatus
   114                          export _bUART_Sensor_ReadTxStatus
   115                          export  bUART_Sensor_ReadRxData
   116                          export _bUART_Sensor_ReadRxData
   117                          export  bUART_Sensor_ReadRxStatus
   118                          export _bUART_Sensor_ReadRxStatus
   119                          	
   120                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   121                          ;             END WARNING
   122                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                          
   124                          ;-----------------------------------------------
   125                          ; Variable Allocation
   126                          ;-----------------------------------------------
   127                          IF (UART_Sensor_RXBUF_ENABLE)
   128                              
   129                          area UART_Sensor_RAM (RAM, REL, CON)
   130                              
   131                           ptrParam:   BLK  1
   132                          
   133                          ENDIF
   134                          
   135                          area text (ROM,REL)
   136                          
   137                          ;-----------------------------------------------
   138                          ;  EQUATES
   139                          ;-----------------------------------------------
   140  0001                    bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
   141  0010                    bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
   142                          
   143                          area UserModules (ROM, REL, CON)
   144                          
   145                          ;=============================================================================
   146                          ;=============================================================================
   147                          ;
   148                          ;     Low-Level Commands
   149                          ;
   150                          ;=============================================================================
   151                          ;=============================================================================
   152                          
   153                          .SECTION
   154                          ;-----------------------------------------------------------------------------
   155                          ;  FUNCTION NAME: UART_Sensor_EnableInt
   156                          ;
   157                          ;  DESCRIPTION:
   158                          ;     Enables this UART's interrupt by setting the interrupt enable mask
   159                          ;     bit associated with this User Module. Remember to call the global
   160                          ;     interrupt enable function by using the macro: M8C_EnableGInt.
   161                          ;-----------------------------------------------------------------------------
   162                          ;
   163                          ;  ARGUMENTS:
   164                          ;     none.
   165                          ;
   166                          ;  RETURNS:
   167                          ;     none.
   168                          ;
   169                          ;  SIDE EFFECTS:
   170                          ;    The A and X registers may be modified by this or future implementations
   171                          ;    of this function.  The same is true for all RAM page pointer registers in
   172                          ;    the Large Memory Model.  When necessary, it is the calling function's
   173                          ;    responsibility to perserve their values across calls to fastcall16 
   174                          ;    functions.
   175                          ;
   176  2F84                     UART_Sensor_EnableInt:
   177  2F84                    _UART_Sensor_EnableInt:
   178                             RAM_PROLOGUE RAM_USE_CLASS_1
   179  2F84  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   180  2F87  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   181                             RAM_EPILOGUE RAM_USE_CLASS_1
   182  2F8A  7F                   ret
   183                          .ENDSECTION
   184                          
   185                              
   186                          .SECTION
   187                          ;-----------------------------------------------------------------------------
   188                          ;  FUNCTION NAME: UART_Sensor_DisableInt
   189                          ;
   190                          ;  DESCRIPTION:
   191                          ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
   192                          ;     associated with this User Module.
   193                          ;-----------------------------------------------------------------------------
   194                          ;
   195                          ;  ARGUMENTS:
   196                          ;     none.
   197                          ;
   198                          ;  RETURNS:
   199                          ;     none.
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;    The A and X registers may be modified by this or future implementations
   203                          ;    of this function.  The same is true for all RAM page pointer registers in
   204                          ;    the Large Memory Model.  When necessary, it is the calling function's
   205                          ;    responsibility to perserve their values across calls to fastcall16 
   206                          ;    functions.
   207                          ;
   208  2F8B                     UART_Sensor_DisableInt:
   209  2F8B                    _UART_Sensor_DisableInt:
   210                             RAM_PROLOGUE RAM_USE_CLASS_1
   211  2F8B  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   212  2F8E  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   213                             RAM_EPILOGUE RAM_USE_CLASS_1
   214  2F91  7F                   ret
   215                          .ENDSECTION
   216                          
   217                          
   218                          .SECTION
   219                          ;-----------------------------------------------------------------------------
   220                          ;  FUNCTION NAME: UART_Sensor_SetTxIntMode(BYTE bTxIntMode)
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Sets the Tx Interrupt Mode bit in the Function Register.
   224                          ;-----------------------------------------------------------------------------
   225                          ;
   226                          ;  ARGUMENTS:
   227                          ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
   228                          ;        Passed in the A register
   229                          ;
   230                          ;  RETURNS:
   231                          ;     none.
   232                          ;
   233                          ;  SIDE EFFECTS:
   234                          ;    The A and X registers may be modified by this or future implementations
   235                          ;    of this function.  The same is true for all RAM page pointer registers in
   236                          ;    the Large Memory Model.  When necessary, it is the calling function's
   237                          ;    responsibility to perserve their values across calls to fastcall16 
   238                          ;    functions.
   239                          ;
   240                          ;  THEORY of OPERATION OR PROCEDURE:
   241                          ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
   242                          ;     on TX register empty or TX transmit complete
   243                          ;
   244  2F92                     UART_Sensor_SetTxIntMode:
   245  2F92                    _UART_Sensor_SetTxIntMode:
   246                             RAM_PROLOGUE RAM_USE_CLASS_1
   247  2F92  71 10                M8C_SetBank1
   248  2F94  21 01                and   A, UART_Sensor_INT_MODE_TX_COMPLETE
   249  2F96  A007                 jz    .SetModeRegEmpty
   250  2F98  43 28 10             or    REG[UART_Sensor_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
   251  2F9B  70 EF                M8C_SetBank0
   252                             RAM_EPILOGUE RAM_USE_CLASS_1
   253  2F9D  7F                   ret
   254                          
   255  2F9E                    .SetModeRegEmpty:
   256  2F9E  41 28 EF             and   REG[UART_Sensor_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
   257  2FA1  70 EF                M8C_SetBank0
   258                             RAM_EPILOGUE RAM_USE_CLASS_1
   259  2FA3  7F                   ret
   260                          .ENDSECTION
   261                          
   262                          
   263                          .SECTION
   264                          ;-----------------------------------------------------------------------------
   265                          ;  FUNCTION NAME: UART_Sensor_Start(BYTE bParity)
   266                          ;
   267                          ;  DESCRIPTION:
   268                          ;     Sets the start bit and parity in the Control register of this user module.
   269                          ;-----------------------------------------------------------------------------
   270                          ;
   271                          ;  ARGUMENTS:
   272                          ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
   273                          ;        Passed in the A register.
   274                          ;
   275                          ;  RETURNS:
   276                          ;     none.
   277                          ;
   278                          ;  SIDE EFFECTS:
   279                          ;    The A and X registers may be modified by this or future implementations
   280                          ;    of this function.  The same is true for all RAM page pointer registers in
   281                          ;    the Large Memory Model.  When necessary, it is the calling function's
   282                          ;    responsibility to perserve their values across calls to fastcall16 
   283                          ;    functions.
   284                          ;
   285  2FA4                     UART_Sensor_Start:
   286  2FA4                    _UART_Sensor_Start:
   287                             RAM_PROLOGUE RAM_USE_CLASS_1
   288                             ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
   289                          
   290  2FA4  29 01                or    A, bfCONTROL_REG_START_BIT
   291  2FA6  60 2B                mov   REG[UART_Sensor_TX_CONTROL_REG], A
   292  2FA8  60 2F                mov   REG[UART_Sensor_RX_CONTROL_REG], A
   293                          IF ( UART_Sensor_RXBUF_ENABLE )
   294                             call  _UART_Sensor_CmdReset
   295                          ENDIF
   296                             RAM_EPILOGUE RAM_USE_CLASS_1
   297  2FAA  7F                   ret
   298                          .ENDSECTION
   299                          
   300                          
   301                          .SECTION
   302                          ;-----------------------------------------------------------------------------
   303                          ;  FUNCTION NAME: UART_Sensor_Stop
   304                          ;
   305                          ;  DESCRIPTION:
   306                          ;     Disables UART operation.
   307                          ;-----------------------------------------------------------------------------
   308                          ;
   309                          ;  ARGUMENTS:
   310                          ;     none.
   311                          ;
   312                          ;  RETURNS:
   313                          ;     none.
   314                          ;
   315                          ;  SIDE EFFECTS:
   316                          ;    The A and X registers may be modified by this or future implementations
   317                          ;    of this function.  The same is true for all RAM page pointer registers in
   318                          ;    the Large Memory Model.  When necessary, it is the calling function's
   319                          ;    responsibility to perserve their values across calls to fastcall16 
   320                          ;    functions.
   321                          ;
   322  2FAB                     UART_Sensor_Stop:
   323  2FAB                    _UART_Sensor_Stop:
   324                             RAM_PROLOGUE RAM_USE_CLASS_1
   325  2FAB  41 2B FE             and   REG[UART_Sensor_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   326  2FAE  41 2F FE             and   REG[UART_Sensor_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
   327                             RAM_EPILOGUE RAM_USE_CLASS_1
   328  2FB1  7F                   ret
   329                          .ENDSECTION
   330                          
   331                          
   332                          .SECTION
   333                          ;-----------------------------------------------------------------------------
   334                          ;  FUNCTION NAME: UART_Sensor_SendData
   335                          ;
   336                          ;  DESCRIPTION:
   337                          ;     Initiates a transmission of data.
   338                          ;-----------------------------------------------------------------------------
   339                          ;
   340                          ;  ARGUMENTS:
   341                          ;     BYTE  TxData - data to transmit. PASSED in A register.
   342                          ;
   343                          ;  RETURNS:
   344                          ;     none.
   345                          ;
   346                          ;  SIDE EFFECTS:
   347                          ;    The A and X registers may be modified by this or future implementations
   348                          ;    of this function.  The same is true for all RAM page pointer registers in
   349                          ;    the Large Memory Model.  When necessary, it is the calling function's
   350                          ;    responsibility to perserve their values across calls to fastcall16 
   351                          ;    functions.
   352                          ;
   353  2FB2                     UART_Sensor_SendData:
   354  2FB2                    _UART_Sensor_SendData:
   355                             RAM_PROLOGUE RAM_USE_CLASS_1
   356  2FB2  60 29                mov REG[UART_Sensor_TX_BUFFER_REG], A
   357                             RAM_EPILOGUE RAM_USE_CLASS_1
   358  2FB4  7F                   ret
   359                          .ENDSECTION
   360                          
   361                          
   362                          .SECTION
   363                          ;-----------------------------------------------------------------------------
   364                          ;  FUNCTION NAME: UART_Sensor_bReadTxStatus
   365                          ;
   366                          ;  DESCRIPTION:
   367                          ;     Reads the Tx Status bits in the Control/Status register.
   368                          ;-----------------------------------------------------------------------------
   369                          ;
   370                          ;  ARGUMENTS:
   371                          ;     none.
   372                          ;
   373                          ;  RETURNS:
   374                          ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
   375                          ;           status bits (returned in A)
   376                          ;
   377                          ;  SIDE EFFECTS:
   378                          ;    The A and X registers may be modified by this or future implementations
   379                          ;    of this function.  The same is true for all RAM page pointer registers in
   380                          ;    the Large Memory Model.  When necessary, it is the calling function's
   381                          ;    responsibility to perserve their values across calls to fastcall16 
   382                          ;    functions.
   383                          ;
   384  2FB5                     UART_Sensor_bReadTxStatus:
   385  2FB5                    _UART_Sensor_bReadTxStatus:
   386  2FB5                     bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   387  2FB5                    _bUART_Sensor_ReadTxStatus:                      ; For backwards compatibility only
   388                             RAM_PROLOGUE RAM_USE_CLASS_1
   389  2FB5  5D 2B                mov A,  REG[UART_Sensor_TX_CONTROL_REG]
   390                             RAM_EPILOGUE RAM_USE_CLASS_1
   391  2FB7  7F                   ret
   392                          .ENDSECTION
   393                          
   394                          
   395                          .SECTION
   396                          ;-----------------------------------------------------------------------------
   397                          ;  FUNCTION NAME: UART_Sensor_bReadRxData
   398                          ;
   399                          ;  DESCRIPTION:
   400                          ;     Reads the RX buffer register.  Should check the status regiser to make
   401                          ;     sure data is valid.
   402                          ;-----------------------------------------------------------------------------
   403                          ;
   404                          ;  ARGUMENTS:
   405                          ;     none.
   406                          ;
   407                          ;  RETURNS:
   408                          ;     bRxData - returned in A.
   409                          ;
   410                          ;  SIDE EFFECTS:
   411                          ;    The A and X registers may be modified by this or future implementations
   412                          ;    of this function.  The same is true for all RAM page pointer registers in
   413                          ;    the Large Memory Model.  When necessary, it is the calling function's
   414                          ;    responsibility to perserve their values across calls to fastcall16 
   415                          ;    functions.
   416                          ;
   417  2FB8                     UART_Sensor_bReadRxData:
   418  2FB8                    _UART_Sensor_bReadRxData:
   419  2FB8                     bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   420  2FB8                    _bUART_Sensor_ReadRxData:                        ; For backwards compatibility only
   421                             RAM_PROLOGUE RAM_USE_CLASS_1
   422  2FB8  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]
   423                             RAM_EPILOGUE RAM_USE_CLASS_1
   424  2FBA  7F                   ret
   425                          .ENDSECTION
   426                          
   427                          
   428                          .SECTION
   429                          ;-----------------------------------------------------------------------------
   430                          ;  FUNCTION NAME: UART_Sensor_bReadRxStatus
   431                          ;
   432                          ;  DESCRIPTION:
   433                          ;     Reads the RX Status bits in the Control/Status register.
   434                          ;-----------------------------------------------------------------------------
   435                          ;
   436                          ;  ARGUMENTS:
   437                          ;     none.
   438                          ;
   439                          ;  RETURNS:
   440                          ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
   441                          ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
   442                          ;           returned in A.
   443                          ;
   444                          ;  SIDE EFFECTS:
   445                          ;    The A and X registers may be modified by this or future implementations
   446                          ;    of this function.  The same is true for all RAM page pointer registers in
   447                          ;    the Large Memory Model.  When necessary, it is the calling function's
   448                          ;    responsibility to perserve their values across calls to fastcall16 
   449                          ;    functions.
   450                          ;
   451  2FBB                     UART_Sensor_bReadRxStatus:
   452  2FBB                    _UART_Sensor_bReadRxStatus:
   453  2FBB                     bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   454  2FBB                    _bUART_Sensor_ReadRxStatus:                      ; For backwards compatibility only
   455                             RAM_PROLOGUE RAM_USE_CLASS_1
   456  2FBB  5D 2F                mov A,  REG[UART_Sensor_RX_CONTROL_REG]
   457                             RAM_EPILOGUE RAM_USE_CLASS_1
   458  2FBD  7F                   ret
   459                          .ENDSECTION
   460                          
   461                          
   462                          .SECTION
   463                          ;-----------------------------------------------------------------------------
   464                          ;  FUNCTION NAME: UART_Sensor_TxIntMode
   465                          ;
   466                          ;  DESCRIPTION:
   467                          ;     This function is used to change the TX Interrupt mode.
   468                          ;-----------------------------------------------------------------------------
   469                          ;
   470                          ;  ARGUMENTS:
   471                          ;     A => Tx Interrupt mode
   472                          ;             0 => Interrupt on TX_Reg_Empty  (Default)
   473                          ;             1 => Interrupt on TX Complete
   474                          ;
   475                          ;  RETURNS:
   476                          ;     none.
   477                          ;
   478                          ;  SIDE EFFECTS:
   479                          ;    The A and X registers may be modified by this or future implementations
   480                          ;    of this function.  The same is true for all RAM page pointer registers in
   481                          ;    the Large Memory Model.  When necessary, it is the calling function's
   482                          ;    responsibility to perserve their values across calls to fastcall16 
   483                          ;    functions.
   484                          ;
   485  2FBE                     UART_Sensor_TxIntMode:
   486  2FBE                    _UART_Sensor_TxIntMode:
   487                             RAM_PROLOGUE RAM_USE_CLASS_1
   488                          
   489  2FBE  21 01                and  A,UART_Sensor_INT_MODE_TX_COMPLETE
   490  2FC0  71 10                M8C_SetBank1
   491  2FC2  39 01                cmp  A,UART_Sensor_INT_MODE_TX_COMPLETE
   492  2FC4  A006                 jz   .SetTxCmpMode
   493                          
   494  2FC6  41 28 EF             and  reg[UART_Sensor_TX_FUNC_REG],0xEF        ; Set Interrupt on Tx_Reg_Empty
   495  2FC9  8004                 jmp  .TxIntMode_End
   496                          
   497  2FCB                    .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
   498  2FCB  43 28 10             or   reg[UART_Sensor_TX_FUNC_REG],0x10
   499                          
   500  2FCE                    .TxIntMode_End:
   501  2FCE  70 EF                M8C_SetBank0
   502                             RAM_EPILOGUE RAM_USE_CLASS_1
   503  2FD0  7F                   ret
   504                          .ENDSECTION
   505                          
   506                              
   507                          .SECTION
   508                          ;-----------------------------------------------------------------------------
   509                          ;  FUNCTION NAME: UART_Sensor_IntCntl
   510                          ;
   511                          ;  DESCRIPTION:
   512                          ;     This function is used to enable/disable the Rx and Tx interrupt.
   513                          ;-----------------------------------------------------------------------------
   514                          ;
   515                          ;  ARGUMENTS:
   516                          ;     A => Interrupt mask
   517                          ;
   518                          ;  RETURNS:
   519                          ;     none.
   520                          ;
   521                          ;  SIDE EFFECTS:
   522                          ;    The A and X registers may be modified by this or future implementations
   523                          ;    of this function.  The same is true for all RAM page pointer registers in
   524                          ;    the Large Memory Model.  When necessary, it is the calling function's
   525                          ;    responsibility to perserve their values across calls to fastcall16 
   526                          ;    functions.
   527                          ;
   528                          ;  THEORY of OPERATION or PROCEDURE:
   529                          ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
   530                          ;     and RX block.
   531                          ;
   532  2FD1                     UART_Sensor_IntCntl:
   533  2FD1                    _UART_Sensor_IntCntl:
   534                             RAM_PROLOGUE RAM_USE_CLASS_1
   535                          
   536  2FD1  08                   push A
   537  2FD2  21 01                and  A,UART_Sensor_ENABLE_RX_INT
   538  2FD4  A006                 jz   .DisRxInt
   539                               ; Enable Rx Interrupt
   540  2FD6  43 E1 08             M8C_EnableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   541  2FD9  8004                 jmp  .CheckTxInt
   542  2FDB                    .DisRxInt:
   543                               ; Disable Rx Interrupt
   544  2FDB  41 E1 F7             M8C_DisableIntMask UART_Sensor_RX_INT_REG, UART_Sensor_RX_INT_MASK
   545                          
   546  2FDE                    .CheckTxInt:
   547  2FDE  18                   pop  A
   548  2FDF  21 02                and  A,UART_Sensor_ENABLE_TX_INT
   549  2FE1  A006                 jz   .DisTxInt
   550                               ; Enable Tx Interrupt
   551  2FE3  43 E1 04             M8C_EnableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   552  2FE6  8004                 jmp  .End_IntCntl
   553  2FE8                    .DisTxInt:
   554                               ; Disable Tx Interrupt
   555  2FE8  41 E1 FB             M8C_DisableIntMask UART_Sensor_TX_INT_REG, UART_Sensor_TX_INT_MASK
   556                          
   557  2FEB                    .End_IntCntl:
   558                             RAM_EPILOGUE RAM_USE_CLASS_1
   559  2FEB  7F                   ret
   560                          .ENDSECTION
   561                          
   562                          
   563                          ;=============================================================================
   564                          ;=============================================================================
   565                          ;
   566                          ;     High-Level Commands
   567                          ;
   568                          ;=============================================================================
   569                          ;=============================================================================
   570                          
   571                          
   572                          ;-----------------------------------------------------------------------------
   573                          ;  FUNCTION NAME: UART_Sensor_PutSHexByte
   574                          ;
   575                          ;  DESCRIPTION:
   576                          ;     Print a byte in Hex (two characters) to the UART Tx
   577                          ;-----------------------------------------------------------------------------
   578                          ;
   579                          ;  ARGUMENTS:
   580                          ;     A  => (BYTE) Data/char to be printed
   581                          ;
   582                          ;  RETURNS:
   583                          ;     none.
   584                          ;
   585                          ;  SIDE EFFECTS:
   586                          ;    The A and X registers may be modified by this or future implementations
   587                          ;    of this function.  The same is true for all RAM page pointer registers in
   588                          ;    the Large Memory Model.  When necessary, it is the calling function's
   589                          ;    responsibility to perserve their values across calls to fastcall16 
   590                          ;    functions.
   591                          ;
   592                          .LITERAL
   593  2FEC                    UART_Sensor_HEX_STR:
   594  2FEC  30 31 32 33 34 35      DS    "0123456789ABCDEF"
              36 37 38 39 41 42 
              43 44 45 46       
   595                          .ENDLITERAL
   596                          
   597                          .SECTION
   598  2FFC                     UART_Sensor_PutSHexByte:
   599  2FFC                    _UART_Sensor_PutSHexByte:
   600                             RAM_PROLOGUE RAM_USE_CLASS_1
   601  2FFC  08                   push  A                             ; Save lower nibble
   602  2FFD  67                   asr   A                             ; Shift high nibble to right
   603  2FFE  67                   asr   A
   604  2FFF  67                   asr   A
   605  3000  67                   asr   A
   606  3001  21 0F                and   A,0Fh                         ; Mask off nibble
   607  3003  FFE7                 index UART_Sensor_HEX_STR           ; Get Hex value
   608  3005  900F                 call  UART_Sensor_PutChar           ; Write data to screen
   609  3007  18                   pop   A                             ; Restore value
   610  3008  21 0F                and   A,0Fh                         ; Mask off lower nibble
   611  300A  FFE0                 index UART_Sensor_HEX_STR           ; Get Hex value
   612  300C  9008                 call  UART_Sensor_PutChar           ; Write data to screen
   613                             RAM_EPILOGUE RAM_USE_CLASS_1
   614  300E  7F                   ret
   615                          .ENDSECTION
   616                          
   617                          
   618                          .SECTION
   619                          ;-----------------------------------------------------------------------------
   620                          ;  FUNCTION NAME: UART_Sensor_PutSHexInt
   621                          ;
   622                          ;  DESCRIPTION:
   623                          ;     Print an Int in Hex (four characters) to UART Tx
   624                          ;-----------------------------------------------------------------------------
   625                          ;
   626                          ;  ARGUMENTS:
   627                          ;     Pointer to string
   628                          ;     A  => ASB of Int
   629                          ;     X  => MSB of Int
   630                          ;
   631                          ;  RETURNS:
   632                          ;     none.
   633                          ;
   634                          ;  SIDE EFFECTS:
   635                          ;    The A and X registers may be modified by this or future implementations
   636                          ;    of this function.  The same is true for all RAM page pointer registers in
   637                          ;    the Large Memory Model.  When necessary, it is the calling function's
   638                          ;    responsibility to perserve their values across calls to fastcall16 
   639                          ;    functions.
   640                          ;
   641                          
   642  300F                     UART_Sensor_PutSHexInt:
   643  300F                    _UART_Sensor_PutSHexInt:
   644                             RAM_PROLOGUE RAM_USE_CLASS_1
   645  300F  4B                   swap  A,X
   646  3010  9FEA                 call  UART_Sensor_PutSHexByte       ; Print MSB
   647  3012  5B                   mov   A,X                           ; Move LSB into position
   648  3013  9FE7                 call  UART_Sensor_PutSHexByte       ; Print LSB
   649                             RAM_EPILOGUE RAM_USE_CLASS_1
   650  3015  7F                   ret
   651                          .ENDSECTION
   652                          
   653                          
   654                          .SECTION
   655                          ;-----------------------------------------------------------------------------
   656                          ;  FUNCTION NAME: UART_Sensor_PutChar
   657                          ;
   658                          ;  DESCRIPTION:
   659                          ;     Send character out through UART TX port.
   660                          ;-----------------------------------------------------------------------------
   661                          ;
   662                          ;  ARGUMENTS:
   663                          ;     A has Character to send to UART Tx Port
   664                          ;
   665                          ;  RETURNS:
   666                          ;     none
   667                          ;
   668                          ;  SIDE EFFECTS:
   669                          ;    The A and X registers may be modified by this or future implementations
   670                          ;    of this function.  The same is true for all RAM page pointer registers in
   671                          ;    the Large Memory Model.  When necessary, it is the calling function's
   672                          ;    responsibility to perserve their values across calls to fastcall16 
   673                          ;    functions.
   674                          ;
   675                          
   676                             macro InLinePutChar( Source )
   677                          .BufEmptyWaitLoop:
   678                             tst REG[UART_Sensor_TX_CONTROL_REG], UART_Sensor_TX_BUFFER_EMPTY     ; Check Tx Status
   679                             jz  .BufEmptyWaitLoop
   680                             mov REG[UART_Sensor_TX_BUFFER_REG], @Source     ; Write data to Tx Port
   681  3016                       endm
   682                          
   683  3016                     UART_Sensor_PutChar:
   684  3016                    _UART_Sensor_PutChar:
   685                             RAM_PROLOGUE RAM_USE_CLASS_1
   686                             InLinePutChar A
      + 3016                    ; Nothing to do
??0000:
      + 3016  49 2B 10          	tst	reg[43], 16
      + 3019  AFFC              	jz	??0000
      + 301B  60 29             	mov	reg[41], a
   687                             RAM_EPILOGUE RAM_USE_CLASS_1
   688  301D  7F                   ret
   689                          .ENDSECTION
   690                          
   691                          
   692                          .SECTION
   693                          ;-----------------------------------------------------------------------------
   694                          ;  FUNCTION NAME: UART_Sensor_cGetChar
   695                          ;
   696                          ;  DESCRIPTION:
   697                          ;     Read character from UART RX port.
   698                          ;-----------------------------------------------------------------------------
   699                          ;
   700                          ;  ARGUMENTS:
   701                          ;      none
   702                          ;
   703                          ;  RETURNS:
   704                          ;     char that is returned from UART
   705                          ;
   706                          ;  SIDE EFFECTS:
   707                          ;    The A and X registers may be modified by this or future implementations
   708                          ;    of this function.  The same is true for all RAM page pointer registers in
   709                          ;    the Large Memory Model.  When necessary, it is the calling function's
   710                          ;    responsibility to perserve their values across calls to fastcall16 
   711                          ;    functions.
   712                          ;
   713                          ;    Program flow will stay in this function until a character is received.
   714                          ;    If the watchdog timer is used, care must be taken to make sure that
   715                          ;    the delay between characters is less than the watchdog timeout.
   716                          ;
   717  301E                     UART_Sensor_cGetChar:
   718  301E                    _UART_Sensor_cGetChar:
   719                             RAM_PROLOGUE RAM_USE_CLASS_1
   720  301E  49 2F 08             tst REG[UART_Sensor_RX_CONTROL_REG],UART_Sensor_RX_REG_FULL    ; Check if a character is ready
   721  3021  AFFC                 jz  UART_Sensor_cGetChar                              ; If not loop
   722  3023  5D 2E                mov A, REG[UART_Sensor_RX_BUFFER_REG]                 ; Get character
   723                             RAM_EPILOGUE RAM_USE_CLASS_1
   724  3025  7F                   ret
   725                          .ENDSECTION
   726                          
   727                          
   728                          .SECTION
   729                          ;-----------------------------------------------------------------------------
   730                          ;  FUNCTION NAME: UART_Sensor_cReadChar
   731                          ;
   732                          ;  DESCRIPTION:
   733                          ;     Read character from UART RX port.
   734                          ;-----------------------------------------------------------------------------
   735                          ;
   736                          ;  ARGUMENTS:
   737                          ;      none
   738                          ;
   739                          ;  RETURNS:
   740                          ;     char that is returned from UART
   741                          ;
   742                          ;  SIDE EFFECTS:
   743                          ;    The A and X registers may be modified by this or future implementations
   744                          ;    of this function.  The same is true for all RAM page pointer registers in
   745                          ;    the Large Memory Model.  When necessary, it is the calling function's
   746                          ;    responsibility to perserve their values across calls to fastcall16 
   747                          ;    functions.
   748                          ;
   749                          ;    A valid 0x00 character will be ignored, since a 0x00 return value
   750                          ;    implies a valid character or an error condition occured.
   751                          ;
   752  3026                     UART_Sensor_cReadChar:
   753  3026                    _UART_Sensor_cReadChar:
   754                             RAM_PROLOGUE RAM_USE_CLASS_1
   755  3026  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   756  3028  08                   push A
   757  3029  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   758  302B  B004                 jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
   759  302D  18                   pop  A
   760  302E  800B                 jmp  .RX_NO_VALID_CHAR
   761                          
   762  3030                    .RX_DATA_RDY:
   763  3030  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]          
   764  3032  4B                   swap A,X                                                ; determine if data is valid
   765                          
   766  3033  18                   pop  A                                                  ; Check for errors
   767  3034  21 A0                and  A,(UART_Sensor_RX_PARITY_ERROR | UART_Sensor_RX_FRAMING_ERROR)
   768  3036  B003                 jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
   769  3038  4B                   swap A,X                                                ; Put data in A and exit
   770                             RAM_EPILOGUE RAM_USE_CLASS_1
   771  3039  7F                   ret
   772                          
   773  303A                    .RX_NO_VALID_CHAR:
   774  303A  50 00                mov A,0x00                                              ; Zero out character
   775                          
   776  303C                     End_UART_Sensor_cReadChar:
   777                             RAM_EPILOGUE RAM_USE_CLASS_1
   778  303C  7F                   ret
   779                          .ENDSECTION
   780                          
   781                          
   782                          .SECTION
   783                          ;-----------------------------------------------------------------------------
   784                          ;  FUNCTION NAME: UART_Sensor_iReadChar
   785                          ;
   786                          ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
   787                          ;  to just set a value in the upper byte if error conditions exists.
   788                          ;
   789                          ;  DESCRIPTION:
   790                          ;     Read character from UART RX port.
   791                          ;-----------------------------------------------------------------------------
   792                          ;
   793                          ;  ARGUMENTS:
   794                          ;      none
   795                          ;
   796                          ;  RETURNS:
   797                          ;     An integer value is returned.  A negative value inplies and error
   798                          ;     condition, a positive value between 0 and 255 is the return character.
   799                          ;
   800                          ;     Error Codes:
   801                          ;        0x80CC    Parity Error
   802                          ;        0x40CC    Overrun Error
   803                          ;        0x20CC    Framing Error
   804                          ;        0x01CC    No Data available
   805                          ;
   806                          ;  SIDE EFFECTS:
   807                          ;    The A and X registers may be modified by this or future implementations
   808                          ;    of this function.  The same is true for all RAM page pointer registers in
   809                          ;    the Large Memory Model.  When necessary, it is the calling function's
   810                          ;    responsibility to perserve their values across calls to fastcall16 
   811                          ;    functions.
   812                          ;
   813  303D                     UART_Sensor_iReadChar:
   814  303D                    _UART_Sensor_iReadChar:
   815                             RAM_PROLOGUE RAM_USE_CLASS_1
   816  303D  5D 2F                mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Get Status of RX
   817                                                                                     ; Mask only errors and data ready
   818  303F  21 E8                and  A,(UART_Sensor_RX_ERROR|UART_Sensor_RX_REG_FULL)
   819  3041  08                   push A
   820  3042  21 08                and  A,UART_Sensor_RX_COMPLETE                          ; Check if a character is ready
   821  3044  B007                 jnz  .RX_GET_DATA                                       ; Data Ready go read it.
   822  3046  18                   pop  A
   823  3047  29 01                or   A,UART_Sensor_RX_NO_DATA                           ; Add no data flag
   824  3049  4B                   swap A,X
   825  304A  8007                 jmp  End_UART_Sensor_iReadChar
   826                          
   827  304C                    .RX_GET_DATA:
   828  304C  18                   pop  A
   829  304D  21 E0                and  A,UART_Sensor_RX_ERROR
   830  304F  4B                   swap A,X
   831  3050  5D 2E                mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read data first, then
   832                                                                                     ; determine if data is valid
   833                          
   834  3052                     End_UART_Sensor_iReadChar:
   835                             RAM_EPILOGUE RAM_USE_CLASS_1
   836  3052  7F                   ret
   837                          .ENDSECTION
   838                          
   839                          
   840                          .SECTION
   841                          ;-----------------------------------------------------------------------------
   842                          ;  FUNCTION NAME: UART_Sensor_PutString
   843                          ;
   844                          ;  DESCRIPTION:
   845                          ;     Send String out through UART TX port.
   846                          ;-----------------------------------------------------------------------------
   847                          ;
   848                          ;  ARGUMENTS:
   849                          ;     Pointer to String
   850                          ;     A has MSB of string address
   851                          ;     X has LSB of string address
   852                          ;
   853                          ;  RETURNS:
   854                          ;     none
   855                          ;
   856                          ;  SIDE EFFECTS:
   857                          ;    The A and X registers may be modified by this or future implementations
   858                          ;    of this function.  The same is true for all RAM page pointer registers in
   859                          ;    the Large Memory Model.  When necessary, it is the calling function's
   860                          ;    responsibility to perserve their values across calls to fastcall16 
   861                          ;    functions.
   862                          ;          
   863                          ;    Currently only the page pointer registers listed below are modified: 
   864                          ;          IDX_PP
   865                          ;
   866  3053                     UART_Sensor_PutString:
   867  3053                    _UART_Sensor_PutString:
   868                             RAM_PROLOGUE RAM_USE_CLASS_3
   869  3053  60 D3                RAM_SETPAGE_IDX A
   870  3055                    .PutStringLoop:
   871  3055  52 00                mov   A,[X]                                   ; Get value pointed to by X
   872  3057  A006                 jz    End_PutString                           ; Check for end of string
   873  3059  9FBB                 call  UART_Sensor_PutChar                     ; Send character to Tx port
   874  305B  75                   inc   X                                       ; Advance pointer to next character
   875  305C  8FF8                 jmp   .PutStringLoop                          ; Get next character
   876                          
   877  305E                    End_PutString:
   878                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 305E  70 3F             	and	f, 0x3F
      + 3060  71 80             	or	f, 0x80
   879  3062  7F                   ret
   880                          .ENDSECTION
   881                              
   882                          .SECTION
   883                          ;-----------------------------------------------------------------------------
   884                          ;  FUNCTION NAME: UART_Sensor_Write
   885                          ;
   886                          ;  DESCRIPTION:
   887                          ;     Send String of length X to serial port
   888                          ;-----------------------------------------------------------------------------
   889                          ;
   890                          ;  ARGUMENTS:
   891                          ;     Pointer to String
   892                          ;     [SP-5] Count of characters to send
   893                          ;     [SP-4] has MSB of string address
   894                          ;     [SP-3] has LSB of string address
   895                          ;
   896                          ;  RETURNS:
   897                          ;     none
   898                          ;
   899                          ;  SIDE EFFECTS:
   900                          ;    The A and X registers may be modified by this or future implementations
   901                          ;    of this function.  The same is true for all RAM page pointer registers in
   902                          ;    the Large Memory Model.  When necessary, it is the calling function's
   903                          ;    responsibility to perserve their values across calls to fastcall16 
   904                          ;    functions.
   905                          ;          
   906                          ;    Currently only the page pointer registers listed below are modified: 
   907                          ;          IDX_PP
   908                          ;
   909  FFFFFFFB                    CNT_LEN:    equ -5                               ; Length of data to send
   910  FFFFFFFC                    STR_MSB:    equ -4                               ; MSB pointer of string 
   911  FFFFFFFD                    STR_LSB:    equ -3                               ; LSB pointer of string 
   912                          
   913  3063                     UART_Sensor_Write:
   914  3063                    _UART_Sensor_Write:
   915                             RAM_PROLOGUE RAM_USE_CLASS_3
   916  3063  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
   917  3066  4F                   mov   X, SP                                   ; Establish the frame pointer 
   918                          
   919  3067                    .NextByteLoop:
   920  3067  52 FB                mov   A, [X+CNT_LEN]                          ; End of the string?
   921  3069  A01A                 jz    .End_Write                              ;   Yes, prepare to exit
   922  306B  7B FB                dec   [X+CNT_LEN]                             ; Decrement counter
   923                          
   924                             IF SYSTEM_LARGE_MEMORY_MODEL
   925  306D  52 FC                mov   A, [X+STR_MSB]                          ; Load pointer to char to send
   926                             ENDIF
   927                          
   928  306F  59 FD                mov   X, [X+STR_LSB]                          ; Load pointer to char to send
   929  3071  60 D3                RAM_SETPAGE_IDX A                             ; switch index pages
   930  3073  52 00                mov   A, [X]                                  ; Grab the data
   931                             InLinePutChar A                               ; Put data in empty TX buf reg
      + 3075                    ??0001:
      + 3075  49 2B 10          	tst	reg[43], 16
      + 3078  AFFC              	jz	??0001
      + 307A  60 29             	mov	reg[41], a
   932  307C  4F                   mov   X, SP                                   ; Recover frame pointer
   933  307D  62 D3 03             RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
   934  3080  77 FD                inc   [X+STR_LSB]                             ; Point to next byte, but do not
   935  3082  8FE4                 jmp   .NextByteLoop                           ;    cross RAM page boundary!
   936                          
   937  3084                    .End_Write:
   938                             RAM_EPILOGUE RAM_USE_CLASS_3
      + 3084  70 3F             	and	f, 0x3F
      + 3086  71 80             	or	f, 0x80
   939  3088  7F                   ret
   940                          .ENDSECTION
   941                              
   942                          
   943                          .SECTION
   944                          ;-----------------------------------------------------------------------------
   945                          ;  FUNCTION NAME: UART_Sensor_CWrite
   946                          ;
   947                          ;             WARNING WARNING NOT COMPLETE
   948                          ;
   949                          ;  DESCRIPTION:
   950                          ;     Send String of length X to serial port
   951                          ;-----------------------------------------------------------------------------
   952                          ;
   953                          ;  ARGUMENTS:
   954                          ;     [SP-4] MSB of Count of character to send
   955                          ;     [SP-3] LSB of Count of character to send
   956                          ;     [SP-2] has MSB of string address
   957                          ;     [SP-1] has LSB of string address
   958                          ;
   959                          ;  RETURNS:
   960                          ;     none
   961                          ;
   962                          ;  SIDE EFFECTS:
   963                          ;    The A and X registers may be modified by this or future implementations
   964                          ;    of this function.  The same is true for all RAM page pointer registers in
   965                          ;    the Large Memory Model.  When necessary, it is the calling function's
   966                          ;    responsibility to perserve their values across calls to fastcall16 
   967                          ;    functions.
   968                          ;
   969  FFFFFFFA                    CLEN_MSB:   equ -6           ; MSB Length of data to send
   970  FFFFFFFB                    CLEN_LSB:   equ -5           ; LSB Length of data to send
   971  FFFFFFFC                    CSTR_MSB:   equ -4           ; MSB pointer of string
   972  FFFFFFFD                    CSTR_LSB:   equ -3           ; LSB pointer of string
   973                          
   974  3089                     UART_Sensor_CWrite:
   975  3089                    _UART_Sensor_CWrite:
   976  3089  71 40                RAM_PROLOGUE RAM_USE_CLASS_2
   977  308B  4F                   mov   X,SP
   978  308C                    .CW_Loop:
   979  308C  3D FA 00             cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
   980  308F  B006                 jnz   .CW_WRITEIT
   981  3091  3D FB 00             cmp   [X+CLEN_LSB],0x00
   982  3094  A01D                 jz    .End_CWrite                        ; Leave if done
   983                          
   984  3096                    .CW_WRITEIT:                                
   985  3096  10                   push  X                                  ; Save frame pointer
   986  3097  52 FC                mov   A,[X+CSTR_MSB]
   987  3099  59 FD                mov   X,[X+CSTR_LSB]
   988  309B  28                   romx                                     ; Get character from ROM
   989                             InLinePutChar A                          ; Put data in empty TX buf reg
      + 309C                    ??0002:
      + 309C  49 2B 10          	tst	reg[43], 16
      + 309F  AFFC              	jz	??0002
      + 30A1  60 29             	mov	reg[41], a
   990  30A3  20                   pop   X                                  ; Restore frame pointer
   991  30A4  07 FD 01             add   [X+CSTR_LSB],1                     ; Increment the string pointer
   992  30A7  0F FC 00             adc   [X+CSTR_MSB],0
   993  30AA  17 FB 01             sub   [X+CLEN_LSB],0x01                  ; Dec the counter
   994  30AD  1F FA 00             sbb   [X+CLEN_MSB],0x00
   995  30B0  8FDB                 jmp   .CW_Loop
   996                          
   997  30B2                    .End_CWrite:
   998                             RAM_EPILOGUE RAM_USE_CLASS_2
      + 30B2  70 3F             	and	f, 0x3F
      + 30B4  71 80             	or	f, 0x80
   999  30B6  7F                   ret
  1000                          .ENDSECTION
  1001                          
  1002                          
  1003                          .SECTION
  1004                          ;-----------------------------------------------------------------------------
  1005                          ;  FUNCTION NAME: UART_Sensor_CPutString
  1006                          ;
  1007                          ;  DESCRIPTION:
  1008                          ;     Send String out through UART TX port.
  1009                          ;-----------------------------------------------------------------------------
  1010                          ;
  1011                          ;  ARGUMENTS:
  1012                          ;     Pointer to String
  1013                          ;     A has MSB of string address
  1014                          ;     X has LSB of string address
  1015                          ;
  1016                          ;  RETURNS:
  1017                          ;     none
  1018                          ;
  1019                          ;  SIDE EFFECTS:
  1020                          ;    The A and X registers may be modified by this or future implementations
  1021                          ;    of this function.  The same is true for all RAM page pointer registers in
  1022                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1023                          ;    responsibility to perserve their values across calls to fastcall16 
  1024                          ;    functions.
  1025                          ;
  1026  30B7                     UART_Sensor_CPutString:
  1027  30B7                    _UART_Sensor_CPutString:
  1028                             RAM_PROLOGUE RAM_USE_CLASS_1
  1029  30B7  08                   push  A                                       ; Store ROM pointer
  1030  30B8  10                   push  X
  1031  30B9  28                   romx                                          ; Get character from ROM
  1032  30BA  A00B                 jz    .End_CPutString
  1033  30BC  9F58                 call  UART_Sensor_PutChar                     ; Print character
  1034  30BE  20                   pop   X
  1035  30BF  18                   pop   A
  1036  30C0  75                   inc   X                                       ; Inc LSB of pointer
  1037  30C1  DFF5                 jnc   UART_Sensor_CPutString                  ; Check for carry
  1038  30C3  74                   inc   A                                       ; Inc MSB of pointer
  1039  30C4  8FF2                 jmp   UART_Sensor_CPutString
  1040                          
  1041                          
  1042  30C6                    .End_CPutString:
  1043  30C6  38 FE                add   SP, -2
  1044                             RAM_EPILOGUE RAM_USE_CLASS_1
  1045  30C8  7F                   ret
  1046                          .ENDSECTION
  1047                          
  1048                          
  1049                          .SECTION
  1050                          ;-----------------------------------------------------------------------------
  1051                          ;  FUNCTION NAME: UART_Sensor_PutCRLF
  1052                          ;
  1053                          ;  DESCRIPTION:
  1054                          ;     Send a CR and LF
  1055                          ;-----------------------------------------------------------------------------
  1056                          ;
  1057                          ;  ARGUMENTS:
  1058                          ;     none.
  1059                          ;
  1060                          ;  RETURNS:
  1061                          ;     none.
  1062                          ;
  1063                          ;  SIDE EFFECTS:
  1064                          ;    The A and X registers may be modified by this or future implementations
  1065                          ;    of this function.  The same is true for all RAM page pointer registers in
  1066                          ;    the Large Memory Model.  When necessary, it is the calling function's
  1067                          ;    responsibility to perserve their values across calls to fastcall16 
  1068                          ;    functions.
  1069                          ;
  1070  30C9                     UART_Sensor_PutCRLF:
  1071  30C9                    _UART_Sensor_PutCRLF:
  1072                             RAM_PROLOGUE RAM_USE_CLASS_1
  1073  30C9  50 0D                mov  A,0x0D                        ; Send CR
  1074  30CB  9F49                 call UART_Sensor_PutChar
  1075  30CD  50 0A                mov  A,0x0A                        ; Send LF
  1076  30CF  9F45                 call UART_Sensor_PutChar
  1077                             RAM_EPILOGUE RAM_USE_CLASS_1
  1078  30D1  7F                   ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:49 2015
          UART_Sensor_TX_FUNC_REG 0028             UART_Sensor_TX_INT_REG 00E1            UART_Sensor_TX_INT_MASK 0004  
            UART_Sensor_EnableInt 2F84         UART_Sensor_RX_CONTROL_REG 002F           _bUART_Sensor_ReadRxData 2FB8  
       UART_Sensor_TX_CONTROL_REG 002B             _UART_Sensor_EnableInt 2F84             UART_Sensor_DisableInt 2F8B  
            _UART_Sensor_SendData 2FB2            UART_Sensor_bReadRxData 2FB8                           CLEN_LSB FFFFFFFB  
                         CLEN_MSB FFFFFFFA              _UART_Sensor_cGetChar 301E            UART_Sensor_PutSHexByte 2FFC  
                         CSTR_LSB FFFFFFFD                           CSTR_MSB FFFFFFFC            bfCONTROL_REG_START_BIT 0001  
          _UART_Sensor_DisableInt 2F8B                             ??0000 3016                             ??0001 3075  
                           ??0002 309C                      End_PutString 305E              UART_Sensor_cReadChar 3026  
            UART_Sensor_TxIntMode 2FBE                             HITECH 0002          UART_Sensor_RX_BUFFER_REG 002E  
                  FLAG_PGMODE_01b 0040                    FLAG_PGMODE_10b 0080                             IDX_PP 00D3  
            UART_Sensor_PutString 3053             _UART_Sensor_cReadChar 3026                   UART_Sensor_Stop 2FAB  
           _UART_Sensor_TxIntMode 2FBE                 UART_Sensor_CWrite 3089          bUART_Sensor_ReadRxStatus 2FBB  
         _UART_Sensor_bReadRxData 2FB8              UART_Sensor_iReadChar 303D          bUART_Sensor_ReadTxStatus 2FB5  
           _UART_Sensor_PutString 3053          End_UART_Sensor_cReadChar 303C           _UART_Sensor_PutSHexByte 2FFC  
                _UART_Sensor_Stop 2FAB             _UART_Sensor_iReadChar 303D       UART_Sensor_RX_FRAMING_ERROR 0020  
             UART_Sensor_RX_ERROR 00E0          _UART_Sensor_SetTxIntMode 2F92          SYSTEM_LARGE_MEMORY_MODEL 0001  
        End_UART_Sensor_iReadChar 3052             SYSTEM_MULTIPAGE_STACK 0000               _UART_Sensor_IntCntl 2FD1  
             _UART_Sensor_PutCRLF 30C9                          TOOLCHAIN 0002             UART_Sensor_PutSHexInt 300F  
             _UART_Sensor_PutChar 3016                            CNT_LEN FFFFFFFB               UART_Sensor_SendData 2FB2  
             UART_Sensor_cGetChar 301E          UART_Sensor_bReadRxStatus 2FBB                   FLAG_PGMODE_MASK 00C0  
        UART_Sensor_bReadTxStatus 2FB5                    RAM_USE_CLASS_1 0001                    RAM_USE_CLASS_2 0002  
                  RAM_USE_CLASS_3 0004                    RAM_USE_CLASS_4 0008   UART_Sensor_INT_MODE_TX_COMPLETE 0001  
                          STR_LSB FFFFFFFD                            STR_MSB FFFFFFFC                UART_Sensor_HEX_STR 2FEC  
   bfFUNCTION_REG_TX_INT_MODE_BIT 0010         _bUART_Sensor_ReadRxStatus 2FBB            _UART_Sensor_PutSHexInt 300F  
       _bUART_Sensor_ReadTxStatus 2FB5                  UART_Sensor_Start 2FA4                  UART_Sensor_Write 3063  
              _UART_Sensor_CWrite 3089          UART_Sensor_ENABLE_RX_INT 0001          UART_Sensor_ENABLE_TX_INT 0002  
           UART_Sensor_CPutString 30B7                UART_Sensor_IntCntl 2FD1          UART_Sensor_TX_BUFFER_REG 0029  
              UART_Sensor_PutCRLF 30C9                UART_Sensor_PutChar 3016            UART_Sensor_RX_COMPLETE 0008  
          bUART_Sensor_ReadRxData 2FB8        UART_Sensor_TX_BUFFER_EMPTY 0010            _UART_Sensor_CPutString 30B7  
               _UART_Sensor_Start 2FA4            UART_Sensor_RX_INT_MASK 0008                 _UART_Sensor_Write 3063  
                SYSTEM_STACK_PAGE 0003        UART_Sensor_RX_PARITY_ERROR 0080            UART_Sensor_RX_REG_FULL 0008  
                    FLAG_XIO_MASK 0010         _UART_Sensor_bReadRxStatus 2FBB         SYSTEM_IDXPG_TRACKS_IDX_PP 0001  
       _UART_Sensor_bReadTxStatus 2FB5             UART_Sensor_RX_INT_REG 00E1         SYSTEM_IDXPG_TRACKS_STK_PP 0000  
           UART_Sensor_RX_NO_DATA 0001           UART_Sensor_SetTxIntMode 2F92           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:49 2015
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_Sensor.inc
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  Assembler declarations for the UART user module.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          ;--------------------------------------------------
    14                          ; Constants for UART_Sensor API's
    15                          ;--------------------------------------------------
    16                          
    17                          ;mask value for global int reg bit for TX instance
    18  0004                    UART_Sensor_TX_INT_MASK:                     equ 0x04
    19  00E1                    UART_Sensor_TX_INT_REG:                      equ 0x0e1  ;TX interrupt address
    20  0008                    UART_Sensor_RX_INT_MASK:                     equ 0x08  ;mask value for global int reg bit for RX ins
                                tance
    21  00E1                    UART_Sensor_RX_INT_REG:                      equ 0x0e1  ;RX interrupt address
    22                          
    23  0000                    UART_Sensor_RXBUF_ENABLE:                    equ 0
    24                          
    25                          ; Interrupt control masks
    26  0001                    UART_Sensor_ENABLE_RX_INT:                   equ 0x01
    27  0000                    UART_Sensor_DISABLE_RX_INT:                  equ 0x00
    28  0002                    UART_Sensor_ENABLE_TX_INT:                   equ 0x02
    29  0000                    UART_Sensor_DISABLE_TX_INT:                  equ 0x00
    30                          
    31  0000                    UART_Sensor_INT_MODE_TX_REG_EMPTY:           equ 0x00
    32  0001                    UART_Sensor_INT_MODE_TX_COMPLETE:            equ 0x01
    33                          
    34  0020                    UART_Sensor_RX_IGNORE_BELOW:                 equ 0x20
    35  0010                    UART_Sensor_RX_BUFFER_SIZE:                  equ 0x10
    36  000D                    UART_Sensor_CMD_TERM:                        equ 0xd
    37  0020                    UART_Sensor_DELIMITER:                       equ 0x20
    38  0000                    UART_Sensor_BACKSPACE_ENABLE:                equ 0x0
    39                          
    40                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                          ;       WARNING WARNING WARNING
    42                          ; The following equates are for backwards
    43                          ; compatibility only and should not be used
    44                          ; for new designs.
    45                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                          
    47                          ;------------------------------------
    48                          ;  Parity masks
    49                          ;------------------------------------
    50  0000                    UART_PARITY_NONE:       equ   00h
    51  0002                    UART_PARITY_EVEN:       equ   02h
    52  0006                    UART_PARITY_ODD:        equ   06h
    53                          
    54                          ;------------------------------------
    55                          ;  TX Status Register masks
    56                          ;------------------------------------
    57  0020                    UART_TX_COMPLETE:       equ   20h
    58  0010                    UART_TX_BUFFER_EMPTY:   equ   10h
    59                          
    60                          ;------------------------------------
    61                          ;  RX Status Register masks
    62                          ;------------------------------------
    63  0010                    UART_RX_ACTIVE:         equ   10h
    64  0008                    UART_RX_COMPLETE:       equ   08h
    65  0080                    UART_RX_PARITY_ERROR:   equ   80h
    66  0040                    UART_RX_OVERRUN_ERROR:  equ   40h
    67  0020                    UART_RX_FRAMING_ERROR:  equ   20h
    68  00E0                    UART_RX_NO_ERROR:       equ   E0h
    69                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                          ;             END WARNING
    71                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    72                          
    73                          
    74                          
    75                          ;------------------------------------
    76                          ;  Parity masks
    77                          ;------------------------------------
    78  0000                    UART_Sensor_PARITY_NONE:                equ   00h
    79  0002                    UART_Sensor_PARITY_EVEN:                equ   02h
    80  0006                    UART_Sensor_PARITY_ODD:                 equ   06h
    81                          
    82                          ;------------------------------------
    83                          ;  TX Status Register masks
    84                          ;------------------------------------
    85  0020                    UART_Sensor_TX_COMPLETE:                equ   20h
    86  0010                    UART_Sensor_TX_BUFFER_EMPTY:            equ   10h
    87                          
    88                          ;------------------------------------
    89                          ;  RX Status Register masks
    90                          ;------------------------------------
    91  0010                    UART_Sensor_RX_ACTIVE:                  equ   10h
    92  0008                    UART_Sensor_RX_COMPLETE:                equ   08h
    93  0008                    UART_Sensor_RX_REG_FULL:                equ   08h
    94  0080                    UART_Sensor_RX_PARITY_ERROR:            equ   80h
    95  0040                    UART_Sensor_RX_OVERRUN_ERROR:           equ   40h
    96  0020                    UART_Sensor_RX_FRAMING_ERROR:           equ   20h
    97  00E0                    UART_Sensor_RX_ERROR:                   equ   E0h
    98  0001                    UART_Sensor_RX_ENABLE:                  equ   01h
    99                          
   100  00F0                    UART_Sensor_RX_BUF_ERROR:               equ   F0h  ; Mask for any Rx that may occur.
   101  0010                    UART_Sensor_RX_BUF_OVERRUN:             equ   10h  ; This indicates the software buffer has
   102                                                                                  ; been over run.
   103  0001                    UART_Sensor_RX_BUF_CMDTERM:             equ   01h  ; Command terminator has been received.
   104                          
   105  0001                    UART_Sensor_RX_NO_DATA:                 equ   01h
   106  00E0                    UART_Sensor_RX_NO_ERROR:                equ   E0h
   107                          
   108                          
   109                          ;--------------------------------------------------
   110                          ; Registers Address Constants for UART_Sensor
   111                          ;--------------------------------------------------
   112                          ;---------------------------------
   113                          ;  Registers used by TX
   114                          ;---------------------------------
   115  002B                    UART_Sensor_TX_CONTROL_REG: equ 2bh            ; Control register
   116  0028                    UART_Sensor_TX_SHIFT_REG:   equ 28h               ; TX Shift Register register
   117  0029                    UART_Sensor_TX_BUFFER_REG:  equ 29h               ; TX Buffer Register
   118  0028                    UART_Sensor_TX_FUNC_REG:    equ 28h     ; Function register
   119  0029                    UART_Sensor_TX_INPUT_REG:   equ 29h            ; Input register
   120  002A                    UART_Sensor_TX_OUTPUT_REG:  equ 2ah           ; Output register
   121                          
   122                          ;---------------------------------
   123                          ;  Registers used by RX
   124                          ;---------------------------------
   125  002F                    UART_Sensor_RX_CONTROL_REG: equ 2fh            ; Control register
   126  002C                    UART_Sensor_RX_SHIFT_REG:   equ 2ch               ; RX Shift Register register
   127  002E                    UART_Sensor_RX_BUFFER_REG:  equ 2eh               ; RX Buffer Register
   128  002C                    UART_Sensor_RX_FUNC_REG:    equ 2ch     ; Function register
   129  002D                    UART_Sensor_RX_INPUT_REG:   equ 2dh            ; Input register
   130                          UART_Sensor_RX_OUTPUT_REG:  equ 2eh           ; Output register
      + 002E                    UART_Sensor_RX_OUTPUT_REG	equ	46
      + 3C8E                    ; end of file UART_Sensor.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410                             endm
      + 3C8E                    
      + 3C8E                    ; end of file Memory.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144+                         
   145+                         ; old declarations DO NOT USE
   146+ 0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147+ 0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228+ 00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229+ 00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823  3C8E                        endm
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;  FILENAME:   UART_SensorINT.asm
     4                          ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
     5                          ;;  Generated by PSoC Designer 5.4.2946
     6                          ;;
     7                          ;;  DESCRIPTION:  UART Interrupt Service Routine.
     8                          ;;-----------------------------------------------------------------------------
     9                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    10                          ;;*****************************************************************************
    11                          ;;*****************************************************************************
    12                          
    13                          
    14                          include "UART_Sensor.inc"
    15                          include "memory.inc"
    16                          include "m8c.inc"
    17                          
    18                          ;-----------------------------------------------
    19                          ;  Global Symbols
    20                          ;-----------------------------------------------
    21                          export  _UART_Sensor_TX_ISR
    22                          export  _UART_Sensor_RX_ISR
    23                          
    24                          IF (UART_Sensor_RXBUF_ENABLE)
    25                          export  UART_Sensor_aRxBuffer
    26                          export _UART_Sensor_aRxBuffer
    27                          export  UART_Sensor_bRxCnt
    28                          export _UART_Sensor_bRxCnt
    29                          export  UART_Sensor_fStatus
    30                          export _UART_Sensor_fStatus
    31                          ENDIF
    32                          
    33                          
    34                          ;-----------------------------------------------
    35                          ; Variable Allocation
    36                          ;-----------------------------------------------
    37                          AREA InterruptRAM (RAM, REL, CON)
    38                          
    39                          IF (UART_Sensor_RXBUF_ENABLE)
    40                           UART_Sensor_fStatus:
    41                          _UART_Sensor_fStatus:      BLK  1
    42                           UART_Sensor_bRxCnt:
    43                          _UART_Sensor_bRxCnt:       BLK  1
    44                          AREA UART_Sensor_RAM (RAM, REL, CON)
    45                           UART_Sensor_aRxBuffer:
    46                          _UART_Sensor_aRxBuffer:    BLK UART_Sensor_RX_BUFFER_SIZE
    47                          ENDIF
    48                          
    49                          AREA InterruptRAM (RAM, REL, CON)
    50                          
    51                          ;@PSoC_UserCode_INIT@ (Do not change this line.)
    52                          ;---------------------------------------------------
    53                          ; Insert your custom declarations below this banner
    54                          ;---------------------------------------------------
    55                          
    56                          ;------------------------
    57                          ;  Includes
    58                          ;------------------------
    59                          
    60                          
    61                          ;------------------------
    62                          ;  Constant Definitions
    63                          ;------------------------
    64                          
    65                          
    66                          ;------------------------
    67                          ; Variable Allocation
    68                          ;------------------------
    69                          
    70                          
    71                          ;---------------------------------------------------
    72                          ; Insert your custom declarations above this banner
    73                          ;---------------------------------------------------
    74                          ;@PSoC_UserCode_END@ (Do not change this line.)
    75                          
    76                          
    77                          AREA UserModules (ROM, REL, CON)
    78                          
    79                          ;-----------------------------------------------------------------------------
    80                          ;  FUNCTION NAME: _UART_Sensor_TX_ISR
    81                          ;
    82                          ;  DESCRIPTION:
    83                          ;     UART TX interrupt handler for instance UART_Sensor.
    84                          ;
    85                          ;     This is a place holder function.  If the user requires use of an interrupt
    86                          ;     handler for this function, then place code where specified.
    87                          ;-----------------------------------------------------------------------------
    88                          
    89  30D2                    _UART_Sensor_TX_ISR:
    90                             ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
    91                             ;---------------------------------------------------
    92                             ; Insert your custom assembly code below this banner
    93                             ;---------------------------------------------------
    94                             ;   NOTE: interrupt service routines must preserve
    95                             ;   the values of the A and X CPU registers.
    96                             
    97                             ;---------------------------------------------------
    98                             ; Insert your custom assembly code above this banner
    99                             ;---------------------------------------------------
   100                             
   101                             ;---------------------------------------------------
   102                             ; Insert a lcall to a C function below this banner
   103                             ; and un-comment the lines between these banners
   104                             ;---------------------------------------------------
   105                             
   106                             ;PRESERVE_CPU_CONTEXT
   107                             ;lcall _My_C_Function
   108                             ;RESTORE_CPU_CONTEXT
   109                             
   110                             ;---------------------------------------------------
   111                             ; Insert a lcall to a C function above this banner
   112                             ; and un-comment the lines between these banners
   113                             ;---------------------------------------------------
   114                             ;@PSoC_UserCode_END@ (Do not change this line.)
   115  30D2  7E                   reti
   116                          
   117                          
   118                          ;-----------------------------------------------------------------------------
   119                          ;  FUNCTION NAME: _UART_Sensor_RX_ISR
   120                          ;
   121                          ;  DESCRIPTION:
   122                          ;     UART RX interrupt handler for instance UART_Sensor.
   123                          ;     This ISR handles the background processing of received characters if
   124                          ;     the buffer is enabled.
   125                          ;
   126                          ;
   127                          ;  The following assumes that the RX buffer feature has been enabled.
   128                          ;
   129                          ;  SIDE EFFECTS:
   130                          ;     There are 3 posible errors that may occur with the serial port.
   131                          ;      1) Parity Error
   132                          ;      2) Framing Error
   133                          ;      3) OverRun Error
   134                          ;
   135                          ;  This user module check for parity and framing error.  If either of these
   136                          ;  two errors are detected, the data is read and ignored.  When an overRun
   137                          ;  error occurs, the last byte was lost, but the current byte is valid.  For
   138                          ;  this reason this error is ignored at this time.  Code could be added to
   139                          ;  this ISR to set a flag if an error condition occurs.
   140                          ;
   141                          ;  THEORY of OPERATION:
   142                          ;     When using the RX buffer feature, the ISR collects received characters
   143                          ;     in a buffer until the user defined command terminator is detected.  After
   144                          ;     the command terminator is detected, the command bit is set and all other
   145                          ;     characters will be ignored until the command bit is reset.  Up to
   146                          ;     buffer_size - 1 characters will be collected waiting for a command
   147                          ;     terminator.  After that, the characters will be discarded, although
   148                          ;     a command determinator will still cause the command bit to be set.
   149                          ;
   150                          ;-----------------------------------------------------------------------------
   151  30D3                    _UART_Sensor_RX_ISR:
   152                          
   153                             ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
   154                             ;---------------------------------------------------
   155                             ; Insert your custom assembly code below this banner
   156                             ;---------------------------------------------------
   157                             ;   NOTE: interrupt service routines must preserve
   158                             ;   the values of the A and X CPU registers.
   159                             
   160                             ;---------------------------------------------------
   161                             ; Insert your custom assembly code above this banner
   162                             ;---------------------------------------------------
   163                             
   164                             ;---------------------------------------------------
   165                             ; Insert a lcall to a C function below this banner
   166                             ; and un-comment the lines between these banners
   167                             ;---------------------------------------------------
   168                             
   169                             ;PRESERVE_CPU_CONTEXT
   170                             ;lcall _My_C_Function
   171                             ;RESTORE_CPU_CONTEXT
   172                             
   173                             ;---------------------------------------------------
   174                             ; Insert a lcall to a C function above this banner
   175                             ; and un-comment the lines between these banners
   176                             ;---------------------------------------------------
   177                             ;@PSoC_UserCode_END@ (Do not change this line.)
   178                          
   179                          IF (UART_Sensor_RXBUF_ENABLE)
   180                             push A
   181                             push X
   182                             
   183                             IF SYSTEM_LARGE_MEMORY_MODEL
   184                                REG_PRESERVE IDX_PP
   185                             ENDIF
   186                             
   187                             mov  X,[UART_Sensor_bRxCnt]                             ; Load X with byte counter
   188                             mov  A,REG[UART_Sensor_RX_CONTROL_REG]                  ; Read the control register
   189                             push A                                                  ; Store copy for later test
   190                                                                                     ; IF real RX interrupt
   191                             and  A,UART_Sensor_RX_REG_FULL                          ; Did really really get an IRQ
   192                             jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
   193                             pop  A                                                  ; Restore stack
   194                             jmp  .RESTORE_IDX_PP
   195                          
   196                          .UARTRX_ReadRx:
   197                             pop  A                                                  ; Restore status flags
   198                                                                                     ; IF there is no error, get data
   199                                                                                     ; Check for parity or framing error
   200                             and  A,UART_Sensor_RX_ERROR
   201                             jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
   202                          
   203                             or   [UART_Sensor_fStatus],A                            ; Set error flags (parity,framing,overrun
                                ) bits
   204                             tst  REG[UART_Sensor_RX_BUFFER_REG], 0x00               ; Read the data buffer to clear it.
   205                             and  A,UART_Sensor_RX_FRAMING_ERROR                     ; Check for framing error special case
   206                             jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
   207                          
   208                                                                                     ; Disable and re-enable RX to reset after
   209                                                                                     ; framing error.
   210                             and   REG[UART_Sensor_RX_CONTROL_REG], ~UART_Sensor_RX_ENABLE   ; Disable RX
   211                             or    REG[UART_Sensor_RX_CONTROL_REG],  UART_Sensor_RX_ENABLE   ; Enable RX
   212                             jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
   213                          
   214                          
   215                          .UARTRX_NO_ERROR:
   216                             mov  A,REG[UART_Sensor_RX_BUFFER_REG ]                  ; Read the data buffer
   217                          
   218                                                                                     ; IF buffer not full
   219                             tst  [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM     ; Check for buffer full
   220                             jnz  .RESTORE_IDX_PP                                    ; All done
   221                          
   222                             cmp  A,UART_Sensor_CMD_TERM                             ; Check for End of command
   223                             jnz  .UARTRX_CHK_BACKSPACE
   224                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_CMDTERM   ; Set command ready bit
   225                          
   226                          
   227                          
   228                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer
   229                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   230                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data
   231                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   232                             jmp  .RESTORE_IDX_PP
   233                          
   234                          .UARTRX_CHK_BACKSPACE:                                     ; 
   235                          IF(UART_Sensor_BACKSPACE_ENABLE)                           ; Enable if backspace/delete mode
   236                             cmp  A,UART_Sensor_BACKSPACE_ENABLE                     ; Check for backspace character
   237                             jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
   238                             cmp  [UART_Sensor_bRxCnt],00h                           ; Check if buffer empty
   239                             jz   .RESTORE_IDX_PP                                    ; 
   240                             dec  [UART_Sensor_bRxCnt]                               ; Decrement buffer count by one.
   241                             jmp  .RESTORE_IDX_PP
   242                          ENDIF                                                      ; 
   243                          
   244                          .UARTRX_IGNORE:
   245                          IF(UART_Sensor_RX_IGNORE_BELOW)                            ; Ignore charaters below this value
   246                             cmp  A,UART_Sensor_RX_IGNORE_BELOW                      ; If ignore char is set to 0x00, do not
   247                             jc   .RESTORE_IDX_PP                                    ; ignore any characters.
   248                          ENDIF
   249                          
   250                          .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
   251                          	
   252                             RAM_SETPAGE_IDX >UART_Sensor_aRxBuffer                  ;   using idexed address mode
   253                             cmp  [UART_Sensor_bRxCnt],(UART_Sensor_RX_BUFFER_SIZE - 1)
   254                             jc   .UARTRX_ISR_GETDATA
   255                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   256                             mov  [X + UART_Sensor_aRxBuffer],00h                    ; Zero out last data in the buffer
   257                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   258                             or   [UART_Sensor_fStatus],UART_Sensor_RX_BUF_OVERRUN   ; Set error flags (parity,framing,overrun
                                ) bits
   259                             jmp  .RESTORE_IDX_PP
   260                          
   261                          .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of comm
                                and
   262                                                                                     ; X is already loaded with pointer
   263                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
   264                             mov  [X+UART_Sensor_aRxBuffer],A                        ; store data in array
   265                             RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
   266                             inc  X                                                  ; Inc the pointer
   267                             mov  [UART_Sensor_bRxCnt],X                             ; Restore the pointer
   268                                                                                     ; ENDIF max string size
   269                          .RESTORE_IDX_PP:
   270                             IF SYSTEM_LARGE_MEMORY_MODEL
   271                                REG_RESTORE IDX_PP
   272                             ENDIF
   273                          
   274                          .END_UARTRX_ISR:
   275                             pop  X
   276                             pop  A
   277                          
   278                          ENDIF
   279                          
   280  30D3                    UART_Sensor_RX_ISR_END:
   281  30D3  7E                   reti
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:49 2015
                           HITECH 0002                          TOOLCHAIN 0002                _UART_Sensor_RX_ISR 30D3  
              _UART_Sensor_TX_ISR 30D2             UART_Sensor_RX_ISR_END 30D3           UART_Sensor_RXBUF_ENABLE 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:15:50 2015
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;=============================================================================
     4                          ;  FILENAME:   GlobalParams.inc
     5                          ;  DATE:       27 September 2004
     6                          ;
     7                          ;  DESCRIPTION:
     8                          ;  Constants describing many of the global parameter settings.
     9                          ;  This file contains equates to support oscillator register initialization
    10                          ;  for the CY8C22345
    11                          ;
    12                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;
    14                          ; NOTES:
    15                          ; Do not modify this file. It is generated by PSoC Designer each time the
    16                          ; generate application function is run. The values of the parameters in this
    17                          ; file can be modified by changing the values of the global parameters in the
    18                          ; device editor.
    19                          ;=============================================================================
    20                          ;
    21                          
    22  0003                    CPU_CLOCK:				equ	3h	;CPU clock value
    23  0007                    CPU_CLOCK_MASK:			equ	7h	;CPU clock mask
    24  0003                    CPU_CLOCK_JUST:			equ	3h	;CPU clock value justified
    25  0000                    SELECT_32K:				equ	0h		;32K select value
    26  0080                    SELECT_32K_MASK:		equ	80h		;32K select mask
    27  0000                    SELECT_32K_JUST:		equ	0h		;32K select value justified
    28  0000                    PLL_MODE:				equ	0h		;PLL mode value
    29  0040                    PLL_MODE_MASK:			equ	40h		;PLL mode mask
    30  0000                    PLL_MODE_JUST:			equ	0h		;PLL mode value justified
    31                          
    32  0002                    SLEEP_TIMER:			equ	2h		;Sleep Timer value
    33  0018                    SLEEP_TIMER_MASK:		equ	18h		;Sleep Timer mask
    34  0010                    SLEEP_TIMER_JUST:		equ	10h		;Sleep Timer value justified
    35                          
    36  0000                    SLEEP_TIMER2:			equ	0h		;Sleep Extend value
    37  0010                    SLEEP_TIMER_MASK2:		equ	10h		;Sleep Extend mask
    38  0000                    SLEEP_TIMER_JUST2:		equ	0h		;Sleep Extend value justified
    39                          
    40  0001                    SWITCH_MODE_PUMP:		equ	1h	;Switch Mode Pump setting
    41  0080                    SWITCH_MODE_PUMP_MASK:	equ	80h	;Switch Mode Pump mask
    42  0080                    SWITCH_MODE_PUMP_JUST:	equ	80h	;Switch Mode Pump justified
    43  0000                    LVD_TBEN:               equ 0   ; Low Voltage Throttle-back enable value
    44  0008                    LVD_TBEN_MASK:          equ 8  ; Low Voltage Throttle-back enable mask
    45  0000                    LVD_TBEN_JUST:          equ 0  ; Low Voltage Throttle-back enable justified
    46  0007                    TRIP_VOLTAGE:			equ	7h   ;Trip Voltage value
    47  0007                    TRIP_VOLTAGE_MASK:      equ 7h  ;Trip Voltage mask
    48  0007                    TRIP_VOLTAGE_JUST:      equ 7h  ;Trip Voltage justified
    49                                                        
    50  0010                    POWER_SETTING:			equ	10h
    51  0010                    POWER_SET_5V0:          equ 10h  ; MASK for 5.0V operation, fast and slow 
    52  0010                    POWER_SET_5V0_24MHZ:    equ 10h  ; Power Setting value for 5.0V fast      
    53  0011                    POWER_SET_5V0_6MHZ:     equ 11h  ; Power Setting value for 5.0V slow      
    54  0008                    POWER_SET_3V3:          equ 08h  ; MASK for 3.3V operation, fast and slow 
    55  0008                    POWER_SET_3V3_24MHZ:    equ 08h	 ; Power Setting value for 3.3V fast      
    56  0009                    POWER_SET_3V3_6MHZ:     equ 09h	 ; Power Setting value for 3.3V slow      
    57  0006                    POWER_SET_2V7:          equ 06h  ; MASK for 2.7V operation, fast and slow
    58  0004                    POWER_SET_2V7_12MHZ:    equ 04h	 ; MASK for 2.7V, 12MHZ operation
    59  0002                    POWER_SET_2V7_6MHZ:     equ 02h	 ; MASK for 2.7V,  6MHZ operation
    60  0001                    POWER_SET_SLOW_IMO:     equ 01h  ; MASK for slow Internal Main Oscillator (IMO) 
    61                          
    62  0001                    COMM_RX_PRESENT:		equ	1	;1 = TRUE
    63  0001                    WATCHDOG_ENABLE:		equ 1	;Watchdog Enable 1 = Enable
    64                          
    65  0007                    CLOCK_DIV_VC1:			equ	7h	;VC1 clock divider
    66  00F0                    CLOCK_DIV_VC1_MASK:		equ	f0h	;VC1 clock divider mask
    67  0070                    CLOCK_DIV_VC1_JUST:		equ	70h	;VC1 clock divider justified
    68  000F                    CLOCK_DIV_VC2:			equ	fh	;VC2 clock divider
    69  000F                    CLOCK_DIV_VC2_MASK:		equ	fh	;VC2 clock divider mask
    70  000F                    CLOCK_DIV_VC2_JUST:		equ	fh	;VC2 clock divider justified
    71  0001                    CLOCK_INPUT_VC3:		equ	1h	;VC3 clock source
    72  0003                    CLOCK_INPUT_VC3_MASK:	equ	3h	;VC3 clock source mask
    73  0001                    CLOCK_INPUT_VC3_JUST:	equ	1h	;VC3 clock source justified
    74  0026                    CLOCK_DIV_VC3:			equ	26h	;VC3 clock divider
    75  00FF                    CLOCK_DIV_VC3_MASK:		equ	ffh	;VC3 clock divider mask
    76  0026                    CLOCK_DIV_VC3_JUST:		equ	26h	;VC3 clock divider justified
    77  0000                    SYSCLK_SOURCE:				equ	(0h | 0h)	;SysClk Source setting
    78  0006                    SYSCLK_SOURCE_MASK:			equ	(4h | 2h)	;SysClk Source setting mask
    79  0000                    SYSCLK_SOURCE_JUST:			equ	(0h | 0h)	;SysClk Source setting justified
    80  0000                    SYSCLK_2_DISABLE:				equ	0h	;SysClk*2 Disable setting
    81  0001                    SYSCLK_2_DISABLE_MASK:			equ	1h	;SysClk*2 Disable setting mask
    82  0000                    SYSCLK_2_DISABLE_JUST:			equ	0h	;SysClk*2 Disable setting justified
    83                          ;
    84                          ; register initial values
    85                          ;
    86  0000                    ANALOG_IO_CONTROL:		equ 0h	;Analog IO Control register (ABF_CR)
    87  0011                    PORT_0_GLOBAL_SELECT:	equ 11h	;Port 0 global select register (PRT0GS)
    88  00FE                    PORT_0_DRIVE_0:			equ feh	;Port 0 drive mode 0 register (PRT0DM0)
    89  0001                    PORT_0_DRIVE_1:			equ 1h	;Port 0 drive mode 1 register (PRT0DM1)
    90  0000                    PORT_0_DRIVE_2:			equ 0h	;Port 0 drive mode 2 register (PRT0DM2)
    91  0000                    PORT_0_INTENABLE:		equ 0h	;Port 0 interrupt enable register (PRT0IE)
    92  0000                    PORT_0_INTCTRL_0:		equ 0h	;Port 0 interrupt control 0 register (PRT0IC0)
    93  0000                    PORT_0_INTCTRL_1:		equ 0h	;Port 0 interrupt control 1 register (PRT0IC1)
    94  0000                    PORT_1_GLOBAL_SELECT:	equ 0h	;Port 1 global select register (PRT1GS)
    95  00A0                    PORT_1_DRIVE_0:			equ a0h	;Port 1 drive mode 0 register (PRT1DM0)
    96  00FF                    PORT_1_DRIVE_1:			equ ffh	;Port 1 drive mode 1 register (PRT1DM1)
    97  00FF                    PORT_1_DRIVE_2:			equ ffh	;Port 1 drive mode 2 register (PRT1DM2)
    98  0000                    PORT_1_INTENABLE:		equ 0h	;Port 1 interrupt enable register (PRT1IE)
    99  0000                    PORT_1_INTCTRL_0:		equ 0h	;Port 1 interrupt control 0 register (PRT1IC0)
   100  0000                    PORT_1_INTCTRL_1:		equ 0h	;Port 1 interrupt control 1 register (PRT1IC1)
   101  0011                    PORT_2_GLOBAL_SELECT:	equ 11h	;Port 2 global select register (PRT2GS)
   102  0001                    PORT_2_DRIVE_0:			equ 1h	;Port 2 drive mode 0 register (PRT2DM0)
   103  00FE                    PORT_2_DRIVE_1:			equ feh	;Port 2 drive mode 1 register (PRT2DM1)
   104  00EE                    PORT_2_DRIVE_2:			equ eeh	;Port 2 drive mode 2 register (PRT2DM2)
   105  0000                    PORT_2_INTENABLE:		equ 0h	;Port 2 interrupt enable register (PRT2IE)
   106  0000                    PORT_2_INTCTRL_0:		equ 0h	;Port 2 interrupt control 0 register (PRT2IC0)
   107  0000                    PORT_2_INTCTRL_1:		equ 0h	;Port 2 interrupt control 1 register (PRT2IC1)
   108  0000                    PORT_3_GLOBAL_SELECT:	equ 0h	;Port 3 global select register (PRT3GS)
   109  0000                    PORT_3_DRIVE_0:			equ 0h	;Port 3 drive mode 0 register (PRT3DM0)
   110  0000                    PORT_3_DRIVE_1:			equ 0h	;Port 3 drive mode 1 register (PRT3DM1)
   111  0000                    PORT_3_DRIVE_2:			equ 0h	;Port 3 drive mode 2 register (PRT3DM2)
   112  0000                    PORT_3_INTENABLE:		equ 0h	;Port 3 interrupt enable register (PRT3IE)
   113  0000                    PORT_3_INTCTRL_0:		equ 0h	;Port 3 interrupt control 0 register (PRT3IC0)
   114                          PORT_3_INTCTRL_1:		equ 0h	;Port 3 interrupt control 1 register (PRT3IC1)
      + 0000                    PORT_3_INTCTRL_1	equ	0
      + 3C8E                    ; end of file GlobalParams.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8C.INC -- Microcontroller Device System Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;  This file provides address constants, bit field masks and a set of macro
     8                          ;;;  facilities for the Cypress Semiconductor CY8C22045 Microcontroller devices.
     9                          ;;;
    10                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                          
    12                          ;;=============================================================================
    13                          ;; Definition of abbreviations used in the descriptions below
    14                          ;;  (RW)   The register or bit supports reads and writes
    15                          ;;  (W)    The register or bit is write-only
    16                          ;;  (R)    The register or bit is read-only
    17                          ;;  (#)    Access to the register is bit specific (see the family datasheet)
    18                          ;;  (RC)   The register or bit can be read, but writing a 0 will clear it,
    19                          ;;         writing a 1 will have no effect.
    20                          ;;=============================================================================
    21                          
    22                          ;;=============================================================================
    23                          ;;      System Registers
    24                          ;;=============================================================================
    25                          
    26                          ;----------------------------
    27                          ;  Flag Register Bit Fields
    28                          ;----------------------------
    29  00C0                    FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
    30  0000                    FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
    31  0040                    FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
    32  0080                    FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
    33  00C0                    FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
    34  0000                    FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
    35  0040                    FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
    36  0080                    FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
    37  00C0                    FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
    38  0010                    FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
    39  0008                    FLAG_SUPER:        equ 08h     ; Supervisor Mode
    40  0004                    FLAG_CARRY:        equ 04h     ; Carry Condition Flag
    41  0002                    FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
    42  0001                    FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
    43                          
    44                          
    45                          ;;=============================================================================
    46                          ;;      Register Space, Bank 0
    47                          ;;=============================================================================
    48                          
    49                          ;------------------------------------------------
    50                          ;  Port Registers
    51                          ;  Note: Also see this address range in Bank 1.
    52                          ;------------------------------------------------
    53                          ; Port 0
    54  0000                    PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
    55  0001                    PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
    56  0002                    PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
    57  0003                    PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
    58                          ; Port 1
    59  0004                    PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
    60  0005                    PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
    61  0006                    PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
    62  0007                    PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
    63                          ; Port 2
    64  0008                    PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
    65  0009                    PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
    66  000A                    PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
    67  000B                    PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
    68                          ; Port 3
    69  000C                    PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
    70  000D                    PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
    71  000E                    PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
    72  000F                    PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
    73                          ; Port 4
    74  0010                    PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
    75  0011                    PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
    76  0012                    PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
    77  0013                    PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
    78                          
    79                          ;------------------------------------------------
    80                          ;  Digital PSoC(tm) block Registers
    81                          ;  Note: Also see this address range in Bank 1.
    82                          ;------------------------------------------------
    83                          ; Digital PSoC block 00, Basic Type C
    84  0020                    DBC00DR0:     equ 20h          ; data register 0                          (#)
    85  0021                    DBC00DR1:     equ 21h          ; data register 1                          (W)
    86  0022                    DBC00DR2:     equ 22h          ; data register 2                          (RW)
    87  0023                    DBC00CR0:     equ 23h          ; control & status register 0              (#)
    88                          
    89                          ; Digital PSoC block 01, Basic Type C
    90  0024                    DBC01DR0:     equ 24h          ; data register 0                          (#)
    91  0025                    DBC01DR1:     equ 25h          ; data register 1                          (W)
    92  0026                    DBC01DR2:     equ 26h          ; data register 2                          (RW)
    93  0027                    DBC01CR0:     equ 27h          ; control & status register 0              (#)
    94                          
    95                          ; Digital PSoC block 02, Communications Type C
    96  0028                    DCC02DR0:     equ 28h          ; data register 0                          (#)
    97  0029                    DCC02DR1:     equ 29h          ; data register 1                          (W)
    98  002A                    DCC02DR2:     equ 2Ah          ; data register 2                          (RW)
    99  002B                    DCC02CR0:     equ 2Bh          ; control & status register 0              (#)
   100                          
   101                          ; Digital PSoC block 03, Communications Type C
   102  002C                    DCC03DR0:     equ 2Ch          ; data register 0                          (#)
   103  002D                    DCC03DR1:     equ 2Dh          ; data register 1                          (W)
   104  002E                    DCC03DR2:     equ 2Eh          ; data register 2                          (RW)
   105  002F                    DCC03CR0:     equ 2Fh          ; control & status register 0              (#)
   106                          
   107                          ; Digital PSoC block 10, Basic Type C
   108  0030                    DBC10DR0:     equ 30h          ; data register 0                          (#)
   109  0031                    DBC10DR1:     equ 31h          ; data register 1                          (W)
   110  0032                    DBC10DR2:     equ 32h          ; data register 2                          (RW)
   111  0033                    DBC10CR0:     equ 33h          ; control & status register 0              (#)
   112                          
   113                          ; Digital PSoC block 11, Basic Type C
   114  0034                    DBC11DR0:     equ 34h          ; data register 0                          (#)
   115  0035                    DBC11DR1:     equ 35h          ; data register 1                          (W)
   116  0036                    DBC11DR2:     equ 36h          ; data register 2                          (RW)
   117  0037                    DBC11CR0:     equ 37h          ; control & status register 0              (#)
   118                          
   119                          ; Digital PSoC block 12, Communications Type C
   120  0038                    DCC12DR0:     equ 38h          ; data register 0                          (#)
   121  0039                    DCC12DR1:     equ 39h          ; data register 1                          (W)
   122  003A                    DCC12DR2:     equ 3Ah          ; data register 2                          (RW)
   123  003B                    DCC12CR0:     equ 3Bh          ; control & status register 0              (#)
   124                          
   125                          ; Digital PSoC block 13, Communications Type C
   126  003C                    DCC13DR0:     equ 3Ch          ; data register 0                          (#)
   127  003D                    DCC13DR1:     equ 3Dh          ; data register 1                          (W)
   128  003E                    DCC13DR2:     equ 3Eh          ; data register 2                          (RW)
   129  003F                    DCC13CR0:     equ 3Fh          ; control & status register 0              (#)
   130                          
   131                          ;-------------------------------------
   132                          ;  Analog Control Registers
   133                          ;-------------------------------------
   134  0060                    AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
   135  00C0                    AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
   136  0030                    AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
   137  000C                    AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
   138  0003                    AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
   139                          
   140  0061                    AMUX_CFG:      equ 61h          ; Analog MUX Configuration
   141  0030                    AMUX_CFG_INTCAP:       equ 30h    ;
   142  000E                    AMUX_CFG_MUXCLK:  	  equ 0Eh	 ;
   143  0001                    AMUX_CFG_EN:		  	  equ 01h	 ;
   144                          
   145                          ; old declarations DO NOT USE
   146  0061                    AMUXCFG:      equ 61h          ; Analog MUX Configuration
   147  0030                    AMUXCFG_INTCAP:       equ 30h    ;
   148  000E                    AMUXCFG_MUXCLK:  	  equ 0Eh	 ;
   149  0001                    AMUXCFG_EN:		  	  equ 01h	 ;
   150                          
   151  0062                    PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
   152  0038                    PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
   153  0006                    PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
   154  0001                    PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
   155                          
   156  0063                    ARF_CR:       equ 63h          ; Analog Reference Control
   157                          
   158  0064                    CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
   159  0080                    CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
   160  0040                    CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
   161  0020                    CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
   162  0010                    CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
   163  0008                    CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
   164  0004                    CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
   165  0002                    CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
   166  0001                    CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
   167                          
   168  0066                    CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
   169  0020                    CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator output latch
   170  0010                    CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator output latch
   171                          
   172  0068                    ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
   173  0080                    ADC0_CR_CMPST:        equ 80h    ;
   174  0040                    ADC0_CR_LOREN:        equ 40h    ;
   175  0020                    ADC0_CR_SHEN:         equ 20h    ;
   176  0008                    ADC0_CR_CBSRC:        equ 08h    ;
   177  0004                    ADC0_CR_ADCM:         equ 04h    ;
   178  0001                    ADC0_CR_EN:	          equ 01h    ;
   179                          
   180  0069                    ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
   181  0080                    ADC1_CR_CMPST:        equ 80h    ;
   182  0040                    ADC1_CR_LOREN:        equ 40h    ;
   183  0020                    ADC1_CR_SHEN:         equ 20h    ;
   184  0008                    ADC1_CR_CBSRC:        equ 08h    ;
   185  0004                    ADC1_CR_ADCM:         equ 04h    ;
   186  0001                    ADC1_CR_EN:	          equ 01h    ;
   187                          
   188                          ; Continuous Time PSoC block Type E Row 0 Col 0
   189  0072                    ACE00CR1:     equ 72h          ; Control register 1                       (RW)
   190  0073                    ACE00CR2:     equ 73h          ; Control register 2                       (RW)
   191                          
   192                          ; Continuous Time PSoC block Type E Row 0 Col 1
   193  0076                    ACE01CR1:     equ 76h          ; Control register 1                       (RW)
   194  0077                    ACE01CR2:     equ 77h          ; Control register 2                       (RW)
   195                          
   196                          ; Switched Cap PSoC blockType E Row 1 Col 0
   197  0080                    ASE10CR0:     equ 80h          ; Control register 0                       (RW)
   198                          
   199                          ; Switched Cap PSoC blockType E Row 1 Col 1
   200  0084                    ASE11CR0:     equ 84h          ; Control register 0                       (RW)
   201                          
   202                          ;-----------------------------------------------
   203                          ;  Global General Purpose Data Registers
   204                          ;-----------------------------------------------
   205  006C                    TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
   206  006D                    TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
   207  006E                    TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
   208  006F                    TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
   209                          
   210                          ;------------------------------------------------
   211                          ;  Row Digital Interconnects
   212                          ;
   213                          ;  Note: the following registers are mapped into
   214                          ;  both register bank 0 AND register bank 1.
   215                          ;------------------------------------------------
   216                          
   217  00B0                    RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
   218  00B1                    RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
   219  00B2                    RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
   220  00B3                    RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
   221  00B4                    RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
   222  00B5                    RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
   223  00B6                    RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
   224                          
   225  00B8                    RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
   226  00B9                    RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
   227  00BA                    RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
   228  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   229  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   230  00BD                    RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
   231  00BE                    RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
   232                          
   233                          ;-----------------------------------------------
   234                          ;  Ram Page Pointers
   235                          ;-----------------------------------------------
   236  00D0                    CUR_PP:      equ 0D0h           ; Current   Page Pointer
   237  00D1                    STK_PP:      equ 0D1h           ; Stack     Page Pointer
   238  00D3                    IDX_PP:      equ 0D3h           ; Index     Page Pointer
   239  00D4                    MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
   240  00D5                    MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
   241                          
   242                          ;------------------------------------------------
   243                          ;  I2C Configuration Registers
   244                          ;------------------------------------------------
   245  00D6                    I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
   246  0040                    I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
   247  0020                    I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
   248  0010                    I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
   249  0000                    I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
   250  0004                    I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
   251  0008                    I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
   252  000C                    I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
   253  0002                    I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
   254  0001                    I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
   255                          
   256  00D7                    I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
   257  0080                    I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
   258  0040                    I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
   259  0020                    I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
   260  0010                    I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
   261  0008                    I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
   262  0004                    I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
   263  0002                    I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
   264  0001                    I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
   265                          
   266  00D8                    I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
   267                          
   268  00D9                    I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
   269  0008                    I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
   270  0004                    I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
   271  0002                    I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
   272  0001                    I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
   273                          
   274                          ;------------------------------------------------
   275                          ;  System and Global Resource Registers
   276                          ;------------------------------------------------
   277  00DA                    INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
   278                                                         ; Use INT_MSK0 bit field masks
   279  00DB                    INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
   280                                                         ; Use INT_MSK1 bit field masks
   281  00DC                    INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
   282                                                         ; Use INT_MSK2 bit field masks
   283  00DD                    INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
   284                                                         ; Use INT_MSK3 bit field masks
   285                          
   286  00DE                    INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
   287  0080                    INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
   288  0001                    INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
   289                          
   290  00E0                    INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
   291  0080                    INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
   292  0040                    INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
   293  0020                    INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
   294  0010                    INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
   295  0008                    INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
   296  0004                    INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
   297  0002                    INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
   298  0001                    INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
   299                          
   300  00E1                    INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
   301  0080                    INT_MSK1_DCC13:            equ 80h ; MASK: enable/disable DCC13 block interrupt
   302  0040                    INT_MSK1_DCC12:            equ 40h ; MASK: enable/disable DCC12 block interrupt
   303  0020                    INT_MSK1_DBC11:            equ 20h ; MASK: enable/disable DBC11 block interrupt
   304  0010                    INT_MSK1_DBC10:            equ 10h ; MASK: enable/disable DBC10 block interrupt
   305  0008                    INT_MSK1_DCC03:            equ 08h ; MASK: enable/disable DCC03 block interrupt
   306  0004                    INT_MSK1_DCC02:            equ 04h ; MASK: enable/disable DCC02 block interrupt
   307  0002                    INT_MSK1_DBC01:            equ 02h ; MASK: enable/disable DBC01 block interrupt
   308  0001                    INT_MSK1_DBC00:            equ 01h ; MASK: enable/disable DBC00 block interrupt
   309                          
   310  00DF                    INT_MSK2:     equ DFh			; Custom block Mask Register			   (RW)
   311  0010                    INT_MSK2_SARADC:           equ 10h ; MASK: enable/disable SARADC block interrupt
   312  0020                    INT_MSK2_CSD0:             equ 20h ; MASK: enable/disable CSD0 block interrupt
   313  0040                    INT_MSK2_CSD1:             equ 40h ; MASK: enable/disable CSD1 block interrupt
   314  0080                    INT_MSK2_RTC:              equ 80h ; MASK: enable/disable RTC block interrupt
   315                          
   316  00E2                    INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
   317  00E3                    RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
   318                          
   319                          ;------------------------------------------------------
   320                          ;  MAC Registers
   321                          ;------------------------------------------------------
   322                          
   323  00E8                    MUL0_X:       equ 0E8h          ; Multiply Input X Register                (W)
   324  00E9                    MUL0_Y:       equ 0E9h          ; Multiply Input Y Register                (W)
   325  00EA                    MUL0_DH:      equ 0EAh          ; Multiply Result High Byte Register       (R)
   326  00EB                    MUL0_DL:      equ 0EBh          ; Multiply Result Low Byte Register        (R)
   327                          
   328  00EC                    ACC0_DR1:     equ 0ECh          ; Accumulator Data Register 1              (RW)
   329  00ED                    ACC0_DR0:     equ 0EDh          ; Accumulator Data Register 0              (RW)
   330  00EE                    ACC0_DR3:     equ 0EEh          ; Accumulator Data Register 3              (RW)
   331  00EF                    ACC0_DR2:     equ 0EFh          ; Accumulator Data Register 2              (RW)
   332                          
   333                          ; DECIMATOR Control Registers
   334  00E6                    DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
   335  00E7                    DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
   336                          
   337                          ;------------------------------------------------------
   338                          ;  System Status and Control Registers
   339                          ;
   340                          ;  Note: The following registers are mapped into both
   341                          ;        register bank 0 AND register bank 1.
   342                          ;------------------------------------------------------
   343  00F7                    CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
   344                                                             ; Use FLAG_ masks defined at top of file
   345                          
   346  00FD                    DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
   347                          
   348  00FE                    CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
   349  0080                    CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
   350  0010                    CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
   351  0008                    CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
   352  0004                    CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
   353  0001                    CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
   354                          
   355  00FF                    CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
   356  0080                    CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
   357  0020                    CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
   358  0010                    CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
   359  0008                    CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
   360  0001                    CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
   361                          
   362                          ;------------------------------------------------------
   363                          ;  Neon Capsense Digital Control Registers
   364                          ;------------------------------------------------------
   365  0050                    CSD0_DR0_L:				equ 50h		; Capsense 0 data low 0				(RW)
   366  0054                    CSD0_DR0_H:				equ 54h		; Capsense 0 data high 0			(RW)
   367  0058                    CSD1_DR0_L:				equ 58h		; Capsense 1 data low 0				(RW)
   368  005C                    CSD1_DR0_H:				equ 5Ch		; Capsense 1 data high 0			(RW)
   369  0051                    CSD0_DR1_L:				equ 51h		; Capsense 0 data low 1				(RW)
   370  0055                    CSD0_DR1_H:				equ 55h		; Capsense 0 data high 1			(RW)
   371  0059                    CSD1_DR1_L:				equ 59h		; Capsense 1 data low 1				(RW)
   372  005D                    CSD1_DR1_H:				equ 5Dh		; Capsense 1 data high 1			(RW)
   373  0052                    CSD0_CNT_L:				equ 52h		; Capsense 0 counter low			(RW)
   374  0056                    CSD0_CNT_H:				equ 56h		; Capsense 0 counter high			(RW)
   375  005A                    CSD1_CNT_L:				equ 5Ah		; Capsense 1 counter low			(RW)
   376  005E                    CSD1_CNT_H:				equ	5Eh		; Capsense 1 counter high			(RW)
   377  0053                    CSD0_CR0:				equ 53h		; Capsense 0 control 0				(RW)
   378  005B                    CSD1_CR0:				equ 5Bh		; Capsense 1 control 0				(RW)
   379  0057                    CSD0_CR1:				equ 57h		; Capsense 0 control 1				(RW)
   380  005F                    CSD1_CR1:				equ 5Fh		; Capsense 1 control 1				(RW)
   381                          
   382                          ;------------------------------------------------------
   383                          ;  Neon Analog Registers
   384                          ;------------------------------------------------------
   385  0065                    ASY_CR:					equ 65h		; Analog Synchronization Control	(RW)
   386  006A                    ADC_DH:					equ 6Ah		; ADC data high						(RW)
   387  006B                    ADC_DL:					equ 6Bh		; ADC data low						(RW)
   388  00C8                    PWMVREF0:				equ C8h		; PWM Voltage Reference 0			(RW)
   389  00C9                    PWMVREF1:				equ C9h		; PWM Voltage Reference 1			(RW)
   390  00CB                    PWMSRC:					equ CBh		; PWM Source						(RW)
   391  00CA                    IDACMODE:				equ CAh		; IDAC Mode							(RW)
   392  00FC                    IDACR_D:				equ FCh		; Analog Mux DAC data 0				(RW)
   393  00FD                    IDACL_D:				equ FDh		; Analog Mux DAC data 1				(RW)
   394                          
   395                          ;------------------------------------------------------
   396                          ;  Neon Digital Registers
   397                          ;------------------------------------------------------
   398  00B7                    RDI0DSM:				equ B7h		; Row Digital Interconnect input select 0	(RW)
   399  00BF                    RDI1DSM:				equ BFh		; Row Digital Interconnect input select 1	(RW)
   400                          
   401                          ;------------------------------------------------------
   402                          ;  Neon Test Registers
   403                          ;------------------------------------------------------
   404  00CC                    TSCR0:					equ CCh		; Tsource 0							(RW)
   405  00CD                    TSCMPH:					equ CDh		; TSCMP high						(RW)
   406  00CE                    TSCMPL:					equ CEh		; TSCMP low							(RW)
   407  00CF                    TSCR1:					equ CFh		; Tsource 1							(RW)
   408                          
   409                          ;;=============================================================================
   410                          ;;      Register Space, Bank 1
   411                          ;;=============================================================================
   412                          
   413                          ;------------------------------------------------
   414                          ;  Port Registers
   415                          ;  Note: Also see this address range in Bank 0.
   416                          ;------------------------------------------------
   417                          ; Port 0
   418  0000                    PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
   419  0001                    PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
   420  0002                    PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
   421  0003                    PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
   422                          
   423                          ; Port 1
   424  0004                    PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
   425  0005                    PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
   426  0006                    PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
   427  0007                    PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
   428                          
   429                          ; Port 2
   430  0008                    PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
   431  0009                    PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
   432  000A                    PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
   433  000B                    PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
   434                          
   435                          ; Port 3
   436  000C                    PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
   437  000D                    PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
   438  000E                    PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
   439  000F                    PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
   440                          
   441                          ; Port 4
   442  0010                    PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
   443  0011                    PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
   444  0012                    PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
   445  0013                    PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
   446                          
   447                          ;------------------------------------------------
   448                          ;  Digital PSoC(tm) block Registers
   449                          ;  Note: Also see this address range in Bank 0.
   450                          ;------------------------------------------------
   451                          
   452                          ; Digital PSoC block 00, Basic Type C
   453  0020                    DBC00FN:      equ 20h          ; Function Register                        (RW)
   454  0021                    DBC00IN:      equ 21h          ;    Input Register                        (RW)
   455  0022                    DBC00OU:      equ 22h          ;   Output Register                        (RW)
   456  0023                    DBC00CR1:     equ 23h          ;   control & status register 1            (RW)
   457                          
   458                          ; Digital PSoC block 01, Basic Type C
   459  0024                    DBC01FN:      equ 24h          ; Function Register                        (RW)
   460  0025                    DBC01IN:      equ 25h          ;    Input Register                        (RW)
   461  0026                    DBC01OU:      equ 26h          ;   Output Register                        (RW)
   462  0027                    DBC01CR1:     equ 27h          ;   control & status register 1            (RW)
   463                          
   464                          ; Digital PSoC block 02, Communications Type C
   465  0028                    DCC02FN:      equ 28h          ; Function Register                        (RW)
   466  0029                    DCC02IN:      equ 29h          ;    Input Register                        (RW)
   467  002A                    DCC02OU:      equ 2Ah          ;   Output Register                        (RW)
   468  002B                    DBC02CR1:     equ 2Bh          ;   control & status register 1            (RW)
   469                          
   470                          ; Digital PSoC block 03, Communications Type C
   471  002C                    DCC03FN:      equ 2Ch          ; Function Register                        (RW)
   472  002D                    DCC03IN:      equ 2Dh          ;    Input Register                        (RW)
   473  002E                    DCC03OU:      equ 2Eh          ;   Output Register                        (RW)
   474  0029                    DBC03CR1:     equ 29h          ;   control & status register 1            (RW)
   475                          
   476                          ; Digital PSoC block 10, Basic Type C
   477  0030                    DBC10FN:      equ 30h          ; Function Register                        (RW)
   478  0031                    DBC10IN:      equ 31h          ;    Input Register                        (RW)
   479  0032                    DBC10OU:      equ 32h          ;   Output Register                        (RW)
   480  0033                    DBC10CR1:     equ 33h          ;   control & status register 1            (RW)
   481                          
   482                          ; Digital PSoC block 11, Basic Type C
   483  0034                    DBC11FN:      equ 34h          ; Function Register                        (RW)
   484  0035                    DBC11IN:      equ 35h          ;    Input Register                        (RW)
   485  0036                    DBC11OU:      equ 36h          ;   Output Register                        (RW)
   486  0037                    DBC11CR1:     equ 37h          ;   control & status register 1            (RW)
   487                          
   488                          ; Digital PSoC block 12, Communications Type C
   489  0038                    DCC12FN:      equ 38h          ; Function Register                        (RW)
   490  0039                    DCC12IN:      equ 39h          ;    Input Register                        (RW)
   491  003A                    DCC12OU:      equ 3Ah          ;   Output Register                        (RW)
   492  003B                    DBC12CR1:     equ 3Bh          ;   control & status register 1            (RW)
   493                          
   494                          ; Digital PSoC block 13, Communications Type C
   495  003C                    DCC13FN:      equ 3Ch          ; Function Register                        (RW)
   496  003D                    DCC13IN:      equ 3Dh          ;    Input Register                        (RW)
   497  003E                    DCC13OU:      equ 3Eh          ;   Output Register                        (RW)
   498  003F                    DBC13CR1:     equ 3Fh          ;   control & status register 1            (RW)
   499                          
   500                          ;------------------------------------------------
   501                          ;  System and Global Resource Registers
   502                          ;  Note: Also see this address range in Bank 0.
   503                          ;------------------------------------------------
   504                          
   505  0060                    CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
   506  00C0                    CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
   507  0030                    CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
   508  000C                    CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
   509  0003                    CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
   510                          
   511  0061                    CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
   512  0018                    CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
   513  0003                    CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
   514                          
   515  0003                    CLK_CR1_ACLK2:        equ 03h    ; Deprecated do not use
   516                          
   517  0062                    ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
   518  0080                    ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
   519                          
   520  0063                    AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
   521  000F                    AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 0
   522                          
   523  0064                    CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
   524  0080                    CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
   525  0040                    CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
   526  0030                    CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
   527  0008                    CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
   528  0004                    CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
   529  0003                    CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
   530                          
   531  0066                    AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
   532  000F                    AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
   533                          
   534  0067                    ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
   535  00F0                    ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
   536  000F                    ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
   537                          
   538  006B                    CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
   539  0040                    CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
   540  0030                    CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
   541  0004                    CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
   542  0003                    CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
   543                          
   544                          ;------------------------------------------------
   545                          ;  Global Digital Interconnects
   546                          ;------------------------------------------------
   547                          
   548  00D0                    GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   549  00D1                    GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   550  00D2                    GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   551  00D3                    GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   552                          
   553  00A0                    GDI_O_IN_CR:  equ 0A0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
   554  00A1                    GDI_E_IN_CR:  equ 0A1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
   555  00A2                    GDI_O_OU_CR:  equ 0A2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
   556  00A3                    GDI_E_OU_CR:  equ 0A3h          ; Global Dig Interconnect Even Outputs Reg (RW)
   557                          
   558  00BB                    RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
   559  00BC                    RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
   560                          
   561                          ;------------------------------------------------
   562                          ;  Analog Mux Bus Port Enable Bits
   563                          ;------------------------------------------------
   564  00D8                    MUX_CR0:      equ 0D8h          ; Analog Mux Port 0 Bit Enables Register
   565  00D9                    MUX_CR1:      equ 0D9h          ; Analog Mux Port 1 Bit Enables Register
   566  00DA                    MUX_CR2:      equ 0DAh          ; Analog Mux Port 2 Bit Enables Register
   567  00DB                    MUX_CR3:      equ 0DBh          ; Analog Mux Port 3 Bit Enables Register
   568  00EC                    MUX_CR4:      equ 0ECh          ; Analog Mux Port 4 Bit Enables Register
   569                          
   570                          ;------------------------------------------------
   571                          ;  Clock and System Control Registers
   572                          ;------------------------------------------------
   573                          
   574  00DD                    OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
   575  0080                    OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
   576  0040                    OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
   577  0020                    OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
   578  0010                    OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
   579  0008                    OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
   580  0004                    OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
   581  0002                    OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
   582  0001                    OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
   583                          
   584  00DE                    OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
   585  0003                    OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
   586                          
   587  00DF                    OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
   588                          
   589  00E0                    OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
   590  0080                    OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
   591  0040                    OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
   592  0020                    OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
   593  0018                    OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
   594  0000                    OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
   595  0008                    OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
   596  0010                    OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
   597  0018                    OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
   598  0007                    OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
   599  0000                    OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
   600  0001                    OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
   601  0002                    OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
   602  0003                    OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
   603  0004                    OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
   604  0005                    OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
   605  0006                    OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
   606  0007                    OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
   607                          
   608  00E1                    OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
   609  00F0                    OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
   610  000F                    OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
   611                          
   612  00E2                    OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
   613  0080                    OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
   614  0004                    OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
   615  0002                    OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
   616  0001                    OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
   617                          
   618  00E3                    VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
   619  0080                    VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
   620  0030                    VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
   621  0000                    VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
   622  0010                    VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
   623  0020                    VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
   624  0008                    VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
   625  0007                    VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
   626                          
   627  00E4                    VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
   628  0008                    VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below Flash Write level
   629  0004                    VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
   630  0002                    VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
   631  0001                    VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
   632                          
   633  00E5                    ADC0_TR:      equ 0E5h          ; ADC Column 0 Trim Register
   634  00E6                    ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register
   635                          
   636  00E8                    IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
   637  00E9                    ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
   638  00EA                    BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
   639  00EB                    ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
   640                          
   641  00FA                    FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
   642  0003                    FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
   643                          
   644  00FD                    DAC_CR0:       equ 0FDh          ; Analog Mux DAC Control Register 0
   645  00DC                    DAC_CR1:       equ 0DCh          ; Analog Mux DAC Control Register 1
   646  0008                    DAC_CR_IRANGE:        equ 08h    ; MASK: Sets the DAC Range low or high
   647  0006                    DAC_CR_OSCMODE:       equ 06h    ; MASK: Defines the reset mode for AMux
   648  0001                    DAC_CR_ENABLE:        equ 01h    ; MASK: Enable/Disable DAC function
   649                          
   650                          ;------------------------------------------------
   651                          ;  I2C Control Registers
   652                          ;------------------------------------------------
   653                          
   654  00AD                    I2C_ADDR:    equ 0ADh          ; I2C Address Register (RW)
   655                          
   656                          ;------------------------------------------------------
   657                          ;  Neon Analog Registers
   658                          ;------------------------------------------------------
   659  0053                    VDAC50CR0:		equ 53h			; V DAC5 control 0				(RW)
   660  0057                    VDAC51CR0:		equ 57h			; V DAC5 control 1				(RW)
   661  00A8                    ADC_CR0:		equ A8h			; ADC control 0					(RW)
   662  00A9                    ADC_CR1:		equ A9h			; ADC control 1					(RW)
   663  00AA                    ADC_CR2:		equ AAh			; ADC control 2					(RW)
   664  00AB                    ADC_CR3TRIM:	equ ABh			; ADC control 3					(RW)
   665  00AC                    ADC_CR4:		equ ACh			; ADC control 4					(RW)
   666  00E7                    VDAC_TRIM:		equ E7h			; V DAC trim					(RW)
   667                          
   668                          ;------------------------------------------------------
   669                          ;  Neon Current Sense CMP Registers
   670                          ;------------------------------------------------------
   671  0050                    CMP0CR1:		equ 50h			; CMP0 control 1				(RW)
   672  0051                    CMP0CR2:		equ 51h			; CMP0 control 2				(RW)
   673  0054                    CMP1CR1:		equ 54h			; CMP1 control 1				(RW)
   674  0055                    CMP1CR2:		equ 55h			; CMP1 control 2				(RW)
   675  0058                    CSCMPCR0:		equ 58h			; CSCMP control 0				(RW)
   676  0059                    CSCMPGOEN:		equ 59h			; CSCMO global out enable		(RW)
   677  005A                    CSLUTCR0:		equ 5Ah			; CSLUT control 0				(RW)
   678  005B                    CMPCOLMUX:		equ 5Bh			; CMP Column Mux				(RW)
   679  005C                    CMPPWMCR:		equ 5Ch			; CMP PWM control				(RW)
   680  005D                    CMPFLTCR:		equ 5Dh			; CMP filter control			(RW)
   681  005E                    CMPCLK1:		equ 5Eh			; CMP clock 1					(RW)
   682  005F                    CMPCLK0:		equ 5Fh			; CMP clock 0					(RW)
   683                          
   684                          ;------------------------------------------------------
   685                          ;  Neon Real Time Clock Registers
   686                          ;------------------------------------------------------
   687  00A4                    RTCH:			equ A4h			; Real time current hour		(RW)
   688  00A5                    RTCM:			equ A5h			; Real time current minute		(RW)
   689  00A6                    RTCS:			equ A6h			; Real time current second		(RW)
   690  00A7                    RTCCR:			equ A7h			; Real time clock control		(RW)
   691                          
   692                          ;------------------------------------------------------
   693                          ;  Analog MUX Config Registers
   694                          ;------------------------------------------------------
   695                          
   696  006A                    AMUX_CFG1:			equ 6Ah  ; Analog MUX Configuration 1
   697  0020                    AMUX_CFG1_GOINVR:	equ 20h  ;
   698  0010                    AMUX_CFG1_GOINVL:  	equ 10h	 ;
   699  000C                    AMUX_CFG1_AMUXMODR:	equ 0Ch	 ;
   700  0003                    AMUX_CFG1_AMUXMODL:	equ 03h	 ;
   701                          
   702                          ;;=============================================================================
   703                          ;;      M8C System Macros
   704                          ;;  These macros should be used when their functions are needed.
   705                          ;;=============================================================================
   706                          
   707                          ;----------------------------------------------------
   708                          ;  Swapping Register Banks
   709                          ;----------------------------------------------------
   710                              macro M8C_SetBank0
   711                              and   F, ~FLAG_XIO_MASK
   712  3C8E                        endm
   713                          
   714                              macro M8C_SetBank1
   715                              or    F, FLAG_XIO_MASK
   716  3C8E                        endm
   717                          
   718                          ;----------------------------------------------------
   719                          ;  Global Interrupt Enable/Disable
   720                          ;----------------------------------------------------
   721                              macro M8C_EnableGInt
   722                              or    F, FLAG_GLOBAL_IE
   723  3C8E                        endm
   724                          
   725                              macro M8C_DisableGInt
   726                              and   F, ~FLAG_GLOBAL_IE
   727  3C8E                        endm
   728                          
   729                          ;----------------------------------------------------
   730                          ;  Enable/Disable Interrupt Mask
   731                          ;
   732                          ;  Use the following macros to enable/disable
   733                          ;  bits in the Interrupt mask registers,
   734                          ;  INT_MSK0, INT_MSK1 or INT_MSK3.
   735                          ;
   736                          ;  Usage:    M8C_DisableIntMask INT_MSKN, MASK
   737                          ;            M8C_EnableIntMask  INT_MSKN, MASK
   738                          ;
   739                          ;  where INT_MSKN is INT_MSK0, INT_MSK1 or INT_MSK3
   740                          ;        and MASK is the bit set to enable or disable
   741                          ;----------------------------------------------------
   742                          ; Disable Interrupt Bit Mask(s)
   743                              macro M8C_DisableIntMask
   744                              and   reg[@0], ~@1              ; disable specified interrupt enable bit
   745  3C8E                        endm
   746                          
   747                          ; Enable Interrupt Bit Mask(s)
   748                              macro M8C_EnableIntMask
   749                              or    reg[@0], @1               ; enable specified interrupt enable bit
   750  3C8E                        endm
   751                          
   752                          ;----------------------------------------------------
   753                          ;  Clear Posted Interrupt Flag Mask
   754                          ;
   755                          ;  Use the following macros to clear the
   756                          ;  bits in the Interrupt Clear registers,
   757                          ;  INT_CLR0, INT_CLR1 or INT_CLR3.
   758                          ;  Usage:    M8C_ClearIntFlag INT_CLRN, MASK
   759                          ;
   760                          ;  where INT_MSKN is INT_CLR0, INT_CLR1 or INT_CLR3
   761                          ;        and MASK is the bit set to enable or disable
   762                          ;----------------------------------------------------
   763                              macro M8C_ClearIntFlag
   764                              mov   reg[@0], ~@1              ; clear specified interrupt enable bit
   765  3C8E                        endm
   766                          
   767                          ;----------------------------------------------------
   768                          ;  Power-On Reset & WatchDog Timer Functions
   769                          ;----------------------------------------------------
   770                              macro M8C_EnableWatchDog
   771                              and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
   772  3C8E                        endm
   773                          
   774                              macro M8C_ClearWDT
   775                              mov   reg[RES_WDT], 00h
   776  3C8E                        endm
   777                          
   778                              macro M8C_ClearWDTAndSleep
   779                              mov   reg[RES_WDT], 38h
   780  3C8E                        endm
   781                          
   782                          ;----------------------------------------------------
   783                          ;  Sleep, CPU Stop & Software Reset
   784                          ;----------------------------------------------------
   785                              macro M8C_Sleep
   786                              or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
   787                              ; The next instruction to be executed depends on the state of the
   788                              ; various interrupt enable bits. If some interrupts are enabled
   789                              ; and the global interrupts are disabled, the next instruction will
   790                              ; be the one that follows the invocation of this macro. If global
   791                              ; interrupts are also enabled then the next instruction will be
   792                              ; from the interrupt vector table. If no interrupts are enabled
   793                              ; then the CPU sleeps forever.
   794  3C8E                        endm
   795                          
   796                              macro M8C_Stop
   797                              ; In general, you probably don't want to do this, but here's how:
   798                              or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
   799                              ; Next instruction to be executed is located in the interrupt
   800                              ; vector table entry for Power-On Reset.
   801  3C8E                        endm
   802                          
   803                              macro M8C_Reset
   804                              ; Restore CPU to the power-on reset state.
   805                              mov A, 0
   806                              SSC
   807                              ; Next non-supervisor instruction will be at interrupt vector 0.
   808  3C8E                        endm
   809                          
   810                          ;----------------------------------------------------
   811                          ; ImageCraft Code Compressor Actions
   812                          ;----------------------------------------------------
   813                              ; Suspend Code Compressor
   814                              ; Must not span a RET or RETI instruction
   815                              ; without resuming code compression
   816                              macro Suspend_CodeCompressor
   817                              or   F, 0
   818  3C8E                        endm
   819                          
   820                              ; Resume Code Compression
   821                              macro Resume_CodeCompressor
   822                              add  SP, 0
   823                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8c.inc
     1                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                          ;;;
     3                          ;;;  M8SSC.INC -- CY8C22045 Microcontroller Device SSC Declarations
     4                          ;;;
     5                          ;;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
     6                          ;;;
     7                          ;;;
     8                          ;;;  This file provides address constants, bit field masks and a set of macro
     9                          ;;;  facilities for the Cypress MicroSystems CY8C22045 Microcontroller family.
    10                          ;;;
    11                          ;;;  Last Modified: August 17, 2004
    12                          ;;;
    13                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    14                          
    15                          ;----------------------------------
    16                          ; Common Supervisory Code Variables
    17                          ;----------------------------------
    18  00F8                    bSSC_KEY1:                          equ      0F8h   ; supervisory key
    19  00F9                    bSSC_KEYSP:                         equ      0F9h   ; supervisory stack ptr key
    20  00FA                    bSSC_TABLE_TableId:                 equ      0FAh   ; table ID
    21                          
    22  003A                    OPER_KEY:                           equ      3Ah   ; operation key
    23                          
    24                          ;----------------------------------
    25                          ; SSC_Action macro command codes
    26                          ;----------------------------------
    27  0001                    FLASH_READ:                         equ      1     ; flash read command
    28  0002                    FLASH_WRITE:                        equ      2     ; flash write command
    29  0003                    FLASH_ERASE:                        equ      3     ; flash erase command
    30  0004                    PROTECT_BLOCK:                      equ      4     ; flash protect block command
    31  0006                    TABLE_READ:                         equ      6     ; table read command
    32  0007                    FLASH_CHECKSUM:                     equ      7     ; flash checksum calculation command
    33  0008                    CALIBRATE0:                         equ      8     ; Calibrate without checksum
    34  0009                    CALIBRATE1:                         equ      9     ; Calibrate with checksum
    35                          
    36                          ;----------------------------------
    37                          ; SSC_Action Flash table addresses
    38                          ;----------------------------------
    39                          ; Table 0 Values
    40  00F8                    SILICON_ID_1:                       equ      0F8h   ; Table 0 first byte of silicon ID
    41  00F9                    SILICON_ID_0:                       equ      0F9h   ; Table 0 second byte of silicon ID
    42                          
    43                          ; Table 1 Values
    44  00F8                    SSCTBL1_TRIM_BGR_3V:                equ      0F8h   ; 3.3V bandgap ref voltage trim
    45  00F9                    SSCTBL1_TRIM_IMO_3V_24MHZ:          equ      0F9h   ; 3.3V internal main oscillator trim (24MHz)
    46  00FA                    SSCTBL1_CAL_ROOM_3V:                equ      0FAh   ; 3.3V Room Temp Calibration
    47  00FB                    SSCTBL1_CAL_HOT_3V:                 equ      0FBh   ; 3.3V Hot  Temp Calibration
    48  00FC                    SSCTBL1_TRIM_BGR_5V:                equ      0FCh   ; 5.0V bandgap ref voltage trim
    49  00FD                    SSCTBL1_TRIM_IMO_5V_24MHZ:          equ      0FDh   ; 5.0V internal main oscillator trim (24MHz)
    50  00FE                    SSCTBL1_CAL_ROOM_5V:                equ      0FEh   ; 5.0V Room Temp Calibration
    51  00FF                    SSCTBL1_CAL_HOT_5V:                 equ      0FFh   ; 5.0V Hot  Temp Calibration
    52                              ; legacy names:
    53  00F8                        VOLTAGE_TRIM_3V:                equ      0F8h   ; Table 1 3.3V bandgap ref voltage trim value
    54  00F9                        OSCILLATOR_TRIM_3V:             equ      0F9h   ; Table 1 3.3V internal main oscillator trim val
                                ue
    55  00FC                        VOLTAGE_TRIM_5V:                equ      0FCh   ; Table 1 5.0V bandgap ref voltage trim value
    56  00FD                        OSCILLATOR_TRIM_5V:             equ      0FDh   ; Table 1 5.0V internal main oscillator trim val
                                ue
    57                          
    58                          ; Table 2 Values
    59  00F8                    SSCTBL2_TRIM_BGR_2V:                equ      0F8h   ; 2.7V bandgap ref voltage trim
    60  00F9                    SSCTBL2_TRIM_IMO_2V_12MHZ:          equ      0F9h   ; 2.7V internal main oscillator trim (12MHz)
    61  00FA                    SSCTBL2_CAL_ROOM_2V:                equ      0FAh   ; 2.7V Room Temp Calibration
    62  00FB                    SSCTBL2_CAL_HOT_2V:                 equ      0FBh   ; 2.7V Hot  Temp Calibration
    63  00FC                    SSCTBL2_TRIM_IMO_3V_6MHZ:           equ      0FCh   ; 3.3V IMO Trim for SLOWIMO 6MHz operation
    64  00FD                    SSCTBL2_TRIM_IMO_2V_6MHZ:           equ      0FDh   ; 2.7V IMO Trim for SLOWIMO 6MHz operation
    65  00FE                    SSCTBL2_TRIM_IMO_5V_6MHZ:           equ      0FEh   ; 5.0V IMO Trim for SLOWIMO 6MHz operation
    66                          
    67                          
    68                          ;-----------------------------------------------------------------------------
    69                          ;  MACRO SSC_Action( OpCode )
    70                          ;
    71                          ;  DESCRIPTION:
    72                          ;     Performs supervisory operations defined in Supervisory ROM (SROM)
    73                          ;     section of Technical Reference Manual and/or Datasheet.
    74                          ;-----------------------------------------------------------------------------
    75                          ;
    76                          ;  ARGUMENTS:
    77                          ;     BYTE  OpCode   - specified supervisory operation - defined operations
    78                          ;                      are:  FLASH_WRITE, FLASH_ERASE, FLASH_READ, TABLE_READ,
    79                          ;                            FLASH_CHECKSUM, PROTECT_BLOCK
    80                          ;  RETURNS:
    81                          ;     Nothing
    82                          ;
    83                          ;  SIDE EFFECTS:
    84                          ;     The values of the A and X registers are modified
    85                          ;
    86                          ;  PROCEDURE:
    87                          ;     1) specify a 3 byte stack frame.  Save in [KEYSP]
    88                          ;     2) insert the flash Supervisory key in [KEY1]
    89                          ;     3) store function code in A
    90                          ;     4) call the supervisory code
    91                          ;
    92                              macro SSC_Action( OpCode )
    93                          ;   !!! DO NOT CHANGE THIS CODE !!!
    94                          ;       This sequence of opcodes provides a
    95                          ;       signature for the debugger and ICE.
    96                              mov   X, SP                            ; copy SP into X
    97                              mov   A, X                             ; mov to A
    98                              add   A, 3                             ; create 3 byte stack frame
    99                              mov   [bSSC_KEYSP], A                  ; save stack frame for supervisory code
   100                              mov   [bSSC_KEY1], OPER_KEY            ; load the code for supervisory operations
   101                              mov   A, @OpCode                       ; load A with specific Flash operation
   102                              SSC                                    ; SSC call the supervisory code
   103                          ;   !!! DO NOT CHANGE THIS CODE !!!
   104  3C8E                        endm
   105                          
   106                          
   107                          ;-----------------------------------------------------------------------------
   108                          ;  MACRO M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   109                          ;
   110                          ;  DESCRIPTION:
   111                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   112                          ;     registers with values from from the specified flash System Parameter
   113                          ;     table entries. Note that both trim values must come from the same table.
   114                          ;     Also, see M8SSC_Set2TableTrims below.
   115                          ;-----------------------------------------------------------------------------
   116                          ;
   117                          ;  ARGUMENTS:
   118                          ;     BYTE Table     - 0..3 for the desired system parameter table
   119                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   120                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   121                          ;
   122                          ;  RETURNS:
   123                          ;     Nothing
   124                          ;
   125                          ;  SIDE EFFECTS:
   126                          ;     The values of the A and X registers are modified
   127                          ;
   128                              macro M8SSC_SetTableTrims( Table, IMO_Trim, Volt_Trim )
   129                              mov A, reg[0xD0]  ; CUR_PP
   130                          	push A
   131                          	mov reg[0xD0], 0
   132                              mov   [bSSC_TABLE_TableId], @Table     ; Point to requested Flash Table
   133                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   134                              M8C_SetBank1
   135                              mov   A, [@IMO_Trim]
   136                              mov   reg[IMO_TR], A                   ; Load the 3V trim oscillator setting
   137                              mov   A, [@Volt_Trim]
   138                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   139                              M8C_SetBank0
   140                          	pop A
   141                          	mov reg[0xD0], A
   142  3C8E                        endm
   143                          
   144                          
   145                          ;-----------------------------------------------------------------------------
   146                          ;  MACRO M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   147                          ;
   148                          ;  DESCRIPTION:
   149                          ;     Loads Bandgap Voltage and Internal Main Oscillator (IMO) Trim
   150                          ;     registers with values from from the specified flash System Parameter
   151                          ;     table entries. Each trim value comes from a different table.
   152                          ;     Also, see M8SSC_SetTableTrims above.
   153                          ;-----------------------------------------------------------------------------
   154                          ;
   155                          ;  ARGUMENTS:
   156                          ;     BYTE TableA    - 0..3 for the parameter table holding the Volt Trim
   157                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   158                          ;     BYTE TableB    - 0..3 for the parameter table holding the IMO Trim
   159                          ;     BYTE IMP_Trim  - Address (F8 - FF) of the IMO trim value desired
   160                          ;
   161                          ;  RETURNS:
   162                          ;     Nothing
   163                          ;
   164                          ;  SIDE EFFECTS:
   165                          ;     The values of the A and X registers are modified
   166                          ;
   167                              macro M8SSC_Set2TableTrims( TableA, IMO_Trim, TableB, Volt_Trim )
   168                              mov A, reg[0xD0]  ; CUR_PP
   169                          	push A
   170                          	mov reg[0xD0], 0
   171                              mov   [bSSC_TABLE_TableId], @TableA    ; Point to Flash Table for IMO Trim
   172                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   173                              M8C_SetBank1                           ; (Note, preserved across next SSC!)
   174                              mov   A, [@IMO_Trim]                   ; Set the main oscillator trim
   175                              mov   reg[IMO_TR], A
   176                              mov   [bSSC_TABLE_TableId], @TableB    ; Point to Flash Table for Volt Trim
   177                              SSC_Action TABLE_READ                  ; Copy table data to RAM F8-FF
   178                              mov   A, [@Volt_Trim]                  ; Set the bandgap voltage trim
   179                              mov   reg[BDG_TR], A                   ; Load the bandgap trim setting for 3V
   180                              M8C_SetBank0
   181                          	pop A
   182                          	mov reg[0xD0], A
   183  3C8E                        endm
   184                          
   185                          
   186                          ;-----------------------------------------------------------------------------
   187                          ;  MACRO M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   188                          ;
   189                          ;  DESCRIPTION:
   190                          ;     Loads Bandgap Voltage Trim register with values from from the
   191                          ;     specified flash System Parameter table entry.
   192                          ;-----------------------------------------------------------------------------
   193                          ;
   194                          ;  ARGUMENTS:
   195                          ;     BYTE Table     - 0..3 for the parameter table holding the Volt Trim
   196                          ;     BYTE Volt_Trim - Address (F8 - FF) of the voltage trim value desired
   197                          ;
   198                          ;  RETURNS:
   199                          ;     Nothing
   200                          ;
   201                          ;  SIDE EFFECTS:
   202                          ;     The values of the A and X registers are modified
   203                          ;
   204                              macro M8SSC_SetTableVoltageTrim( Table, Volt_Trim )
   205                              mov A, reg[0xD0]  ; CUR_PP
   206                          	push A
   207                          	mov reg[0xD0], 0
   208                              mov   [bSSC_TABLE_TableId], @Table     ; Point to Flash Table
   209                              SSC_Action TABLE_READ                  ; Perform a table read supervisor call
   210                              M8C_SetBank1
   211                              mov   A, [@Volt_Trim]                  ; Get the bandgap trim seting
   212                              mov   reg[BDG_TR], A                   ; Update the register value
   213                              M8C_SetBank0
   214                          	pop A
   215                          	mov reg[0xD0], A
   216  3C8E                        endm
   217                          
   218                          
   219                          ;-----------------------------------------------------------------------------
   220                          ;  MACRO M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   221                          ;
   222                          ;  DESCRIPTION:
   223                          ;     Loads Internal Main Oscillator (IMO) Trim register with values from
   224                          ;     from the specified flash System Parameter table entry.
   225                          ;-----------------------------------------------------------------------------
   226                          ;
   227                          ;  ARGUMENTS:
   228                          ;     BYTE Table     - 0..3 for the parameter table holding the IMO Trim
   229                          ;     BYTE IMO_Trim  - Address (F8 - FF) of the voltage trim value desired
   230                          ;
   231                          ;  RETURNS:
   232                          ;     Nothing
   233                          ;
   234                          ;  SIDE EFFECTS:
   235                          ;     The values of the A and X registers are modified
   236                          ;
   237                              macro M8SSC_SetTableIMOTrim( Table, IMO_Trim )
   238                              mov A, reg[0xD0]  ; CUR_PP
   239                          	push A
   240                          	mov reg[0xD0], 0
   241                              mov   [bSSC_TABLE_TableId], @Table ; Point to Flash Table 1
   242                              SSC_Action TABLE_READ              ; Perform a table read supervisor call
   243                              M8C_SetBank1
   244                              mov   A, [@IMO_Trim]               ; Get the IMO trim seting
   245                              mov   reg[IMO_TR], A               ; Update the register value
   246                              M8C_SetBank0
   247                          	pop A
   248                          	mov reg[0xD0], A
   249                              endm
      + 3C8E                    
      + 3C8E                    ; end of file m8ssc.inc
     1                          ;;*****************************************************************************
     2                          ;;*****************************************************************************
     3                          ;;
     4                          ;;       FILENAME: Memory.inc
     5                          ;;
     6                          ;;    DESCRIPTION: Memory Model and Stack Parameter Definitions for 
     7                          ;;                 CY8C22045 PSoC devices.
     8                          ;;
     9                          ;;  LAST MODIFIED: August 17, 2004
    10                          ;;
    11                          ;;-----------------------------------------------------------------------------
    12                          ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    13                          ;;*****************************************************************************
    14                          ;;*****************************************************************************
    15                          ;
    16                          ;
    17                          ;  ******** Define Memory Model and Stack parameters ********
    18                          ;
    19  0001                    IMAGECRAFT: equ 1   
    20  0002                    HITECH: equ 2   
    21  0002                    TOOLCHAIN: equ HITECH   
    22  0001                    SYSTEM_LARGE_MEMORY_MODEL: equ 1   
    23  0000                    SYSTEM_SMALL_MEMORY_MODEL: equ 0   
    24  0003                    SYSTEM_STACK_PAGE: equ 3   
    25  0000                    SYSTEM_STACK_PAGE_OFFSET: equ 0   
    26  0002                    SYSTEM_TOOLS: equ 2   
    27  0000                    SYSTEM_IDXPG_TRACKS_STK_PP: equ 0   
    28  0001                    SYSTEM_IDXPG_TRACKS_IDX_PP: equ 1   
    29  0000                    SYSTEM_MULTIPAGE_STACK: equ 0 
    30                          
    31                          
    32                          ;  ******* Function Class Definitions *******
    33                          ;
    34                          ;  These definitions are used to describe RAM access patterns. They provide
    35                          ;  documentation and they control prologue and epilogue macros that perform
    36                          ;  the necessary housekeeping functions for large memory model devices like
    37                          ;  the CY8C22045.
    38                          
    39  0001                    RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
    40  0002                    RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
    41  0004                    RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
    42  0008                    RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
    43                          
    44                          ; ******* Hi Tech Specific *******
    45                          ; Turn on the expansion of all macros by default
    46                          IF (TOOLCHAIN & HITECH)
    47                          OPT EXPAND
    48                          ENDIF
    49                          ; ******* Page Pointer Manipulation Macros *******
    50                          ;
    51                          ;  ******* Page Pointer Manipulation Macros *******
    52                          ;
    53                          ;  Most of the following macros are conditionally compiled so they only
    54                          ;  produce code if the large memory model is selected.
    55                          
    56                             ;-----------------------------------------------
    57                             ;  Set Stack Page Macro
    58                             ;-----------------------------------------------
    59                             ;
    60                             ;  DESC: Modify STK_PP in the large or small memory Models.
    61                             ;
    62                             ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
    63                             ;        which stack operations like PUSH and POP store and retrieve their
    64                             ;        data
    65                             ;
    66                             ;  COST: 8 instruction cycles (in LMM only)
    67                          
    68                             macro RAM_SETPAGE_STK( PG_NUMBER )
    69                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    70                                mov reg[STK_PP], @PG_NUMBER
    71                             ENDIF
    72  3C8E                       endm
    73                          
    74                             ;-----------------------------------------------
    75                             ;  Set Current Page Macro
    76                             ;-----------------------------------------------
    77                             ;
    78                             ;  DESC: Modify CUR_PP in the large or small memory Models.
    79                             ;
    80                             ; INPUT: Constant value (e.g., >bFoo) for the RAM page number used in
    81                             ;        calculation of effective direct-mode address operands.
    82                             ;
    83                             ;  COST: 8 instruction cycles (in LMM only)
    84                          
    85                             macro RAM_SETPAGE_CUR( PG_NUMBER )
    86                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
    87                                mov reg[CUR_PP], @PG_NUMBER
    88                             ENDIF
    89  3C8E                       endm
    90                          
    91                             ;-----------------------------------------------
    92                             ;  Set Index Page Macro
    93                             ;-----------------------------------------------
    94                             ;
    95                             ;  DESC: Modify IDX_PP in the large or small emory Models.
    96                             ;
    97                             ; INPUT: Constant value (e.g., >caFoo) for the RAM page number used in
    98                             ;         calculation of effective index-mode address operands.
    99                             ;
   100                             ;  COST: 8 instruction cycles (in LMM only)
   101                          
   102                             macro RAM_SETPAGE_IDX( PG_NUMBER )
   103                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   104                                mov reg[IDX_PP], @PG_NUMBER
   105                             ENDIF
   106  3C8E                       endm
   107                          
   108                             ;-----------------------------------------------
   109                             ;  Set MVI Read Page Macro
   110                             ;-----------------------------------------------
   111                             ;
   112                             ;  DESC: Modify MVR_PP in the large or small memory Models.
   113                             ;
   114                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   115                             ;        calculation of indirect address operands used in the
   116                             ;        "mvi A, [pFoo]" instructions.
   117                             ;
   118                             ;  COST: 8 instruction cycles (in LMM only)
   119                          
   120                             macro RAM_SETPAGE_MVR( PG_NUMBER )
   121                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   122                                mov reg[MVR_PP], @PG_NUMBER
   123                             ENDIF
   124  3C8E                       endm
   125                          
   126                             ;-----------------------------------------------
   127                             ;  Set MVI Write Page Macro
   128                             ;-----------------------------------------------
   129                             ;
   130                             ;  DESC: Modify MVW_PP in the large or small memory Models.
   131                             ;
   132                             ; INPUT: Constant value (e.g., >pFoo) for the RAM page number used in
   133                             ;        calculation of indirect address operands used in the
   134                             ;        "mvi [pFoo], A" instructions.
   135                             ;
   136                             ;  COST: 8 instruction cycles (in LMM only)
   137                          
   138                             macro RAM_SETPAGE_MVW( PG_NUMBER )
   139                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   140                                mov reg[MVW_PP], @PG_NUMBER
   141                             ENDIF
   142  3C8E                       endm
   143                          
   144                             ;-----------------------------------------------
   145                             ;  Force Index Page Pointer to Stack Page
   146                             ;-----------------------------------------------
   147                             ;
   148                             ;  DESC: Map index-mode operands onto the stack page by modifying IDX_PP.
   149                             ;        See also RAM_LOCK_INDEX_TO_STACKPAGE.
   150                             ;
   151                             ; INPUT: None
   152                             ;
   153                             ;  COST: 8 instruction cycles (in LMM only)
   154                          
   155                             macro RAM_SETPAGE_IDX2STK
   156                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   157                                IF ( SYSTEM_MULTIPAGE_STACK )
   158                                   mov   A, reg[STK_PP]
   159                                   mov   reg[IDX_PP], A
   160                                ELSE
   161                                   RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
   162                                ENDIF
   163                             ENDIF
   164  3C8E                       endm
   165                          
   166                             ;-----------------------------------------------
   167                             ;  Change Memory Mode
   168                             ;-----------------------------------------------
   169                             ;
   170                             ;  DESC: Modify FLAG_PAGEMODE bits in the large and small memory Models.
   171                             ;
   172                             ; INPUT: Constant value for PGMODE bitfield of CPU Flag register, F.
   173                             ;        See FLAG_PGMODE_{x} constants in M8C.INC.
   174                             ;
   175                             ;  COST: 8 instruction cycles (in LMM only)
   176                          
   177                             macro RAM_CHANGE_PAGE_MODE( MODE )
   178                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   179                                and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
   180                                or    F,  FLAG_PGMODE_MASK & @MODE
   181                             ENDIF
   182  3C8E                       endm
   183                          
   184                             ;-----------------------------------------------
   185                             ;  Set Large Memory Model Native Paging Mode
   186                             ;-----------------------------------------------
   187                             ;
   188                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   189                             ;        paging mode *IFF* a simple "OR" is guaranteed to work---for
   190                             ;        example, in an ISR, when the PGMODE bits have been cleared
   191                             ;        to zero. If a simple "OR" is not guaranteed to work, use
   192                             ;        the slower RAM_RESTORE_NATIVE_PAGING instead.
   193                             ;
   194                             ; INPUT: none
   195                             ;
   196                             ;  COST: 4 instruction cycles (in LMM only)
   197                          
   198                             macro RAM_SET_NATIVE_PAGING
   199                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   200                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   201                                or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
   202                             ENDIF ;  PGMODE LOCKED
   203                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   204                                or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
   205                             ENDIF ; PGMODE FREE
   206                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   207  3C8E                       endm
   208                          
   209                             ;-----------------------------------------------
   210                             ; Restore Large Memory Model Native Paging Mode
   211                             ;-----------------------------------------------
   212                             ;
   213                             ;  DESC: Changes the FLAG_PAGEMODE bits to enter the native LMM RAM
   214                             ;        paging mode. Always works because it clears the PGMODE bits
   215                             ;        before OR-ing in the new ones. See RAM_RESTORE_NATIVE_PAGING
   216                             ;        for a faster method.
   217                             ;
   218                             ; INPUT: none
   219                             ;
   220                             ;  COST: 8 instruction cycles (in LMM only)
   221                          
   222                             macro RAM_RESTORE_NATIVE_PAGING
   223                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   224                             IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   225                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
   226                             ENDIF ;  PGMODE LOCKED
   227                             IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   228                                RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
   229                             ENDIF ; PGMODE FREE
   230                             ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   231  3C8E                       endm
   232                          
   233                             ;-----------------------------------------------
   234                             ; Force indexed addr mode operands to Stack Pg
   235                             ;-----------------------------------------------
   236                             ;
   237                             ;  DESC: Force instructions that use indexed address mode to reference the
   238                             ;        stack page (as defined by STK_PP). This macro sets the "Indexed
   239                             ;        Stack Mode" bit (LSB) of the PGMODE bit field in the CPU Flag
   240                             ;        register, F. (See also RAM_SETPAGE_IDX2STK, above.)
   241                             ;
   242                             ; INPUT: none
   243                             ;
   244                             ;  COST: 4 instruction cycles (in LMM only)
   245                          
   246                             macro RAM_X_POINTS_TO_STACKPAGE
   247                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   248                                or   F, FLAG_PGMODE_01b
   249                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   250  3C8E                       endm
   251                          
   252                             ;-----------------------------------------------
   253                             ;  Force indexed addr mode operands to Index Pg
   254                             ;-----------------------------------------------
   255                             ;
   256                             ;  DESC: Permit instructions that use indexed address mode to reference page
   257                             ;        zero or the page pointed to by the IDX_PP register, depending on the
   258                             ;        setting of the MSb (or "Direct Page Mode" bit) of the PGMODE bits
   259                             ;        in the CPU Flag register, F. (This macro clears the PGMODE LSb.)
   260                             ;
   261                             ; INPUT: none
   262                             ;
   263                             ;  COST: 4 instruction cycles (in LMM only)
   264                          
   265                             macro RAM_X_POINTS_TO_INDEXPAGE
   266                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   267                                and  F, ~FLAG_PGMODE_01b
   268                             ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   269  3C8E                       endm
   270                          
   271                             ;-----------------------------------------------
   272                             ;  Function Prologue
   273                             ;-----------------------------------------------
   274                             ;
   275                             ;  Prologue for functions that run in the LMM and SMM.
   276                             ;
   277                          
   278                             macro RAM_PROLOGUE( ACTUAL_CLASS )
   279                          
   280                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   281                             ; Nothing to do
   282                             ENDIF ; RAM_USE_CLASS_1
   283                          
   284                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   285                                IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
   286                                   RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
   287                                ENDIF
   288                             ENDIF ; RAM_USE_CLASS_2
   289                          
   290                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   291                                IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
   292                                   RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
   293                                ENDIF
   294                             ENDIF ; RAM_USE_CLASS_3
   295                          
   296                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   297                             ; Nothing to do
   298                             ENDIF ; RAM_USE_CLASS_4
   299                          
   300  3C8E                       endm
   301                          
   302                             ;-----------------------------------------------
   303                             ;  Function Epilogue
   304                             ;-----------------------------------------------
   305                             ;
   306                             ;  Prologue for functions that run in the LMM and SMM.
   307                             ;
   308                          
   309                             macro RAM_EPILOGUE( ACTUAL_CLASS )
   310                          
   311                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
   312                             ; Nothing to do
   313                             ENDIF ; RAM_USE_CLASS_1
   314                          
   315                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
   316                                RAM_RESTORE_NATIVE_PAGING
   317                             ENDIF ; RAM_USE_CLASS_2
   318                          
   319                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
   320                                RAM_RESTORE_NATIVE_PAGING
   321                             ENDIF ; RAM_USE_CLASS_3
   322                          
   323                             IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
   324                             ; Nothing to do
   325                             ENDIF ; RAM_USE_CLASS_4
   326                          
   327  3C8E                       endm
   328                          
   329                             ;-----------------------------------------------
   330                             ;  Preserve Register
   331                             ;-----------------------------------------------
   332                             ;
   333                             ;  DESC: Preserve a register value on the stack
   334                             ;
   335                             ; INPUT: Name or address of register in I/O Space
   336                             ;        The I/O bank is an implicit parameter. That is, this function will
   337                             ;        Access the I/O bank currently specified by the CPU Flag register.
   338                             ;
   339                             ;  USES: CPU 'A' register
   340                             ;
   341                             ;  COST: 9 instruction cycles
   342                          
   343                             macro REG_PRESERVE( IOReg )
   344                             mov   A, reg[ @IOReg ]
   345                             push  A
   346  3C8E                       endm
   347                          
   348                             ;-----------------------------------------------
   349                             ;  Restore Register
   350                             ;-----------------------------------------------
   351                             ;
   352                             ;  DESC: Restore a register value from the stack
   353                             ;
   354                             ; INPUT: Name or address of register in I/O Space
   355                             ;        The I/O bank is an implicit parameter. That is, this function will
   356                             ;        Access the I/O bank currently specified by the CPU Flag register.
   357                             ;
   358                             ;  USES: CPU 'A' register
   359                             ;
   360                             ;  COST: 10 instruction cycles
   361                          
   362                             macro REG_RESTORE( IOReg )
   363                             pop   A
   364                             mov   reg[ @IOReg ], A
   365  3C8E                       endm
   366                          
   367                             ;-----------------------------------------------
   368                             ;  Preserve Volatile Page Pointer Registers
   369                             ;-----------------------------------------------
   370                             ;
   371                             ;  DESC: Invoked by ISRs before switching to the LMM mode and calling
   372                             ;        functions that require on it.
   373                             ;
   374                             ; INPUT: none
   375                             ;
   376                             ;  USES: CPU 'A' register
   377                             ;
   378                             ;  COST: 45 instruction cycles (in LMM only)
   379                          
   380                             macro ISR_PRESERVE_PAGE_POINTERS
   381                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   382                                REG_PRESERVE CUR_PP
   383                                REG_PRESERVE IDX_PP
   384                                REG_PRESERVE MVR_PP
   385                                REG_PRESERVE MVW_PP
   386                             ENDIF
   387  3C8E                       endm
   388                          
   389                             ;-----------------------------------------------
   390                             ;  Restore Volatile Page Pointer Registers
   391                             ;-----------------------------------------------
   392                             ;
   393                             ;  DESC: Undo for RAM_PRESERVE_PAGE_POINTERS macro. Invoked by ISRs after
   394                             ;        calling functions that run in the LMM mode and before executing
   395                             ;        the RETI instruction.
   396                             ;
   397                             ; INPUT: none
   398                             ;
   399                             ;  USES: CPU 'A' register
   400                             ;
   401                             ;  COST: 50 instruction cycles (in LMM only)
   402                          
   403                             macro ISR_RESTORE_PAGE_POINTERS
   404                             IF ( SYSTEM_LARGE_MEMORY_MODEL )
   405                                REG_RESTORE MVW_PP
   406                                REG_RESTORE MVR_PP
   407                                REG_RESTORE IDX_PP
   408                                REG_RESTORE CUR_PP
   409                             ENDIF
   410  3C8E                       endm
     1                          ;  Generated by PSoC Designer 5.4.2946
     2                          ;
     3                          ;@Id: boot.tpl#904 @
     4                          ;=============================================================================
     5                          ;  FILENAME:   boot.asm
     6                          ;  Version:    1.50
     7                          ;
     8                          ;  DESCRIPTION:
     9                          ;  M8C Boot Code for CY8C22x45 microcontroller devices.
    10                          ;
    11                          ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
    12                          ;
    13                          ; NOTES:
    14                          ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
    15                          ; the project's root directory to create BOOT.ASM. Any changes made to
    16                          ; BOOT.ASM will be  overwritten every time the project is generated; therefore
    17                          ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
    18                          ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
    19                          ; are not accidentally modified.
    20                          ;
    21                          ;=============================================================================
    22                          
    23                          include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
    24                          include "m8c.inc"			;Part specific file
    25                          include "m8ssc.inc"			;Part specific file
    26                          include "memory.inc"			;File generated by PSoC Designer (Project dependent)
    27                          
    28                          ;--------------------------------------
    29                          ; Export Declarations
    30                          ;--------------------------------------
    31                          
    32                          export __Start
    33                          IF	(TOOLCHAIN & HITECH)
    34                          ELSE
    35                          export __bss_start
    36                          export __data_start
    37                          export __idata_start
    38                          export __func_lit_start
    39                          export __text_start
    40                          ENDIF
    41                          export  _bGetPowerSetting
    42                          export   bGetPowerSetting
    43                          
    44                          
    45                          ;--------------------------------------
    46                          ; Optimization flags
    47                          ;--------------------------------------
    48                          ;
    49                          ; To change the value of these flags, modify the file boot.tpl, not
    50                          ; boot.asm. See the notes in the banner comment at the beginning of
    51                          ; this file.
    52                          
    53                          ; Optimization for Assembly language (only) projects and C-language projects
    54                          ; that do not depend on the C compiler to initialize the values of RAM variables.
    55                          ;   Set to 1: Support for C Run-time Environment initialization
    56                          ;   Set to 0: Support for C not included. Faster start up, smaller code space.
    57                          ;
    58                          IF	(TOOLCHAIN & HITECH)
    59                          ; The C compiler will customize the startup code - it's not required here
    60                          
    61  0000                    C_LANGUAGE_SUPPORT:              equ 0
    62                          ELSE
    63                          C_LANGUAGE_SUPPORT:              equ 1
    64                          ENDIF
    65                          
    66                          
    67                          ; For historical reasons, by default the boot code uses an lcall instruction
    68                          ; to invoke the user's _main code. If _main executes a return instruction,
    69                          ; boot provides an infinite loop. By changing the following equate from zero
    70                          ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
    71                          ; bytes on the stack which are otherwise required for the return address. If
    72                          ; this option is enabled, _main must not return. (Beginning with the 4.2
    73                          ; release, the C compiler automatically places an infinite loop at the end
    74                          ; of main, rather than a return instruction.)
    75                          ;
    76  0000                    ENABLE_LJMP_TO_MAIN:             equ 0
    77                          
    78                          ; The following equate is required for proper operation. Reseting its value
    79                          ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
    80                          ; selected.  If the designer chooses to not wait then stabilization of the ECO
    81                          ; and PLL_Lock must take place within user code. See the family data sheet for
    82                          ; the requirements of starting the ECO and PLL lock mode.
    83                          ;
    84                          ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
    85                          ;                invoking main
    86                          ;   Set to 0: Boot code does not wait; clock may not have stabilized by
    87                          ;               the time code in main starts executing.
    88                          ;
    89  0001                    WAIT_FOR_32K:                    equ 1
    90                          
    91                          ;-----------------------------------------------------------------------------
    92                          ; Interrupt Vector Table
    93                          ;-----------------------------------------------------------------------------
    94                          ;
    95                          ; Interrupt vector table entries are 4 bytes long.  Each one contains
    96                          ; a jump instruction to an ISR (Interrupt Service Routine), although
    97                          ; very short ISRs could be encoded within the table itself. Normally,
    98                          ; vector jump targets are modified automatically according to the user
    99                          ; modules selected. This occurs when the 'Generate Application' opera-
   100                          ; tion is run causing PSoC Designer to create boot.asm and the other
   101                          ; configuration files. If you need to hard code a vector, update the
   102                          ; file boot.tpl, not boot.asm. See the banner comment at the beginning
   103                          ; of this file.
   104                          ;-----------------------------------------------------------------------------
   105                          
   106                              AREA TOP (ROM, ABS, CON)
   107                          
   108  0000                        org   0                        ;Reset Interrupt Vector
   109                          IF	(TOOLCHAIN & HITECH)
   110                          ;   jmp   __Start                  ;C compiler fills in this vector
   111                          ELSE
   112                              jmp   __Start                  ;First instruction executed following a Reset
   113                          ENDIF
   114                              ;@PSoC_BOOT_ISR_UserCode_START@
   115                              ;---------------------------------------------------
   116                              ; Insert your custom code below this banner
   117                              ;---------------------------------------------------
   118                          
   119  0004                        org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
   120  0004  30                    halt                           ;Stop execution if power falls too low
   121                          
   122  0008                        org   08h                      ;Analog Column 0 Interrupt Vector
   123                              // call	void_handler
   124  0008  7E                    reti
   125                          
   126  000C                        org   0Ch                      ;Analog Column 1 Interrupt Vector
   127                              // call	void_handler
   128  000C  7E                    reti
   129                          
   130  0010                        org   10h                      ;Analog Column 2 Interrupt Vector
   131                              // call	void_handler
   132  0010  7E                    reti
   133                          
   134  0014                        org   14h                      ;Analog Column 3 Interrupt Vector
   135                              // call	void_handler
   136  0014  7E                    reti
   137                              
   138  0018                        org   18h                      ;VC3 Interrupt Vector
   139                              // call	void_handler
   140  0018  7E                    reti
   141                          
   142  001C                        org   1Ch                      ;GPIO Interrupt Vector
   143                              // call	void_handler
   144  001C  7E                    reti
   145                          
   146  0020                        org   20h                      ;PSoC Block DBC00 Interrupt Vector
   147                              // call	void_handler
   148  0020  7E                    reti
   149                          
   150  0024                        org   24h                      ;PSoC Block DBC01 Interrupt Vector
   151  0024  7C 3BF2               lcall _Timer16ISR
   152  0027  7E                    reti
   153                          
   154  0028                        org   28h                      ;PSoC Block DCC02 Interrupt Vector
   155  0028  7D 30D2               ljmp	_UART_Sensor_TX_ISR
   156  002B  7E                    reti
   157                          
   158  002C                        org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
   159  002C  7C 3C10               lcall _SensorUART
   160  002F  7E                    reti
   161                              
   162  0030                        org   30h                      ;PSoC Block DBC10 Interrupt Vector
   163  0030  7C 3B49               lcall _Timer8ISR
   164  0033  7E                    reti
   165                          
   166  0034                        org   34h                      ;PSoC Block DBC11 Interrupt Vector
   167                              // call	void_handler
   168  0034  7E                    reti
   169                          
   170  0038                        org   38h                      ;PSoC Block DCC12 Interrupt Vector
   171  0038  7D 2F82               ljmp	_UART_Board_TX_ISR
   172  003B  7E                    reti
   173                          
   174  003C                        org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
   175  003C  7C 3B44               lcall _BoardUART
   176  003F  7E                    reti
   177                          
   178  0050                        org   50h                      ;SARADC Interrupt Vector
   179  0050  7D 2D86               ljmp	_SAR10_ISR
   180  0053  7E                    reti
   181                          
   182  0054                        org   54h                      ;CSD0 Interrupt Vector
   183                              // call	void_handler
   184  0054  7E                    reti
   185                          
   186  0058                        org   58h                      ;CSD1 Interrupt Vector
   187                              // call	void_handler
   188  0058  7E                    reti
   189                          
   190  005C                        org   5Ch                      ;RTC Interrupt Vector
   191                              // call	void_handler
   192  005C  7E                    reti
   193                              
   194  0050                        org 50h                        ;SAR10 Interrupt Vector
   195  0050  7D 2D86               ljmp	_SAR10_ISR
   196  0053  7E                    reti
   197                          
   198  0060                        org   60h                      ;PSoC I2C Interrupt Vector
   199                              // call	void_handler
   200  0060  7E                    reti
   201                          
   202  0064                        org   64h                      ;Sleep Timer Interrupt Vector
   203                              // call	void_handler
   204  0064  7E                    reti
   205                              ;---------------------------------------------------
   206                              ; Insert your custom code above this banner
   207                              ;---------------------------------------------------
   208                              ;@PSoC_BOOT_ISR_UserCode_END@
   209                          
   210                          ;-----------------------------------------------------------------------------
   211                          ;  Start of Execution.
   212                          ;-----------------------------------------------------------------------------
   213                          ;  The Supervisory ROM SWBootReset function has already completed the
   214                          ;  calibrate1 process, loading trim values for 5 volt operation.
   215                          ;
   216                          
   217                          IF	(TOOLCHAIN & HITECH)
   218                           	AREA PD_startup(CODE, REL, CON)
   219                          ELSE
   220                              org 68h
   221                          ENDIF
   222  3F46                    __Start:
   223                          
   224                              ; initialize SMP values for voltage stabilization, if required,
   225                              ; leaving power-on reset (POR) level at the default (low) level, at
   226                              ; least for now. 
   227                              ;
   228  3F46  71 10                 M8C_SetBank1
   229  3F48  62 E3 87              mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
   230  3F4B  70 EF                 M8C_SetBank0
   231                          
   232  3F4D  62 E3 38          M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
   233                          IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
   234  3F50  41 FF EF              M8C_EnableWatchDog
   235                          ENDIF
   236                          
   237  3F53  43 FE 04              or reg[CPU_SCR1], CPU_SCR1_ECO_ALLOWED ; Allow ECO being enabled
   238                          
   239                              ;---------------------------
   240                              ; Set up the Temporary stack
   241                              ;---------------------------
   242                              ; A temporary stack is set up for the SSC instructions.
   243                              ; The real stack start will be assigned later.
   244                              ;
   245  0080                    _stack_start:          equ 80h
   246  3F56  50 80                 mov   A, _stack_start          ; Set top of stack to end of used RAM
   247  3F58  4E                    swap  SP, A                    ; This is only temporary if going to LMM
   248                          
   249                              ;------------------------
   250                              ; Set Power-related Trim 
   251                              ;------------------------
   252  3F59  62 E3 38          M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
   253                          IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
   254                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   255                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   256                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
   257                           ENDIF
   258                          ENDIF ; 5.0 V Operation
   259                          
   260                          IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
   261                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
   262                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   263                              M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
   264                           ELSE                                          ; *** 12MHZ Main Oscillator ***
   265                              M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
   266                           ENDIF
   267                          ENDIF ; 3.3 Volt Operation
   268                          
   269                          IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
   270                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   271                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
   272                          ENDIF ; *** 2.7 Volts / 12MHZ operation ***
   273                          
   274                          IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
   275                              or  reg[CPU_SCR1], CPU_SCR1_SLIMO
   276                              M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
   277                          ENDIF ; *** 2.7 Volts /  6MHZ operation ***
   278                          
   279  3F5C  55 F8 00              mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
   280  3F5F  55 F9 00              mov  [bSSC_KEYSP], 0
   281                          
   282                              ;---------------------------------------
   283                              ; Initialize Crystal Oscillator and PLL
   284                              ;---------------------------------------
   285                          IF ( SELECT_32K & WAIT_FOR_32K )
   286                              ; If the user has requested the External Crystal Oscillator (ECO) then turn it
   287                              ; on and wait for it to stabilize and the system to switch over to it. The PLL
   288                              ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
   289                              ; the ECO to stabilize.
   290                              ;
   291                              M8C_SetBank1
   292                              mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
   293                              M8C_SetBank0
   294                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
   295                              or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
   296                              mov   reg[INT_VC],   0                ; Clear all pending interrupts
   297                          .WaitFor1s:
   298                              tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
   299                              jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
   300                                                                    ;  since interrupts are not globally enabled
   301                          ELSE ; !( SELECT_32K & WAIT_FOR_32K )
   302                              ; Either no ECO, or waiting for stable clock is to be done in main
   303  3F62  71 10                 M8C_SetBank1
   304  3F64  62 E0 12              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
   305  3F67  70 EF                 M8C_SetBank0
   306  3F69  62 E3 38              M8C_ClearWDTAndSleep           ; Reset the watch dog
   307                          
   308                          ENDIF ;( SELECT_32K & WAIT_FOR_32K )
   309                          
   310                          IF ( PLL_MODE )
   311                              ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
   312                              ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
   313                              ;
   314                              M8C_SetBank1
   315                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
   316                              M8C_SetBank0
   317                              M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
   318                              mov   reg[INT_VC], 0                  ; Clear all pending interrupts
   319                          
   320                          .WaitFor16ms:
   321                              tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   322                              jz   .WaitFor16ms
   323                              M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
   324                              mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
   325                              M8C_SetBank0
   326                          
   327                          IF      ( WAIT_FOR_32K )
   328                          ELSE ; !( WAIT_FOR_32K )
   329                              ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
   330                              ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
   331                          ENDIF ;(WAIT_FOR_32K)
   332                          ENDIF ;(PLL_MODE)
   333                          
   334                          	;-------------------------------------------------------
   335                              ; Initialize Proper Drive Mode for External Clock Pin
   336                              ;-------------------------------------------------------
   337                          
   338                              ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
   339                          
   340                          IF (SYSCLK_SOURCE)
   341                              and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
   342                          ENDIF
   343                              ; EXTCLK pin is now in proper drive mode to input the external clock signal
   344                          
   345                          IF	(TOOLCHAIN & HITECH)
   346                              ;---------------------------------------------
   347                              ; HI-TECH initialization: Enter the Large Memory Model, if applicable
   348                              ;---------------------------------------------
   349                          	global		__Lstackps
   350  3F6C  50 00             	mov     a,low __Lstackps
   351  3F6E  4E                	swap    a,sp
   352                          
   353                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   354  3F6F  62 D1 03              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   355  3F72  62 D3 03              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   356  3F75  62 D0 00              RAM_SETPAGE_CUR 0
   357  3F78  62 D5 00              RAM_SETPAGE_MVW 0
   358  3F7B  62 D4 00              RAM_SETPAGE_MVR 0
   359                              IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   360                                or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   361                              ELSE
   362  3F7E  71 80                   or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   363                              ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   364                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   365                          ELSE
   366                              ;---------------------------------------------
   367                              ; ImageCraft Enter the Large Memory Model, if applicable
   368                              ;---------------------------------------------
   369                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   370                              RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
   371                              mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
   372                              swap  A, SP
   373                              RAM_SETPAGE_IDX2STK            ; initialize other page pointers
   374                              RAM_SETPAGE_CUR 0
   375                              RAM_SETPAGE_MVW 0
   376                              RAM_SETPAGE_MVR 0
   377                          
   378                            IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
   379                              or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
   380                            ELSE
   381                              or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
   382                            ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
   383                          ELSE
   384                              mov   A, __ramareas_end        ; Set top of stack to end of used RAM
   385                              swap  SP, A
   386                          ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
   387                          ENDIF ;	TOOLCHAIN
   388                          
   389                              ;@PSoC_BOOT_LOADCFG_UserCode_START@
   390                              ;---------------------------------------------------
   391                              ; Insert your custom code below this banner
   392                              ;---------------------------------------------------
   393                          
   394                              ;---------------------------------------------------
   395                              ; Insert your custom code above this banner
   396                              ;---------------------------------------------------
   397                              ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
   398                          
   399                              ;-------------------------
   400                              ; Load Base Configuration
   401                              ;-------------------------
   402                              ; Load global parameter settings and load the user modules in the
   403                              ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
   404                              ; to minimize start up time; (2) We may still need to play with the
   405                              ; Sleep Timer.
   406                              ;
   407  3F80  7C 2B32               lcall LoadConfigInit
   408                          
   409                              ;-----------------------------------
   410                              ; Initialize C Run-Time Environment
   411                              ;-----------------------------------
   412                          IF ( C_LANGUAGE_SUPPORT )
   413                          IF ( SYSTEM_SMALL_MEMORY_MODEL )
   414                              mov  A,0                           ; clear the 'bss' segment to zero
   415                              mov  [__r0],<__bss_start
   416                          BssLoop:
   417                              cmp  [__r0],<__bss_end
   418                              jz   BssDone
   419                              mvi  [__r0],A
   420                              jmp  BssLoop
   421                          BssDone:
   422                              mov  A,>__idata_start              ; copy idata to data segment
   423                              mov  X,<__idata_start
   424                              mov  [__r0],<__data_start
   425                          IDataLoop:
   426                              cmp  [__r0],<__data_end
   427                              jz   C_RTE_Done
   428                              push A
   429                              romx
   430                              mvi  [__r0],A
   431                              pop  A
   432                              inc  X
   433                              adc  A,0
   434                              jmp  IDataLoop
   435                          
   436                          ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
   437                          
   438                          IF ( SYSTEM_LARGE_MEMORY_MODEL )
   439                              mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
   440                                                                 ; to use the Virtual Register page.
   441                          
   442                              ; Dereference the constant (flash) pointer pXIData to access the start
   443                              ; of the extended idata area, "xidata." Xidata follows the end of the
   444                              ; text segment and may have been relocated by the Code Compressor.
   445                              ;
   446                              mov   A, >__pXIData                ; Get the address of the flash
   447                              mov   X, <__pXIData                ;   pointer to the xidata area.
   448                              push  A
   449                              romx                               ; get the MSB of xidata's address
   450                              mov   [__r0], A
   451                              pop   A
   452                              inc   X
   453                              adc   A, 0
   454                              romx                               ; get the LSB of xidata's address
   455                              swap  A, X
   456                              mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
   457                                                                 ;   XIData structure list in flash
   458                              jmp   .AccessStruct
   459                          
   460                              ; Unpack one element in the xidata "structure list" that specifies the
   461                              ; values of C variables. Each structure contains 3 member elements.
   462                              ; The first is a pointer to a contiguous block of RAM to be initial-
   463                              ; ized. Blocks are always 255 bytes or less in length and never cross
   464                              ; RAM page boundaries. The list terminates when the MSB of the pointer
   465                              ; contains 0xFF. There are two formats for the struct depending on the
   466                              ; value in the second member element, an unsigned byte:
   467                              ; (1) If the value of the second element is non-zero, it represents
   468                              ; the 'size' of the block of RAM to be initialized. In this case, the
   469                              ; third member of the struct is an array of bytes of length 'size' and
   470                              ; the bytes are copied to the block of RAM.
   471                              ; (2) If the value of the second element is zero, the block of RAM is
   472                              ; to be cleared to zero. In this case, the third member of the struct
   473                              ; is an unsigned byte containing the number of bytes to clear.
   474                          
   475                          .AccessNextStructLoop:
   476                              inc   X                            ; pXIData++
   477                              adc   A, 0
   478                          .AccessStruct:                         ; Entry point for first block
   479                              ;
   480                              ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
   481                              ;
   482                              M8C_ClearWDT                       ; Clear the watchdog for long inits
   483                              push  A
   484                              romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
   485                              mov   reg[MVW_PP], A               ;   for use with MVI write operations
   486                              inc   A                            ; End of Struct List? (MSB==0xFF?)
   487                              jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
   488                              pop   A                            ; restore pXIData to [A,X]
   489                              inc   X                            ; pXIData++
   490                              adc   A, 0
   491                              push  A
   492                              romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
   493                              mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
   494                              pop   A                            ; restore pXIData to [A,X]
   495                              inc   X                            ; pXIData++ (point to size)
   496                              adc   A, 0
   497                              push  A
   498                              romx                               ; Get the size (CPU.A <- *pXIData)
   499                              jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
   500                              mov   [__r1], A                    ;             else downcount in __r1
   501                              pop   A                            ; restore pXIData to [A,X]
   502                          
   503                          .CopyNextByteLoop:
   504                              ; For each byte in the structure's array member, copy from flash to RAM.
   505                              ; Assert: pXIData in [A,X] points to previous byte of flash source;
   506                              ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
   507                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   508                              ;
   509                              inc   X                            ; pXIData++ (point to next data byte)
   510                              adc   A, 0
   511                              push  A
   512                              romx                               ; Get the data value (CPU.A <- *pXIData)
   513                              mvi   [__r0], A                    ; Transfer the data to RAM
   514                              tst   [__r0], 0xff                 ; Check for page crossing
   515                              jnz   .CopyLoopTail                ;   No crossing, keep going
   516                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   517                              inc   A
   518                              mov   reg[ MVW_PP], A
   519                          .CopyLoopTail:
   520                              pop   A                            ; restore pXIData to [A,X]
   521                              dec   [__r1]                       ; End of this array in flash?
   522                              jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
   523                              jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
   524                          
   525                          .ClearRAMBlockToZero:
   526                              pop   A                            ; restore pXIData to [A,X]
   527                              inc   X                            ; pXIData++ (point to next data byte)
   528                              adc   A, 0
   529                              push  A
   530                              romx                               ; Get the run length (CPU.A <- *pXIData)
   531                              mov   [__r1], A                    ; Initialize downcounter
   532                              mov   A, 0                         ; Initialize source data
   533                          
   534                          .ClearRAMBlockLoop:
   535                              ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
   536                              ;         __r1 holds a non-zero count of the number of bytes remaining.
   537                              ;
   538                              mvi   [__r0], A                    ; Clear a byte
   539                              tst   [__r0], 0xff                 ; Check for page crossing
   540                              jnz   .ClearLoopTail               ;   No crossing, keep going
   541                              mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
   542                              inc   A
   543                              mov   reg[ MVW_PP], A
   544                              mov   A, 0                         ; Restore the zero used for clearing
   545                          .ClearLoopTail:
   546                              dec   [__r1]                       ; Was this the last byte?
   547                              jnz   .ClearRAMBlockLoop           ;   No,  continue
   548                              pop   A                            ;   Yes, restore pXIData to [A,X] and
   549                              jmp   .AccessNextStructLoop        ;        initialize another RAM block
   550                          
   551                          .C_RTE_WrapUp:
   552                              pop   A                            ; balance stack
   553                          
   554                          ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
   555                          
   556                          C_RTE_Done:
   557                          
   558                          ENDIF ; C_LANGUAGE_SUPPORT
   559                          
   560                              ;-------------------------------
   561                              ; Voltage Stabilization for SMP
   562                              ;-------------------------------
   563                          
   564                          IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
   565                          IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
   566                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   567                              ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
   568                              ; 5V before enabling the Precision Power-On Reset (PPOR).
   569                              ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   570                              or   reg[INT_MSK0],INT_MSK0_SLEEP
   571                              M8C_SetBank1
   572                              and   reg[OSC_CR0], ~OSC_CR0_SLEEP
   573                              or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
   574                              M8C_SetBank0
   575                              M8C_ClearWDTAndSleep                   ; Restart the sleep timer
   576                              mov   reg[INT_VC], 0                   ; Clear all pending interrupts
   577                          .WaitFor2ms:
   578                              tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
   579                              jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
   580                          ENDIF ; SMP is operational
   581                          ENDIF ; 5.0V Operation
   582                          
   583                              ;-------------------------------
   584                              ; Set Power-On Reset (POR) Level
   585                              ;-------------------------------
   586                          
   587                              ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper 
                                selection 
   588                              ; is made (in the global resources section of the device editor), a compilation error is created
                                , disallowing
   589                              ; this selection. If the selection is valid, the POR level is then set.
   590                              ; Invalid cases checked: 
   591                              ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
   592                              ;   -At 2.7 volt operation, the cpu rate must be at or below 3 MHz
   593                          
   594                          
   595                          IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
   596                           IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
   597                           ELSE
   598                             IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
   599                             ELSE						; Otherwise, 24 MHz is selected... raise error
   600                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
   601                             ENDIF
   602                           ENDIF
   603                          ELSE
   604                          IF (POWER_SETTING & POWER_SET_2V7_12MHZ)	; 2.7V Operation with 12 MHz SLIMO?
   605                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 12 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is 
                                actually IMO/1)
   606                             ELSE						; Otherwise, 12 MHz is selected... raise error
   607                                ERROR_PSoC SEE COMMENTS			; Error - cannot use 12 MHz w/ 2.7V operation (Clock <= 3 MHz)
   608                             ENDIF;
   609                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_12MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_12MHz" setting is a
                                ctually IMO/2)
   610                             ELSE						; Otherwise, 6 MHz is selected... raise error
   611                                ERROR_PSoC SEE COMMENTS			; Error - Cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   612                             ENDIF;CPU_12MHz
   613                          ELSE
   614                          IF (POWER_SETTING & POWER_SET_2V7_6MHZ)		; 2.7V Operation with 6 MHz SLIMO?
   615                             IF(CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 6 MHz, do nothing. ("OSC_CR0_CPU_24MHz" setting is a
                                ctually IMO/1)
   616                             ELSE						; Otherwise, 6 MHz is selected... raise error
   617                          	ERROR_PSoC SEE COMMENTS			; Error - cannot use 6 MHz w/ 2.7V operation (Clock <= 3 MHz)
   618                             ENDIF
   619                          ENDIF ; 2.7v w/ 6 MHz
   620                          ENDIF ; 2.7v w/ 12 MHz
   621                          ENDIF ; 3.3V w/ 24 MHz
   622                              ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
   623                              ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
   624                              ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
   625                              ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
   626                              ;  Technical Reference Manual #001-48461 for more information.
   627                          
   628  3F83  71 10                 M8C_SetBank1
   629                          
   630                          IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
   631                                                                         ;  Yes, lowest trip already set
   632                          ELSE                                           ;   No, must adjust POR...
   633                          IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
   634                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
   635                          ELSE
   636                          IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
   637                           IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
   638                              or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
   639                           ELSE                                          ;    No, fast mode
   640                            IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
   641                              or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
   642                            ELSE ; 24HMz                                 ;
   643  3F85  43 E3 20              or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
   644                            ENDIF ; 24MHz
   645                           ENDIF ; Slow Mode
   646                          ENDIF ; 5.0V Operation
   647                          ENDIF ; 3.3V Operation
   648                          ENDIF ; 2.7V Operation
   649                          
   650  3F88  70 EF                 M8C_SetBank0
   651                          
   652                              ;----------------------------
   653                              ; Wrap up and invoke "main"
   654                              ;----------------------------
   655                          
   656                              ; Disable the Sleep interrupt that was used for timing above.  In fact,
   657                              ; no interrupts should be enabled now, so may as well clear the register.
   658                              ;
   659  3F8A  62 E0 00              mov  reg[INT_MSK0],0
   660                          
   661                              ; Everything has started OK. Now select requested CPU & sleep frequency.
   662                              ;
   663  3F8D  71 10                 M8C_SetBank1
   664  3F8F  62 E0 13              mov reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
   665  3F92  43 E2 00              or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
   666  3F95  70 EF                 M8C_SetBank0
   667                          
   668                              ; Global Interrupt are NOT enabled, this should be done in main().
   669                              ; LVD is set but will not occur unless Global Interrupts are enabled.
   670                              ; Global Interrupts should be enabled as soon as possible in main().
   671                              ;
   672  3F97  62 E2 00              mov  reg[INT_VC],0             ; Clear any pending interrupts which may
   673                                                             ; have been set during the boot process.
   674                          IF	(TOOLCHAIN & HITECH)
   675  3F9A  7D 3FA0           	ljmp  startup                  ; Jump to C compiler startup code
   676                          ELSE
   677                          IF ENABLE_LJMP_TO_MAIN
   678                              ljmp  _main                    ; goto main (no return)
   679                          ELSE
   680                              lcall _main                    ; call main
   681                          .Exit:
   682                              jmp  .Exit                     ; Wait here after return till power-off or reset
   683                          ENDIF
   684                          ENDIF ; TOOLCHAIN
   685                          
   686                              ;---------------------------------
   687                              ; Library Access to Global Parms
   688                              ;---------------------------------
   689                              ;
   690  3F9D                     bGetPowerSetting:
   691  3F9D                    _bGetPowerSetting:
   692                              ; Returns value of POWER_SETTING in the A register.
   693                              ; No inputs. No Side Effects.
   694                              ;
   695                          IF (POWER_SETTING & POWER_SET_2V7)
   696                              mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
   697                          ELSE
   698  3F9D  50 10                 mov   A, POWER_SETTING          ; Supply voltage and internal main osc
   699                          ENDIF
   700  3F9F  7F                    ret
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:15:50 2015
           SELECT_32K_JUST 0000                  _Timer8ISR 3B49                  __Lstackps 0300          C_LANGUAGE_SUPPORT 0000  
               _Timer16ISR 3BF2               POWER_SET_2V7 0006               POWER_SET_3V3 0008               POWER_SETTING 0010  
             POWER_SET_5V0 0010                 _SensorUART 3C10            SLEEP_TIMER_JUST 0010                    CPU_SCR0 00FF  
                  CPU_SCR1 00FE            bGetPowerSetting 3F9D                    INT_MSK0 00E0          POWER_SET_2V7_6MHZ 0002  
                  PLL_MODE 0000                      HITECH 0002             FLAG_PGMODE_10b 0080                      IDX_PP 00D3  
                    CUR_PP 00D0                      INT_VC 00E2              CPU_CLOCK_JUST 0003                      MVR_PP 00D4  
                    MVW_PP 00D5           _bGetPowerSetting 3F9D                WAIT_FOR_32K 0001                      STK_PP 00D1  
             LVD_TBEN_JUST 0000                      VLT_CR 00E3             VLT_CR_POR_HIGH 0020       SWITCH_MODE_PUMP_JUST 0080  
         SLEEP_TIMER_JUST2 0000                _stack_start 0080                  _SAR10_ISR 2D86   SYSTEM_LARGE_MEMORY_MODEL 0001  
       POWER_SET_2V7_12MHZ 0004      SYSTEM_MULTIPAGE_STACK 0000          POWER_SET_SLOW_IMO 0001               PLL_MODE_JUST 0000  
                 TOOLCHAIN 0002            SWITCH_MODE_PUMP 0001               SYSCLK_SOURCE 0000                     OSC_CR0 00E0  
                   OSC_CR2 00E2                     RES_WDT 00E3          CPU_SCR0_PORS_MASK 0010             WATCHDOG_ENABLE 0001  
        _UART_Board_TX_ISR 2F82                  bSSC_KEYSP 00F9        CPU_SCR1_ECO_ALLOWED 0004              LoadConfigInit 2B32  
       _UART_Sensor_TX_ISR 30D2                     __Start 3F46                  _BoardUART 3B44                   bSSC_KEY1 00F8  
         OSC_CR0_CPU_12MHz 0002           OSC_CR0_CPU_24MHz 0003                     startup 3FA0           SYSTEM_STACK_PAGE 0003  
             FLAG_XIO_MASK 0010                  SELECT_32K 0000           TRIP_VOLTAGE_JUST 0007  SYSTEM_IDXPG_TRACKS_STK_PP 0000  
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
                                                                                                           Fri Jun 12 16:54:53 2015
     1                          
     2                          	; HI-TECH C COMPILER (Cypress PSOC) V9.61
     3                          	; Copyright (C) 1984-2008 HI-TECH Software
     4                          	;Serial no. HCPSOC-679591
     5                          
     6                          	; Auto-generated runtime startup code for final link stage.
     7                          
     8                          	;
     9                          	; Compiler options:
    10                          	;
    11                          	; --asmlist --errformat --chip=CY8C22345 --WARN=0 --OPT=asm,9 \
    12                          	; -OLED_display -Moutput/LED_display.mp --OUTDIR=./output \
    13                          	; ./obj/boot.obj ./obj/boardcommunication.p1 ./obj/led.p1 ./obj/main.p1 \
    14                          	; ./obj/particlesensor.p1 ./obj/si7020.p1 ./obj/software_iic.p1 \
    15                          	; ./obj/t74hc595.p1 lib/libpsoc.lib lib/libpsoc.lpp \
    16                          	; D:/Cypress/PSOCDE~1/5.4/Common/CY110F~1/tools/lib/CY8C22045/cms.lib
    17                          	;
    18                          
    19                          
    20                          	processor	CY8C22345
    21                          	macro	M8C_ClearWDT
    22                          	mov reg[0xE3],0x38
    23  30D4                    	endm
    24                          
    25                          	psect	PD_startup,class=CODE
    26                          	psect	init,class=CODE
    27                          	psect	end_init,class=CODE
    28                          	psect	powerup,class=CODE
    29                          	psect	vectors,ovrld,class=CODE
    30                          	psect	text,class=CODE
    31                          	psect	maintext,class=CODE
    32                          	psect	intrtext,class=CODE
    33                          	psect	fnauto,class=RAM,space=1
    34                          	psect	bss,class=RAM,space=1
    35                          	psect	InterruptRAM,class=RAM,space=1
    36                          	psect	cdata,class=ROM,space=0,reloc=256
    37                          	psect	psoc_config,class=ROM
    38                          	psect	UserModules,class=ROM
    39                          	psect	strings,class=ROM
    40                          	psect	SSCParmBlk,abs,ovrld,class=RAM,space=1
    41  00F8                    	org	0xF8
    42  00F8                    	blk	8
    43                          
    44                          	psect	stackps,class=RAM
    45                          	global	__Lstackps, __stack_start__
    46  0300                    __stack_start__:
    47                          	psect	bss0,class=RAM,space=1
    48                          	psect	nvram0,class=RAM,space=1
    49                          	psect	rbit0,bit,class=RAM,space=1
    50                          	psect	nvbit0,bit,class=RAM,space=1
    51                          	psect	ramdata0,class=RAM,space=1
    52                          	psect	romdata0,class=BANKROM,space=0
    53                          	psect	bss1,class=RAM,space=1
    54                          	psect	nvram1,class=RAM,space=1
    55                          	psect	rbit1,bit,class=RAM,space=1
    56                          	psect	nvbit1,bit,class=RAM,space=1
    57                          	psect	ramdata1,class=RAM,space=1
    58                          	psect	romdata1,class=BANKROM,space=0
    59                          	psect	bss2,class=RAM,space=1
    60                          	psect	nvram2,class=RAM,space=1
    61                          	psect	rbit2,bit,class=RAM,space=1
    62                          	psect	nvbit2,bit,class=RAM,space=1
    63                          	psect	ramdata2,class=RAM,space=1
    64                          	psect	romdata2,class=BANKROM,space=0
    65                          	psect	bss3,class=RAM,space=1
    66                          	psect	nvram3,class=RAM,space=1
    67                          	psect	rbit3,bit,class=RAM,space=1
    68                          	psect	nvbit3,bit,class=RAM,space=1
    69                          	psect	ramdata3,class=RAM,space=1
    70                          	psect	romdata3,class=BANKROM,space=0
    71                          
    72                          	global	start,startup,_main
    73                          	global	reset_vec,intlevel0,intlevel1,intlevel2
    74  0003                    intlevel0:
    75  0003                    intlevel1:
    76  0003                    intlevel2:		; for C funcs called from assembler
    77                          
    78                          	fnconf	fnauto,??,?
    79                          	fnroot	_main
    80  006C                    TMP_DR0	equ	108
    81  006D                    TMP_DR1	equ	109
    82  006E                    TMP_DR2	equ	110
    83  006F                    TMP_DR3	equ	111
    84  00D0                    CUR_PP	equ	208
    85  00D1                    STK_PP	equ	209
    86  00D3                    IDX_PP	equ	211
    87  00D4                    MVR_PP	equ	212
    88  00D5                    MVW_PP	equ	213
    89  00F7                    CPU_F	equ	247
    90                          	psect	vectors
    91  0000                    reset_vec:
    92  0000                    start:
    93                          	global	__Start
    94  0000  7D 3F46           	ljmp	__Start
    95                          
    96                          	psect	init
    97  3FA0                    startup:
    98  3FA0  62 E3 38          	M8C_ClearWDT
    99  3FA3  71 80             	or	f, 0x80	;select multiple RAM page mode
   100  3FA5  70 BF             	and	f, 0xBF
   101                          
   102                          ;	Clear uninitialized variables in bank 0
   103                          	global	__Lbss0
   104  3FA7  62 D1 00          	mov	reg[STK_PP],0
   105  3FAA  50 00             	mov	a,low __Lbss0
   106  3FAC  4E                	swap	a,sp
   107  3FAD  50 00             	mov	a,0
   108  3FAF  57 54             	mov	x,84
   109  3FB1                    bssloop0:
   110  3FB1  08                	push	a
   111  3FB2  79                	dec	x
   112  3FB3  BFFD              	jnz	bssloop0
   113                          
   114                          ;	Copy initialized data into bank 0
   115                          	global	__Lromdata0,__Lramdata0
   116  3FB5  57 65             	mov	x,low __Lromdata0
   117  3FB7  50 54             	mov	a,low __Lramdata0
   118  3FB9  4E                	swap	a,sp
   119  3FBA                    dataloop0:
   120  3FBA  50 00             	mov	a,high __Lromdata0
   121  3FBC  28                	romx
   122  3FBD  08                	push	a
   123  3FBE  75                	inc	x
   124  3FBF  5B                		mov	a,x
   125  3FC0  39 6A             cmp	a,low (__Lromdata0+5)
   126  3FC2  BFF7              	jnz	dataloop0
   127  3FC4  62 D0 00          	mov	reg[CUR_PP],0
   128  3FC7  62 D1 03          	mov	reg[STK_PP],3
   129  3FCA  50 00             	mov	a,low __Lstackps
   130  3FCC  4E                	swap	a,sp
   131                          
   132  3FCD  7D 3C8E           	ljmp	_main
HI-TECH Software Macro Assembler (PSoC MCU) V9.61
Symbol Table                                                                                               Fri Jun 12 16:54:53 2015
    __Lramdata0 0054       __Lstackps 0300      __Lromdata0 0065            _main 3C8E            start 0000        dataloop0 3FBA  
         CUR_PP 00D0           STK_PP 00D1        intlevel0 0003        intlevel1 0003        intlevel2 0003        reset_vec 0000  
       bssloop0 3FB1          __Lbss0 0000          __Start 3F46          startup 3FA0  __stack_start__ 0300  
